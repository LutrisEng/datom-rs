# SPDX-FileCopyrightText: 2021 Lutris Engineering, Inc
# SPDX-License-Identifier: BlueOak-1.0.0 OR BSD-2-Clause-Patent
# SPDX-FileContributor: Piper McCorkle <piper@lutris.engineering>

name: CI

on:
  push:
    branches:
      - main
  pull_request:
  schedule:
    - cron: "0 0 * * *"

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test on ${{ matrix.os }}
    needs: check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: Run tests without coverage
        uses: actions-rs/cargo@v1
        if: matrix.os != 'ubuntu-latest'
        with:
          command: test
          args: --all
      - name: Run tests with coverage
        run: cargo test --all
        if: matrix.os == 'ubuntu-latest'
        env:
          CARGO_INCREMENTAL: "0"
          RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests"
          RUSTDOCFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests"
      - id: coverage
        uses: actions-rs/grcov@v0.1
        if: matrix.os == 'ubuntu-latest'
      - uses: coverallsapp/github-action@master
        if: matrix.os == 'ubuntu-latest'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{ steps.coverage.outputs.report }}

  test_cross:
    name: Cross-test on ${{ matrix.target }}
    needs: test
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    strategy:
      matrix:
        target:
          ## Rust Tier 1 targets (except ones we've already tested)
          - aarch64-unknown-linux-gnu
          - i686-pc-windows-gnu
          - i686-pc-windows-msvc
          - i686-unknown-linux-gnu
          # - x86_64-apple-darwin (Already tested above)
          - x86_64-pc-windows-gnu
          # - x86_64-pc-windows-msvc (Already tested above)
          # - x86_64-unknown-linux-gnu (Already tested above)
          ## Rust Tier 2 (w/ host tools) targets that we care about testing
          # - aarch64-apple-darwin (Doesn't compile on x86_64 macOS)
          - aarch64-unknown-linux-musl
          # - x86_64-unknown-freebsd (Doesn't compile on Linux)
          - x86_64-unknown-linux-musl
          # - x86_64-unknown-netbsd (Doesn't compile on Linux)
          ## Rust Tier 2 (w/o host tools) targets that we care about testing
          # - wasm32-wasi (Doesn't run using cross)
        include:
          - target: i686-pc-windows-gnu
            os: windows-latest
          - target: i686-pc-windows-msvc
            os: windows-latest
          - target: x86_64-pc-windows-gnu
            os: windows-latest
          # - target: aarch64-apple-darwin
          #   os: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          target: ${{ matrix.target }}
          toolchain: nightly
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/cargo@v1
        if: matrix.os != 'ubuntu-latest'
        with:
          use-cross: true
          command: test
          args: --all --target ${{ matrix.target }}

  build_release:
    name: Build release binary for ${{ matrix.target }}
    needs: test_cross
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    strategy:
      matrix:
        target:
          ## Rust Tier 1 targets
          - aarch64-unknown-linux-gnu
          - i686-pc-windows-gnu
          - i686-pc-windows-msvc
          - i686-unknown-linux-gnu
          - x86_64-apple-darwin
          - x86_64-pc-windows-gnu
          - x86_64-pc-windows-msvc
          - x86_64-unknown-linux-gnu
          ## Rust Tier 2 (w/ host tools) targets that we care about
          # - aarch64-apple-darwin (Doesn't compile on x86_64 macOS)
          - aarch64-unknown-linux-musl
          # - x86_64-unknown-freebsd (Doesn't compile on Linux)
          - x86_64-unknown-linux-musl
          # - x86_64-unknown-netbsd (Doesn't compile on Linux)
          ## Rust Tier 2 (w/o host tools) targets that we care about
          - wasm32-wasi
          ## Rust Tier 3 targets that we (kinda) care about
          # - aarch64-unknown-freebsd (Doesn't compile on Linux)
          # - aarch64-unknown-netbsd (Doesn't compile on Linux)
          # - i686-unknown-netbsd (Doesn't compile on Linux)
          # - i686-unknown-openbsd (Doesn't compile on Linux)
          # - x86_64-unknown-openbsd (Doesn't compile on Linux)
        include:
          - target: i686-pc-windows-gnu
            os: windows-latest
          - target: i686-pc-windows-msvc
            os: windows-latest
          - target: x86_64-pc-windows-gnu
            os: windows-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          # - target: aarch64-apple-darwin
          #   os: macos-latest
          - target: x86_64-apple-darwin
            os: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          target: ${{ matrix.target }}
          toolchain: nightly
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --all --release
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}
          path: target/release

  lint:
    name: Lint
    needs: check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt, clippy
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all
          name: Clippy

  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  reuse:
    name: REUSE
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - run: pip install reuse
      - run: reuse lint

  validate_citation:
    name: Validate CITATION.cff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: LutrisEng/validate-cff@v1.0.0

  docs:
    name: Build Docs
    needs: check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/cargo@v1
        with:
          command: doc
      - run: cp -R website/* target/doc/
      - uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          force_orphan: true
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"
          commit_message: Auto-generated documentation

  ready_to_merge:
    name: Ready to Merge
    needs:
      - check
      - test
      - test_cross
      - lint
      - security_audit
      - reuse
      - validate_citation
      - docs
    runs-on: ubuntu-latest
    steps:
      - run: echo Good to go!
