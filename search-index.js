const searchIndex = new Map(JSON.parse('[\
["arc_swap",{"doc":"Making <code>Arc</code> itself atomic","t":"IFIKREEFEKCMMNNNNNNCNNNNNNNNCNNNNNNNNNNNNNMNNNNNNMNNNNNNNNNNNNCNNNNNNNNNNKFFKRFNNNNNNNNNNNNNNNNNNNNNMMNNNNNNNNNNNNNNNNNNNNNNKFFNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNCCCCKIK","n":["ArcSwap","ArcSwapAny","ArcSwapOption","AsRaw","Base","Cache","DefaultStrategy","Guard","IndependentStrategy","RefCnt","access","as_ptr","as_raw","as_raw","as_raw","borrow","borrow","borrow_mut","borrow_mut","cache","compare_and_swap","const_empty","const_empty","dec","dec","default","default","deref","docs","drop","empty","fmt","fmt","fmt","fmt","from","from","from","from","from_inner","from_pointee","from_pointee","from_ptr","inc","inc","into","into","into_inner","into_inner","into_ptr","load","load","load","load","load","load","load","load_full","map","new","rcu","store","strategy","swap","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","with_strategy","Access","AccessConvert","Constant","DynAccess","Guard","Map","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","eq","fmt","fmt","from","from","from","hash","into","into","into","load","load","load","load","load","load","load","load","load","load","load","new","partial_cmp","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Access","Cache","MapCache","arc_swap","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fmt","fmt","from","from","from","into","into","load","load","load","load","map","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","internal","limitations","patterns","performance","CaS","DefaultStrategy","Strategy"],"q":[[0,"arc_swap"],[73,"arc_swap::access"],[124,"arc_swap::cache"],[157,"arc_swap::docs"],[161,"arc_swap::strategy"],[164,"alloc::sync"],[165,"core::option"],[166,"core::default"],[167,"core::fmt"],[168,"core::fmt"],[169,"alloc::rc"],[170,"core::ops::function"],[171,"core::clone"],[172,"core::ops::function"],[173,"core::result"],[174,"core::any"],[175,"core::cmp"],[176,"core::cmp"],[177,"core::hash"],[178,"core::cmp"]],"d":["An atomic storage for <code>Arc</code>.","An atomic storage for a reference counted smart pointer …","An atomic storage for <code>Option&lt;Arc&gt;</code>.","A trait describing things that can be turned into a raw …","The base type the pointer points to.","","","A temporary storage of the pointer.","","A trait describing smart reference counted pointers.","Abstracting over accessing parts of stored value.","Provides a view into the smart pointer as a raw pointer.","Converts the value into a raw pointer.","","","","","","","Caching handle into the ArcSwapAny.","Swaps the stored Arc if it equals to <code>current</code>.","A const-fn equivalent of empty.","A const-fn equivalent of empty.","Decrements the reference count by one.","Decrements the reference count by one.","","","","Additional documentation.","","A convenience constructor for an empty value.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Create a guard for a given value <code>inner</code>.","A convenience constructor directly from a pointed-to value.","A convenience constructor directly from the pointed-to …","Converts a raw pointer back into the smart pointer, …","Increments the reference count by one.","Increments the reference count by one.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts it into the held value.","Extracts the value inside.","Converts the smart pointer into a raw pointer, without …","","","","","","Provides a temporary borrow of the object inside.","","Loads the value.","Provides an access to an up to date projection of the …","Constructs a new storage.","Read-Copy-Update of the pointer inside.","Replaces the value inside this instance.","Strategies for protecting the reference counts.","Exchanges the value inside this instance.","","","","","","","","","Constructs a new storage while customizing the protection …","Abstracts over ways code can get access to a value of type …","DynAccess to Access wrapper.","Access to an constant.","An object-safe version of the <code>Access</code> trait.","A guard object containing the value and keeping it alive.","An adaptor to provide access to a part of larger structure.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The loading method.","The equivalent of <code>Access::load</code>.","","","","","","","","","","Creates a new instance.","","","","","","","","","","","","","Generalization of caches providing access to <code>T</code>.","Caching handle for <code>ArcSwapAny</code>.","An implementation of a cache with a projection into the …","Gives access to the (possibly shared) cached <code>ArcSwapAny</code>.","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Loads the value from cache.","Loads the currently held value.","","","Turns this cache into a cache with a projection inside the …","Creates a new caching handle.","","","","","","","","","Internal details.","Limitations and common pitfalls.","Common use patterns","Performance characteristics.","An extension of the <code>Strategy</code>, allowing for compare and …","The default strategy.","A strategy for protecting the reference counted pointer <code>T</code>."],"i":[0,0,0,0,2,0,0,0,0,0,0,2,3,4,4,4,5,4,5,0,5,5,10,2,2,4,5,4,0,5,5,4,4,5,5,4,4,5,5,4,5,5,2,2,2,4,5,4,5,2,4,4,5,5,5,5,5,5,5,5,5,5,0,5,4,5,4,5,4,5,4,5,5,0,0,0,0,35,0,39,19,27,39,19,27,19,27,19,27,27,27,19,27,39,19,27,27,39,19,27,35,38,38,38,38,39,39,19,19,27,27,19,27,19,27,39,19,27,39,19,27,39,19,27,0,0,0,41,41,42,41,42,41,42,41,42,41,42,41,41,42,41,42,43,41,41,42,41,41,41,42,41,42,41,42,41,42,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,[[[2,[],[[1,[-1]]]]],-1,[]],[3],[[[4,[-1]]],[],2],[[[4,[-1]]],[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[5,[-1,-2]],-3,-1],[[4,[-1,-2]]],2,[[6,[-1]],[7,[-1]]],3],[[],[[5,[[9,[[8,[-1]]]]]]],[]],[[],[[10,[-1]]],[]],[-1,11,[]],[-1,11,[]],[[],[[4,[-1,-2]]],[12,2],[[7,[-1]]]],[[],[[5,[-1,-2]]],[2,12],[12,[7,[-1]]]],[[[4,[-1,-2]]],-1,2,[[7,[-1]]]],0,[[[5,[-1,-2]]],11,2,[[7,[-1]]]],[[],[[5,[[9,[[8,[-1]]]],-2]]],[],[12,[7,[[9,[[8,[-1]]]]]]]],[[[4,[-1,-2]],13],14,[15,2],[[7,[-1]]]],[[[4,[-1,-2]],13],14,[16,2],[[7,[-1]]]],[[[5,[-1,-2]],13],14,[15,2],[[7,[-1]]]],[[[5,[-1,-2]],13],14,[16,2],[[7,[-1]]]],[-1,-1,[]],[-1,[[4,[-1,-2]]],2,[[7,[-1]]]],[-1,-1,[]],[-1,[[5,[-1,-2]]],2,[12,[7,[-1]]]],[-1,[[4,[-1,-2]]],2,[[7,[-1]]]],[-2,[[5,[[9,[[8,[-1]]]],-3]]],[],[[17,[[9,[-1]]]]],[12,[7,[[9,[[8,[-1]]]]]]]],[-1,[[5,[[8,[-1]],-2]]],[],[12,[7,[[8,[-1]]]]]],[-1,[[2,[],[[1,[-1]]]]],[]],[[[2,[],[[1,[-1]]]]],-1,[]],[[[2,[],[[1,[-1]]]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[-1,-2]]],-1,2,[[7,[-1]]]],[[[5,[-1,-2]]],-1,2,[[7,[-1]]]],[[[2,[],[[1,[-1]]]]],-1,[]],[-1,[],[]],[-1,[[0,[-2]]],[],[]],[[[5,[[18,[-1]],-2]]],-3,[],[[7,[[18,[-1]]]]],[]],[[[5,[-1,-2]]],-3,2,[[7,[-1]]],[]],[[[5,[[8,[-1]],-2]]],-3,[],[[7,[[8,[-1]]]]],[]],[[[5,[-1,-2]]],[[4,[-1,-2]]],2,[[7,[-1]]]],[-1,[[0,[-2]]],[],[]],[[[5,[-1,-2]]],-1,2,[[7,[-1]]]],[[[5,[-1,-2]],-5],[[19,[[5,[-1,-2]],-3,-5]]],2,[[7,[-1]]],[],[],[[21,[-3],[[20,[-4]]]],22]],[-1,[[5,[-1,-2]]],2,[12,[7,[-1]]]],[[[5,[-1,-2]],-4],-1,2,[[6,[-1]],[7,[-1]]],[[17,[-1]]],[[23,[-1],[[20,[-3]]]]]],[[[5,[-1,-2]],-1],11,2,[[7,[-1]]]],0,[[[5,[-1,-2]],-1],-1,2,[[7,[-1]]]],[-1,24,[]],[-1,24,[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[[-1,-2],[[5,[-1,-2]]],2,[[7,[-1]]]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[19,[-1,-2,-3]]],[[19,[-1,-2,-3]]],22,22,22],[[[27,[-1]]],[[27,[-1]]],22],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[[27,[-1]],[27,[-1]]],28,29],[[[27,[-1]],[27,[-1]]],30,31],[[[19,[-1,-2,-3]],13],14,15,15,15],[[[27,[-1]],13],14,15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[27,[-1]],-2],11,32,33],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[],[[34,[-1]]]]],-1,[[37,[],[[36,[-2]]]]],[]],[38,[[0,[-1]]],[]],[38,-1,[]],[38,-1,[]],[38,-1,[]],[[[39,[-1]]],-2,37,[]],[-1,[[0,[-2]]],[],[]],[[[19,[-2,-1,-4]]],-5,[],[[35,[-1]]],[],[[21,[-1],[[20,[-3]]]],22],[]],[-1,[[0,[-2]]],[],[]],[[[27,[-1]]],-2,22,[]],[-1,[[0,[-2]]],[],[]],[[-1,-4],[[19,[-1,-2,-4]]],[],[],[],[[21,[-2],[[20,[-3]]]],22]],[[[27,[-1]],[27,[-1]]],[[9,[28]]],40],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],0,0,0,[[[41,[-3,-1]]],[],2,[[7,[-1]]],[[37,[],[[36,[[5,[-1,-2]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[41,[-1,-2]]],[[41,[-1,-2]]],22,22],[[[42,[-1,-2,-3]]],[[42,[-1,-2,-3]]],22,22,22],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[[41,[-1,-2]],13],14,15,15],[[[42,[-1,-2,-3]],13],14,15,15,15],[-1,-1,[]],[-3,[[41,[-3,-1]]],2,[[7,[-1]]],[[37,[],[[36,[[5,[-1,-2]]]]]]]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[43,-1,[]],[[[41,[-3,-1]]],-1,2,[[7,[-1]]],[[37,[],[[36,[[5,[-1,-2]]]]]]]],[[[41,[-3,-1]]],[],[[37,[],[[36,[]]]],2],[[7,[-1]]],[[37,[],[[36,[[5,[-1,-2]]]]]]]],[[[42,[-3,-1,-5]]],-4,2,[[7,[-1]]],[[37,[],[[36,[[5,[-1,-2]]]]]]],[],[[23,[-1],[[20,[-4]]]]]],[[[41,[-3,-1]],-5],[[42,[-3,-1,-5]]],2,[[7,[-1]]],[[37,[],[[36,[[5,[-1,-2]]]]]]],[],[[23,[-1],[[20,[-4]]]]]],[-3,[[41,[-3,-1]]],2,[[7,[-1]]],[[37,[],[[36,[[5,[-1,-2]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],0,0,0,0,0,0,0],"c":[],"p":[[17,"Base"],[10,"RefCnt",0],[10,"AsRaw",0],[5,"Guard",0],[5,"ArcSwapAny",0],[10,"CaS",161],[10,"Strategy",161],[5,"Arc",164],[6,"Option",165],[8,"ArcSwapOption",0],[1,"tuple"],[10,"Default",166],[5,"Formatter",167],[8,"Result",167],[10,"Debug",167],[10,"Display",167],[10,"Into",168],[5,"Rc",169],[5,"Map",73],[17,"Output"],[10,"Fn",170],[10,"Clone",171],[10,"FnMut",170],[5,"String",172],[6,"Result",173],[5,"TypeId",174],[5,"Constant",73],[6,"Ordering",175],[10,"Ord",175],[1,"bool"],[10,"PartialEq",175],[10,"Hash",176],[10,"Hasher",176],[17,"Guard"],[10,"Access",73],[17,"Target"],[10,"Deref",177],[10,"DynAccess",73],[5,"AccessConvert",73],[10,"PartialOrd",175],[5,"Cache",124],[5,"MapCache",124],[10,"Access",124]],"b":[[13,"impl-AsRaw%3C%3CT+as+RefCnt%3E::Base%3E-for-Guard%3CT%3E"],[14,"impl-AsRaw%3C%3CT+as+RefCnt%3E::Base%3E-for-%26Guard%3CT%3E"],[31,"impl-Debug-for-Guard%3CT,+S%3E"],[32,"impl-Display-for-Guard%3CT,+S%3E"],[33,"impl-Debug-for-ArcSwapAny%3CT,+S%3E"],[34,"impl-Display-for-ArcSwapAny%3CT,+S%3E"],[40,"impl-ArcSwapAny%3COption%3CArc%3CT%3E%3E,+S%3E"],[41,"impl-ArcSwapAny%3CArc%3CT%3E,+S%3E"],[52,"impl-Access%3CT%3E-for-ArcSwapAny%3CRc%3CT%3E,+S%3E"],[53,"impl-Access%3CT%3E-for-ArcSwapAny%3CT,+S%3E"],[54,"impl-Access%3CT%3E-for-ArcSwapAny%3CArc%3CT%3E,+S%3E"],[55,"impl-ArcSwapAny%3CT,+S%3E"],[102,"impl-Access%3CT%3E-for-dyn+DynAccess%3CT%3E"],[103,"impl-Access%3CT%3E-for-dyn+DynAccess%3CT%3E+%2B+Send"],[104,"impl-Access%3CT%3E-for-dyn+DynAccess%3CT%3E+%2B+Send+%2B+Sync"],[144,"impl-Cache%3CA,+T%3E"],[145,"impl-Access%3C%3CT+as+Deref%3E::Target%3E-for-Cache%3CA,+T%3E"]]}],\
["archery",{"doc":"Archery","t":"EEEECFNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNFFKNNNNMNNMNNMNNNNNNMNNMNNNNMNNMNNMNNNNNNMNNNN","n":["ArcK","RcK","SharedPointer","SharedPointerKind","shared_pointer","SharedPointer","as_ref","borrow","borrow","borrow_mut","clone","clone_into","cmp","default","deref","drop","eq","fmt","fmt","fmt","from","from","from","from","ge","get_mut","gt","hash","into","kind","le","lt","make_mut","ne","new","partial_cmp","ptr_eq","strong_count","to_owned","to_string","try_from","try_into","try_unwrap","type_id","ArcK","RcK","SharedPointerKind","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone","deref","deref","deref","drop","drop","drop","fmt","fmt","from","from","from_box","from_box","from_box","get_mut","get_mut","get_mut","into","into","make_mut","make_mut","make_mut","new","new","new","strong_count","strong_count","strong_count","try_from","try_from","try_into","try_into","try_unwrap","try_unwrap","try_unwrap","type_id","type_id"],"q":[[0,"archery"],[5,"archery::shared_pointer"],[44,"archery::shared_pointer::kind"],[90,"core::cmp"],[91,"core::cmp"],[92,"core::cmp"],[93,"core::fmt"],[94,"core::fmt"],[95,"core::cmp"],[96,"core::hash"],[97,"core::hash"],[98,"alloc::string"],[99,"core::any"]],"d":["","","","","","Pointer to shared data with reference-counting.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Type constructors for <code>Arc</code> pointers.","Type constructors for <code>Rc</code> pointers.","Trait for type constructors of reference-counting pointers.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,25,26,25,26,2,25,26,2,25,26,2,25,26,25,26,25,26,2,25,26,2,25,26,25,26,2,25,26,2,25,26,2,25,26,25,26,25,26,2,25,26,25,26],"f":[0,0,0,0,0,0,[[[1,[-1,-2]]],-1,[],2],[[[1,[-1,-2]]],-1,[],2],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1,-2]]],[[1,[-1,-2]]],[],2],[[-1,-2],3,[],[]],[[[1,[-1,-2]],[1,[-1,-2]]],4,5,2],[[],[[1,[-1,-2]]],6,2],[[[1,[-1,-2]]],-1,[],2],[[[1,[-1,-2]]],3,[],2],[[[1,[-1,-2]],[1,[-1,-3]]],7,8,2,2],[[[1,[-1,-2]],9],[[11,[3,10]]],12,2],[[[1,[-1,-2]],9],[[11,[3,10]]],13,2],[[[1,[-1,-2]],9],14,[],2],[-1,-1,[]],[15,-1,[]],[[[16,[-1]]],[[1,[-1,-2]]],[],2],[-1,[[1,[-1,-2]]],[],2],[[[1,[-1,-2]],[1,[-1,-3]]],7,17,2,2],[[[1,[-1,-2]]],[[18,[-1]]],[],2],[[[1,[-1,-2]],[1,[-1,-3]]],7,17,2,2],[[[1,[-1,-2]],-3],3,19,2,20],[-1,-2,[],[]],0,[[[1,[-1,-2]],[1,[-1,-3]]],7,17,2,2],[[[1,[-1,-2]],[1,[-1,-3]]],7,17,2,2],[[[1,[-1,-2]]],-1,21,2],[[[1,[-1,-2]],[1,[-1,-3]]],7,8,2,2],[-1,[[1,[-1,-2]]],[],2],[[[1,[-1,-2]],[1,[-1,-3]]],[[18,[4]]],17,2,2],[[[1,[-1,-2]],[1,[-1,-3]]],7,[],2,2],[[[1,[-1,-2]]],22,[],2],[-1,-2,[],[]],[-1,23,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[[1,[-1,-2]]],[[11,[-1,[1,[-1,-2]]]]],[],2],[-1,24,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[25,25],[26,26],[2,-1,[]],[25,-1,[]],[26,-1,[]],[2,3],[25,3],[26,3],[[25,9],[[11,[3,10]]]],[[26,9],[[11,[3,10]]]],[-1,-1,[]],[-1,-1,[]],[[[16,[-1]]],2,[]],[[[16,[-1]]],25,[]],[[[16,[-1]]],26,[]],[2,[[18,[-1]]],[]],[25,[[18,[-1]]],[]],[26,[[18,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,-1,21],[25,-1,21],[26,-1,21],[-1,2,[]],[-1,25,[]],[-1,26,[]],[2,22],[25,22],[26,22],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[2,[[11,[-1,2]]],[]],[25,[[11,[-1,25]]],[]],[26,[[11,[-1,26]]],[]],[-1,24,[]],[-1,24,[]]],"c":[],"p":[[5,"SharedPointer",5],[10,"SharedPointerKind",44],[1,"tuple"],[6,"Ordering",90],[10,"Ord",90],[10,"Default",91],[1,"bool"],[10,"PartialEq",90],[5,"Formatter",92],[5,"Error",92],[6,"Result",93],[10,"Debug",92],[10,"Display",92],[8,"Result",92],[1,"never"],[5,"Box",94],[10,"PartialOrd",90],[6,"Option",95],[10,"Hash",96],[10,"Hasher",96],[10,"Clone",97],[1,"usize"],[5,"String",98],[5,"TypeId",99],[5,"ArcK",44],[5,"RcK",44]],"b":[[17,"impl-Debug-for-SharedPointer%3CT,+P%3E"],[18,"impl-Display-for-SharedPointer%3CT,+P%3E"],[19,"impl-Pointer-for-SharedPointer%3CT,+P%3E"],[22,"impl-From%3CBox%3CT%3E%3E-for-SharedPointer%3CT,+P%3E"],[23,"impl-From%3CT%3E-for-SharedPointer%3CT,+P%3E"]]}],\
["byteorder",{"doc":"This crate provides convenience methods for encoding and …","t":"IGKIGIIKKNNNNNNNNNNNNNNNNNNMNNMNNNNNNMNNMNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNMNNNNMNNNNMNNNNNNNMNNNNMNNNNNNNMNNNNMNNNNNNMNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNMNNMNNNNMNNNNNMNNNNMNNNNNMNNNNMNNNNMNNNNMNNNN","n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","ReadBytesExt","WriteBytesExt","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32","read_f32","read_f32_into","read_f32_into","read_f32_into","read_f32_into_unchecked","read_f32_into_unchecked","read_f32_into_unchecked","read_f64","read_f64","read_f64","read_f64_into","read_f64_into","read_f64_into","read_f64_into_unchecked","read_f64_into_unchecked","read_f64_into_unchecked","read_i128","read_i128","read_i128","read_i128_into","read_i128_into","read_i128_into","read_i16","read_i16","read_i16","read_i16_into","read_i16_into","read_i16_into","read_i24","read_i24","read_i24","read_i32","read_i32","read_i32","read_i32_into","read_i32_into","read_i32_into","read_i48","read_i48","read_i48","read_i64","read_i64","read_i64","read_i64_into","read_i64_into","read_i64_into","read_i8","read_i8","read_i8_into","read_i8_into","read_int","read_int","read_int","read_int128","read_int128","read_int128","read_u128","read_u128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u24","read_u24","read_u32","read_u32","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u48","read_u48","read_u64","read_u64","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_u64_into","read_u64_into","read_u8","read_u8","read_uint","read_uint","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","read_uint128","read_uint128","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32","write_f32","write_f32_into","write_f64","write_f64","write_f64","write_f64_into","write_i128","write_i128","write_i128","write_i128_into","write_i16","write_i16","write_i16","write_i16_into","write_i24","write_i24","write_i24","write_i32","write_i32","write_i32","write_i32_into","write_i48","write_i48","write_i48","write_i64","write_i64","write_i64","write_i64_into","write_i8","write_i8","write_i8_into","write_int","write_int","write_int","write_int128","write_int128","write_int128","write_u128","write_u128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u24","write_u24","write_u32","write_u32","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u48","write_u48","write_u64","write_u64","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_u8","write_u8","write_uint","write_uint","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128","write_uint128","write_uint128"],"q":[[0,"byteorder"],[268,"core::cmp"],[269,"core::fmt"],[270,"core::fmt"],[271,"core::option"],[272,"std::io::error"],[273,"core::result"],[274,"core::any"]],"d":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","Extends <code>Read</code> with methods for reading numbers. (For <code>std::io</code>…","Extends <code>Write</code> with methods for writing numbers. (For …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to a …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a sequence of IEEE754 single-precision (4 bytes) …","Reads a sequence of IEEE754 single-precision (4 bytes) …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a sequence of IEEE754 double-precision (8 bytes) …","Reads a sequence of IEEE754 double-precision (8 bytes) …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from the underlying reader.","Reads a signed 128 bit integer from the underlying reader.","Reads a signed 128 bit integer from <code>buf</code>.","Reads a sequence of signed 128 bit integers from the …","Reads a sequence of signed 128 bit integers from the …","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from <code>buf</code>.","Reads a sequence of signed 16 bit integers from the …","Reads a sequence of signed 16 bit integers from the …","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from <code>buf</code>.","Reads a sequence of signed 32 bit integers from the …","Reads a sequence of signed 32 bit integers from the …","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from <code>buf</code>.","Reads a sequence of signed 64 bit integers from the …","Reads a sequence of signed 64 bit integers from the …","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 8 bit integer from the underlying reader.","Reads a signed 8 bit integer from the underlying reader.","Reads a sequence of signed 8 bit integers from the …","Reads a sequence of signed 8 bit integers from the …","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","Reads an unsigned 128 bit integer from the underlying …","Reads an unsigned 128 bit integer from the underlying …","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 128 bit integers from the …","Reads a sequence of unsigned 128 bit integers from the …","","","Reads an unsigned 16 bit integer from <code>buf</code>.","Reads an unsigned 16 bit integer from the underlying …","Reads an unsigned 16 bit integer from the underlying …","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 16 bit integers from the …","Reads a sequence of unsigned 16 bit integers from the …","","","Reads an unsigned 24 bit integer from the underlying …","Reads an unsigned 24 bit integer from the underlying …","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","Reads an unsigned 32 bit integer from the underlying …","Reads an unsigned 32 bit integer from the underlying …","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 32 bit integers from the …","Reads a sequence of unsigned 32 bit integers from the …","","","Reads an unsigned 48 bit integer from the underlying …","Reads an unsigned 48 bit integer from the underlying …","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","Reads an unsigned 64 bit integer from the underlying …","Reads an unsigned 64 bit integer from the underlying …","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 64 bit integers from the …","Reads a sequence of unsigned 64 bit integers from the …","","","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from the underlying …","Reads an unsigned n-bytes integer from the underlying …","","","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from the underlying …","Reads an unsigned n-bytes integer from the underlying …","","","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer to the underlying writer.","Writes a signed 128 bit integer to the underlying writer.","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer to the underlying writer.","Writes a signed 24 bit integer to the underlying writer.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer to the underlying writer.","Writes a signed 48 bit integer to the underlying writer.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 8 bit integer to the underlying writer.","Writes a signed 8 bit integer to the underlying writer.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 128 bit integer to the underlying …","Writes an unsigned 128 bit integer to the underlying …","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 16 bit integer to the underlying writer.","Writes an unsigned 16 bit integer to the underlying writer.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer to the underlying writer.","Writes an unsigned 24 bit integer to the underlying writer.","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 32 bit integer to the underlying writer.","Writes an unsigned 32 bit integer to the underlying writer.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer to the underlying writer.","Writes an unsigned 48 bit integer to the underlying writer.","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 64 bit integer to the underlying writer.","Writes an unsigned 64 bit integer to the underlying writer.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned n-bytes integer to the underlying …","Writes an unsigned n-bytes integer to the underlying …","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned n-bytes integer to the underlying …","Writes an unsigned n-bytes integer to the underlying …","",""],"i":[0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,29,1,2,29,1,2,29,29,29,29,29,1,2,29,1,2,29,1,2,29,1,2,1,2,1,2,1,2,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,21,21,21,21,29,21,21,29,29,21,21,1,2,29,21,21,1,2,29,21,21,1,2,29,21,21,1,2,21,21,29,29,21,21,1,2,29,21,21,1,2,21,21,29,29,21,21,1,2,29,21,21,1,2,21,21,29,21,21,1,2,29,21,21,1,2,1,2,1,2,1,2,1,2,28,28,29,29,28,28,29,29,28,28,29,29,28,28,29,29,28,28,29,28,28,29,29,28,28,29,28,28,29,29,28,28,29,28,28,29,28,28,29,29,28,28,1,2,29,1,2,29,28,28,1,2,29,1,2,28,28,29,29,28,28,1,2,29,1,2,28,28,29,29,28,28,1,2,29,1,2,28,28,29,28,28,1,2,29,28,28,1,2],"f":[0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[1,1],4],[[2,2],4],[[],1],[[],2],[[1,1],5],[[2,2],5],[[1,6],7],[[2,6],7],[-1,-1,[]],[-1,-1,[]],[[[9,[8]]],3],[[[9,[8]]],3],[[[9,[8]]],3],[[[9,[10]]],3],[[[9,[10]]],3],[[[9,[10]]],3],[[[9,[11]]],3],[[[9,[12]]],3],[[[9,[13]]],3],[[[9,[14]]],3],[[[9,[15]]],3],[[[9,[15]]],3],[[[9,[15]]],3],[[[9,[16]]],3],[[[9,[16]]],3],[[[9,[16]]],3],[[[9,[17]]],3],[[[9,[17]]],3],[[[9,[17]]],3],[[[9,[18]]],3],[[[9,[18]]],3],[[[9,[18]]],3],[[1,-1],3,19],[[2,-1],3,19],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],[[20,[4]]]],[[2,2],[[20,[4]]]],[21,[[22,[8]]]],[21,[[22,[8]]]],[[[9,[23]]],8],[[21,[9,[8]]],[[22,[3]]]],[[21,[9,[8]]],[[22,[3]]]],[[[9,[23]],[9,[8]]],3],[[21,[9,[8]]],[[22,[3]]]],[[21,[9,[8]]],[[22,[3]]]],[[[9,[23]],[9,[8]]],3],[21,[[22,[10]]]],[21,[[22,[10]]]],[[[9,[23]]],10],[[21,[9,[10]]],[[22,[3]]]],[[21,[9,[10]]],[[22,[3]]]],[[[9,[23]],[9,[10]]],3],[[21,[9,[10]]],[[22,[3]]]],[[21,[9,[10]]],[[22,[3]]]],[[[9,[23]],[9,[10]]],3],[21,[[22,[11]]]],[21,[[22,[11]]]],[[[9,[23]]],11],[[21,[9,[11]]],[[22,[3]]]],[[21,[9,[11]]],[[22,[3]]]],[[[9,[23]],[9,[11]]],3],[21,[[22,[12]]]],[21,[[22,[12]]]],[[[9,[23]]],12],[[21,[9,[12]]],[[22,[3]]]],[[21,[9,[12]]],[[22,[3]]]],[[[9,[23]],[9,[12]]],3],[21,[[22,[13]]]],[21,[[22,[13]]]],[[[9,[23]]],13],[21,[[22,[13]]]],[21,[[22,[13]]]],[[[9,[23]]],13],[[21,[9,[13]]],[[22,[3]]]],[[21,[9,[13]]],[[22,[3]]]],[[[9,[23]],[9,[13]]],3],[21,[[22,[14]]]],[21,[[22,[14]]]],[[[9,[23]]],14],[21,[[22,[14]]]],[21,[[22,[14]]]],[[[9,[23]]],14],[[21,[9,[14]]],[[22,[3]]]],[[21,[9,[14]]],[[22,[3]]]],[[[9,[23]],[9,[14]]],3],[21,[[22,[24]]]],[21,[[22,[24]]]],[[21,[9,[24]]],[[22,[3]]]],[[21,[9,[24]]],[[22,[3]]]],[[21,25],[[22,[14]]]],[[21,25],[[22,[14]]]],[[[9,[23]],25],14],[[21,25],[[22,[11]]]],[[21,25],[[22,[11]]]],[[[9,[23]],25],11],[[[9,[23]]],15],[21,[[22,[15]]]],[21,[[22,[15]]]],[[[9,[23]]],15],[[[9,[23]]],15],[[[9,[23]],[9,[15]]],3],[[21,[9,[15]]],[[22,[3]]]],[[21,[9,[15]]],[[22,[3]]]],[[[9,[23]],[9,[15]]],3],[[[9,[23]],[9,[15]]],3],[[[9,[23]]],16],[21,[[22,[16]]]],[21,[[22,[16]]]],[[[9,[23]]],16],[[[9,[23]]],16],[[[9,[23]],[9,[16]]],3],[[21,[9,[16]]],[[22,[3]]]],[[21,[9,[16]]],[[22,[3]]]],[[[9,[23]],[9,[16]]],3],[[[9,[23]],[9,[16]]],3],[21,[[22,[17]]]],[21,[[22,[17]]]],[[[9,[23]]],17],[[[9,[23]]],17],[21,[[22,[17]]]],[21,[[22,[17]]]],[[[9,[23]]],17],[[[9,[23]]],17],[[[9,[23]],[9,[17]]],3],[[21,[9,[17]]],[[22,[3]]]],[[21,[9,[17]]],[[22,[3]]]],[[[9,[23]],[9,[17]]],3],[[[9,[23]],[9,[17]]],3],[21,[[22,[18]]]],[21,[[22,[18]]]],[[[9,[23]]],18],[[[9,[23]]],18],[21,[[22,[18]]]],[21,[[22,[18]]]],[[[9,[23]]],18],[[[9,[23]]],18],[[[9,[23]],[9,[18]]],3],[[21,[9,[18]]],[[22,[3]]]],[[21,[9,[18]]],[[22,[3]]]],[[[9,[23]],[9,[18]]],3],[[[9,[23]],[9,[18]]],3],[21,[[22,[23]]]],[21,[[22,[23]]]],[[[9,[23]],25],18],[[21,25],[[22,[18]]]],[[21,25],[[22,[18]]]],[[[9,[23]],25],18],[[[9,[23]],25],18],[[[9,[23]],25],15],[[21,25],[[22,[15]]]],[[21,25],[[22,[15]]]],[[[9,[23]],25],15],[[[9,[23]],25],15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[[28,8],[[22,[3]]]],[[28,8],[[22,[3]]]],[[[9,[23]],8],3],[[[9,[8]],[9,[23]]],3],[[28,10],[[22,[3]]]],[[28,10],[[22,[3]]]],[[[9,[23]],10],3],[[[9,[10]],[9,[23]]],3],[[28,11],[[22,[3]]]],[[28,11],[[22,[3]]]],[[[9,[23]],11],3],[[[9,[11]],[9,[23]]],3],[[28,12],[[22,[3]]]],[[28,12],[[22,[3]]]],[[[9,[23]],12],3],[[[9,[12]],[9,[23]]],3],[[28,13],[[22,[3]]]],[[28,13],[[22,[3]]]],[[[9,[23]],13],3],[[28,13],[[22,[3]]]],[[28,13],[[22,[3]]]],[[[9,[23]],13],3],[[[9,[13]],[9,[23]]],3],[[28,14],[[22,[3]]]],[[28,14],[[22,[3]]]],[[[9,[23]],14],3],[[28,14],[[22,[3]]]],[[28,14],[[22,[3]]]],[[[9,[23]],14],3],[[[9,[14]],[9,[23]]],3],[[28,24],[[22,[3]]]],[[28,24],[[22,[3]]]],[[[9,[24]],[9,[23]]],3],[[28,14,25],[[22,[3]]]],[[28,14,25],[[22,[3]]]],[[[9,[23]],14,25],3],[[28,11,25],[[22,[3]]]],[[28,11,25],[[22,[3]]]],[[[9,[23]],11,25],3],[[[9,[23]],15],3],[[28,15],[[22,[3]]]],[[28,15],[[22,[3]]]],[[[9,[23]],15],3],[[[9,[23]],15],3],[[[9,[15]],[9,[23]]],3],[[[9,[15]],[9,[23]]],3],[[[9,[15]],[9,[23]]],3],[[[9,[23]],16],3],[[28,16],[[22,[3]]]],[[28,16],[[22,[3]]]],[[[9,[23]],16],3],[[[9,[23]],16],3],[[[9,[16]],[9,[23]]],3],[[[9,[16]],[9,[23]]],3],[[[9,[16]],[9,[23]]],3],[[28,17],[[22,[3]]]],[[28,17],[[22,[3]]]],[[[9,[23]],17],3],[[[9,[23]],17],3],[[28,17],[[22,[3]]]],[[28,17],[[22,[3]]]],[[[9,[23]],17],3],[[[9,[23]],17],3],[[[9,[17]],[9,[23]]],3],[[[9,[17]],[9,[23]]],3],[[[9,[17]],[9,[23]]],3],[[28,18],[[22,[3]]]],[[28,18],[[22,[3]]]],[[[9,[23]],18],3],[[[9,[23]],18],3],[[28,18],[[22,[3]]]],[[28,18],[[22,[3]]]],[[[9,[23]],18],3],[[[9,[23]],18],3],[[[9,[18]],[9,[23]]],3],[[[9,[18]],[9,[23]]],3],[[[9,[18]],[9,[23]]],3],[[28,23],[[22,[3]]]],[[28,23],[[22,[3]]]],[[[9,[23]],18,25],3],[[28,18,25],[[22,[3]]]],[[28,18,25],[[22,[3]]]],[[[9,[23]],18,25],3],[[[9,[23]],18,25],3],[[[9,[23]],15,25],3],[[28,15,25],[[22,[3]]]],[[28,15,25],[[22,[3]]]],[[[9,[23]],15,25],3],[[[9,[23]],15,25],3]],"c":[61,62,63,70,71,72],"p":[[6,"BigEndian",0],[6,"LittleEndian",0],[1,"tuple"],[6,"Ordering",268],[1,"bool"],[5,"Formatter",269],[8,"Result",269],[1,"f32"],[1,"slice"],[1,"f64"],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"u128"],[1,"u16"],[1,"u32"],[1,"u64"],[10,"Hasher",270],[6,"Option",271],[10,"ReadBytesExt",0],[8,"Result",272],[1,"u8"],[1,"i8"],[1,"usize"],[6,"Result",273],[5,"TypeId",274],[10,"WriteBytesExt",0],[10,"ByteOrder",0]],"b":[]}],\
["bytes",{"doc":"Provides abstractions for working with bytes.","t":"EEFFNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKKFFFFFFFMNNMNNNNNNNNNNNNNNNNNNNNNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Buf","BufMut","Bytes","BytesMut","advance","advance","advance_mut","as_mut","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buf","capacity","chunk","chunk","chunk_mut","clear","clear","clone","clone","clone_into","clone_into","cmp","cmp","copy_from_slice","copy_to_bytes","copy_to_bytes","default","default","deref","deref","deref_mut","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend_from_slice","fmt","fmt","fmt","fmt","fmt","fmt","freeze","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_static","hash","hash","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","len","len","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","put","put_bytes","put_slice","remaining","remaining","remaining_mut","reserve","resize","set_len","slice","slice_ref","spare_capacity_mut","split","split_off","split_off","split_to","split_to","to_owned","to_owned","truncate","truncate","try_from","try_from","try_into","try_into","type_id","type_id","unsplit","with_capacity","write_fmt","write_str","zeroed","Buf","BufMut","Chain","IntoIter","Limit","Reader","Take","UninitSlice","Writer","advance","advance","advance","advance_mut","advance_mut","advance_mut","as_mut_ptr","as_uninit_slice_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","chain","chain_mut","chain_mut","chunk","chunk","chunk","chunk_mut","chunk_mut","chunk_mut","chunks_vectored","chunks_vectored","chunks_vectored","consume","copy_from_slice","copy_to_bytes","copy_to_bytes","copy_to_bytes","copy_to_bytes","copy_to_slice","copy_to_slice","fill_buf","first_mut","first_ref","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_raw_parts_mut","get_f32","get_f32","get_f32_le","get_f32_le","get_f32_ne","get_f32_ne","get_f64","get_f64","get_f64_le","get_f64_le","get_f64_ne","get_f64_ne","get_i128","get_i128","get_i128_le","get_i128_le","get_i128_ne","get_i128_ne","get_i16","get_i16","get_i16_le","get_i16_le","get_i16_ne","get_i16_ne","get_i32","get_i32","get_i32_le","get_i32_le","get_i32_ne","get_i32_ne","get_i64","get_i64","get_i64_le","get_i64_le","get_i64_ne","get_i64_ne","get_i8","get_i8","get_int","get_int","get_int_le","get_int_le","get_int_ne","get_int_ne","get_mut","get_mut","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","get_ref","get_ref","get_u128","get_u128","get_u128_le","get_u128_le","get_u128_ne","get_u128_ne","get_u16","get_u16","get_u16_le","get_u16_le","get_u16_ne","get_u16_ne","get_u32","get_u32","get_u32_le","get_u32_le","get_u32_ne","get_u32_ne","get_u64","get_u64","get_u64_le","get_u64_le","get_u64_ne","get_u64_ne","get_u8","get_u8","get_uint","get_uint","get_uint_le","get_uint_le","get_uint_ne","get_uint_ne","has_remaining","has_remaining","has_remaining_mut","has_remaining_mut","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_iter","into_iter","last_mut","last_ref","len","limit","limit","limit","limit","new","new","next","put","put","put_bytes","put_bytes","put_f32","put_f32","put_f32_le","put_f32_le","put_f32_ne","put_f32_ne","put_f64","put_f64","put_f64_le","put_f64_le","put_f64_ne","put_f64_ne","put_i128","put_i128","put_i128_le","put_i128_le","put_i128_ne","put_i128_ne","put_i16","put_i16","put_i16_le","put_i16_le","put_i16_ne","put_i16_ne","put_i32","put_i32","put_i32_le","put_i32_le","put_i32_ne","put_i32_ne","put_i64","put_i64","put_i64_le","put_i64_le","put_i64_ne","put_i64_ne","put_i8","put_i8","put_int","put_int","put_int_le","put_int_le","put_int_ne","put_int_ne","put_slice","put_slice","put_u128","put_u128","put_u128_le","put_u128_le","put_u128_ne","put_u128_ne","put_u16","put_u16","put_u16_le","put_u16_le","put_u16_ne","put_u16_ne","put_u32","put_u32","put_u32_le","put_u32_le","put_u32_ne","put_u32_ne","put_u64","put_u64","put_u64_le","put_u64_le","put_u64_ne","put_u64_ne","put_u8","put_u8","put_uint","put_uint","put_uint_le","put_uint_le","put_uint_ne","put_uint_ne","read","reader","reader","remaining","remaining","remaining","remaining_mut","remaining_mut","remaining_mut","set_limit","set_limit","size_hint","take","take","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uninit","write","write_byte","writer","writer"],"q":[[0,"bytes"],[137,"bytes::buf"],[455,"core::cmp"],[456,"alloc::vec"],[457,"alloc::string"],[458,"core::marker"],[459,"core::iter::traits::collect"],[460,"core::fmt"],[461,"core::fmt"],[462,"core::hash"],[463,"core::option"],[464,"core::ops::range"],[465,"core::mem::maybe_uninit"],[466,"core::result"],[467,"core::any"],[468,"core::fmt"],[469,"std::io::error"],[470,"core::fmt"]],"d":["","","A cheaply cloneable and sliceable chunk of contiguous …","A unique reference to a contiguous slice of memory.","","","","","","","","","","","","","","Utilities for working with buffers.","Returns the number of bytes the <code>BytesMut</code> can hold without …","","","","Clears the buffer, removing all data.","Clears the buffer, removing all data. Existing capacity is …","","","","","","","Creates <code>Bytes</code> instance from slice, by copying it.","","","","","","","","","","","","","","","","","","","","","","","","","","","Appends given bytes to this <code>BytesMut</code>.","","","","","","","Converts <code>self</code> into an immutable <code>Bytes</code>.","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Creates a new <code>Bytes</code> from a static slice.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns true if the <code>Bytes</code> has a length of 0.","Returns true if the <code>BytesMut</code> has a length of 0.","Returns the number of bytes contained in this <code>Bytes</code>.","Returns the number of bytes contained in this <code>BytesMut</code>.","Creates a new empty <code>Bytes</code>.","Creates a new <code>BytesMut</code> with default capacity.","","","","","","","","","","","","","","","","","","","Reserves capacity for at least <code>additional</code> more bytes to be …","Resizes the buffer so that <code>len</code> is equal to <code>new_len</code>.","Sets the length of the buffer.","Returns a slice of self for the provided range.","Returns a slice of self that is equivalent to the given …","Returns the remaining spare capacity of the buffer as a …","Removes the bytes from the current view, returning them in …","Splits the bytes into two at the given index.","Splits the bytes into two at the given index.","Splits the bytes into two at the given index.","Splits the buffer into two at the given index.","","","Shortens the buffer, keeping the first <code>len</code> bytes and …","Shortens the buffer, keeping the first <code>len</code> bytes and …","","","","","","","Absorbs a <code>BytesMut</code> that was previously split off.","Creates a new <code>BytesMut</code> with the specified capacity.","","","Creates a new <code>BytesMut</code>, which is initialized with zero.","Read bytes from a buffer.","A trait for values that provide sequential write access to …","A <code>Chain</code> sequences two buffers.","Iterator over the bytes contained by the buffer.","A <code>BufMut</code> adapter which limits the amount of bytes that can …","A <code>Buf</code> adapter which implements <code>io::Read</code> for the inner …","A <code>Buf</code> adapter which limits the bytes read from an …","Uninitialized byte slice.","A <code>BufMut</code> adapter which implements <code>io::Write</code> for the inner …","Advance the internal cursor of the Buf","","","Advance the internal cursor of the BufMut","","","Return a raw pointer to the slice’s buffer.","Return a <code>&amp;mut [MaybeUninit&lt;u8&gt;]</code> to this slice’s buffer.","","","","","","","","","","","","","","","Creates an adaptor which will chain this buffer with …","Creates an adaptor which will chain this buffer with …","Creates an adapter which will chain this buffer with …","Creates an adapter which will chain this buffer with …","Returns a slice starting at the current position and of …","","","Returns a mutable slice starting at the current BufMut …","","","Fills <code>dst</code> with potentially multiple slices starting at <code>self</code>…","Fills <code>dst</code> with potentially multiple slices starting at <code>self</code>…","","","Copies bytes  from <code>src</code> into <code>self</code>.","Consumes <code>len</code> bytes inside self and returns new instance of …","Consumes <code>len</code> bytes inside self and returns new instance of …","","","Copies bytes from <code>self</code> into <code>dst</code>.","Copies bytes from <code>self</code> into <code>dst</code>.","","Gets a mutable reference to the first underlying <code>Buf</code>.","Gets a reference to the first underlying <code>Buf</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a <code>&amp;mut UninitSlice</code> from a pointer and a length.","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets a signed 128 bit integer from <code>self</code> in big-endian byte …","Gets a signed 128 bit integer from <code>self</code> in big-endian byte …","Gets a signed 128 bit integer from <code>self</code> in little-endian …","Gets a signed 128 bit integer from <code>self</code> in little-endian …","Gets a signed 128 bit integer from <code>self</code> in native-endian …","Gets a signed 128 bit integer from <code>self</code> in native-endian …","Gets a signed 16 bit integer from <code>self</code> in big-endian byte …","Gets a signed 16 bit integer from <code>self</code> in big-endian byte …","Gets a signed 16 bit integer from <code>self</code> in little-endian …","Gets a signed 16 bit integer from <code>self</code> in little-endian …","Gets a signed 16 bit integer from <code>self</code> in native-endian …","Gets a signed 16 bit integer from <code>self</code> in native-endian …","Gets a signed 32 bit integer from <code>self</code> in big-endian byte …","Gets a signed 32 bit integer from <code>self</code> in big-endian byte …","Gets a signed 32 bit integer from <code>self</code> in little-endian …","Gets a signed 32 bit integer from <code>self</code> in little-endian …","Gets a signed 32 bit integer from <code>self</code> in native-endian …","Gets a signed 32 bit integer from <code>self</code> in native-endian …","Gets a signed 64 bit integer from <code>self</code> in big-endian byte …","Gets a signed 64 bit integer from <code>self</code> in big-endian byte …","Gets a signed 64 bit integer from <code>self</code> in little-endian …","Gets a signed 64 bit integer from <code>self</code> in little-endian …","Gets a signed 64 bit integer from <code>self</code> in native-endian …","Gets a signed 64 bit integer from <code>self</code> in native-endian …","Gets a signed 8 bit integer from <code>self</code>.","Gets a signed 8 bit integer from <code>self</code>.","Gets a signed n-byte integer from <code>self</code> in big-endian byte …","Gets a signed n-byte integer from <code>self</code> in big-endian byte …","Gets a signed n-byte integer from <code>self</code> in little-endian …","Gets a signed n-byte integer from <code>self</code> in little-endian …","Gets a signed n-byte integer from <code>self</code> in native-endian …","Gets a signed n-byte integer from <code>self</code> in native-endian …","Gets a mutable reference to the underlying <code>Buf</code>.","Gets a mutable reference to the underlying <code>BufMut</code>.","Gets a mutable reference to the underlying <code>Buf</code>.","Gets a mutable reference to the underlying <code>Buf</code>.","Gets a mutable reference to the underlying <code>BufMut</code>.","Gets a reference to the underlying <code>Buf</code>.","Gets a reference to the underlying <code>BufMut</code>.","Gets a reference to the underlying <code>Buf</code>.","Gets a reference to the underlying <code>Buf</code>.","Gets a reference to the underlying <code>BufMut</code>.","Gets an unsigned 128 bit integer from <code>self</code> in big-endian …","Gets an unsigned 128 bit integer from <code>self</code> in big-endian …","Gets an unsigned 128 bit integer from <code>self</code> in …","Gets an unsigned 128 bit integer from <code>self</code> in …","Gets an unsigned 128 bit integer from <code>self</code> in …","Gets an unsigned 128 bit integer from <code>self</code> in …","Gets an unsigned 16 bit integer from <code>self</code> in big-endian …","Gets an unsigned 16 bit integer from <code>self</code> in big-endian …","Gets an unsigned 16 bit integer from <code>self</code> in little-endian …","Gets an unsigned 16 bit integer from <code>self</code> in little-endian …","Gets an unsigned 16 bit integer from <code>self</code> in native-endian …","Gets an unsigned 16 bit integer from <code>self</code> in native-endian …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in native-endian …","Gets an unsigned 32 bit integer from <code>self</code> in native-endian …","Gets an unsigned 64 bit integer from <code>self</code> in big-endian …","Gets an unsigned 64 bit integer from <code>self</code> in big-endian …","Gets an unsigned 64 bit integer from <code>self</code> in little-endian …","Gets an unsigned 64 bit integer from <code>self</code> in little-endian …","Gets an unsigned 64 bit integer from <code>self</code> in native-endian …","Gets an unsigned 64 bit integer from <code>self</code> in native-endian …","Gets an unsigned 8 bit integer from <code>self</code>.","Gets an unsigned 8 bit integer from <code>self</code>.","Gets an unsigned n-byte integer from <code>self</code> in big-endian …","Gets an unsigned n-byte integer from <code>self</code> in big-endian …","Gets an unsigned n-byte integer from <code>self</code> in little-endian …","Gets an unsigned n-byte integer from <code>self</code> in little-endian …","Gets an unsigned n-byte integer from <code>self</code> in native-endian …","Gets an unsigned n-byte integer from <code>self</code> in native-endian …","Returns true if there are any more bytes to consume","Returns true if there are any more bytes to consume","Returns true if there is space in <code>self</code> for more bytes.","Returns true if there is space in <code>self</code> for more bytes.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>Chain</code>, returning the underlying values.","Consumes this <code>IntoIter</code>, returning the underlying value.","Consumes this <code>Limit</code>, returning the underlying value.","Consumes this <code>Reader</code>, returning the underlying value.","Consumes this <code>Take</code>, returning the underlying value.","Consumes this <code>Writer</code>, returning the underlying value.","","","Gets a mutable reference to the last underlying <code>Buf</code>.","Gets a reference to the last underlying <code>Buf</code>.","Returns the number of bytes in the slice.","Creates an adaptor which can write at most <code>limit</code> bytes to …","Creates an adaptor which can write at most <code>limit</code> bytes to …","Returns the maximum number of bytes that can be written","Returns the maximum number of bytes that can be read.","Creates a <code>&amp;mut UninitSlice</code> wrapping a slice of initialised …","Creates an iterator over the bytes contained by the buffer.","","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Put <code>cnt</code> bytes <code>val</code> into <code>self</code>.","Put <code>cnt</code> bytes <code>val</code> into <code>self</code>.","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes an IEEE754 single-precision (4 bytes) floating …","Writes an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes a signed 128 bit integer to <code>self</code> in the big-endian …","Writes a signed 128 bit integer to <code>self</code> in the big-endian …","Writes a signed 128 bit integer to <code>self</code> in little-endian …","Writes a signed 128 bit integer to <code>self</code> in little-endian …","Writes a signed 128 bit integer to <code>self</code> in native-endian …","Writes a signed 128 bit integer to <code>self</code> in native-endian …","Writes a signed 16 bit integer to <code>self</code> in big-endian byte …","Writes a signed 16 bit integer to <code>self</code> in big-endian byte …","Writes a signed 16 bit integer to <code>self</code> in little-endian …","Writes a signed 16 bit integer to <code>self</code> in little-endian …","Writes a signed 16 bit integer to <code>self</code> in native-endian …","Writes a signed 16 bit integer to <code>self</code> in native-endian …","Writes a signed 32 bit integer to <code>self</code> in big-endian byte …","Writes a signed 32 bit integer to <code>self</code> in big-endian byte …","Writes a signed 32 bit integer to <code>self</code> in little-endian …","Writes a signed 32 bit integer to <code>self</code> in little-endian …","Writes a signed 32 bit integer to <code>self</code> in native-endian …","Writes a signed 32 bit integer to <code>self</code> in native-endian …","Writes a signed 64 bit integer to <code>self</code> in the big-endian …","Writes a signed 64 bit integer to <code>self</code> in the big-endian …","Writes a signed 64 bit integer to <code>self</code> in little-endian …","Writes a signed 64 bit integer to <code>self</code> in little-endian …","Writes a signed 64 bit integer to <code>self</code> in native-endian …","Writes a signed 64 bit integer to <code>self</code> in native-endian …","Writes a signed 8 bit integer to <code>self</code>.","Writes a signed 8 bit integer to <code>self</code>.","Writes low <code>nbytes</code> of a signed integer to <code>self</code> in …","Writes low <code>nbytes</code> of a signed integer to <code>self</code> in …","Writes low <code>nbytes</code> of a signed integer to <code>self</code> in …","Writes low <code>nbytes</code> of a signed integer to <code>self</code> in …","Writes low <code>nbytes</code> of a signed integer to <code>self</code> in …","Writes low <code>nbytes</code> of a signed integer to <code>self</code> in …","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Writes an unsigned 128 bit integer to <code>self</code> in the …","Writes an unsigned 128 bit integer to <code>self</code> in the …","Writes an unsigned 128 bit integer to <code>self</code> in …","Writes an unsigned 128 bit integer to <code>self</code> in …","Writes an unsigned 128 bit integer to <code>self</code> in …","Writes an unsigned 128 bit integer to <code>self</code> in …","Writes an unsigned 16 bit integer to <code>self</code> in big-endian …","Writes an unsigned 16 bit integer to <code>self</code> in big-endian …","Writes an unsigned 16 bit integer to <code>self</code> in little-endian …","Writes an unsigned 16 bit integer to <code>self</code> in little-endian …","Writes an unsigned 16 bit integer to <code>self</code> in native-endian …","Writes an unsigned 16 bit integer to <code>self</code> in native-endian …","Writes an unsigned 32 bit integer to <code>self</code> in big-endian …","Writes an unsigned 32 bit integer to <code>self</code> in big-endian …","Writes an unsigned 32 bit integer to <code>self</code> in little-endian …","Writes an unsigned 32 bit integer to <code>self</code> in little-endian …","Writes an unsigned 32 bit integer to <code>self</code> in native-endian …","Writes an unsigned 32 bit integer to <code>self</code> in native-endian …","Writes an unsigned 64 bit integer to <code>self</code> in the …","Writes an unsigned 64 bit integer to <code>self</code> in the …","Writes an unsigned 64 bit integer to <code>self</code> in little-endian …","Writes an unsigned 64 bit integer to <code>self</code> in little-endian …","Writes an unsigned 64 bit integer to <code>self</code> in native-endian …","Writes an unsigned 64 bit integer to <code>self</code> in native-endian …","Writes an unsigned 8 bit integer to <code>self</code>.","Writes an unsigned 8 bit integer to <code>self</code>.","Writes an unsigned n-byte integer to <code>self</code> in big-endian …","Writes an unsigned n-byte integer to <code>self</code> in big-endian …","Writes an unsigned n-byte integer to <code>self</code> in the …","Writes an unsigned n-byte integer to <code>self</code> in the …","Writes an unsigned n-byte integer to <code>self</code> in the …","Writes an unsigned n-byte integer to <code>self</code> in the …","","Creates an adaptor which implements the <code>Read</code> trait for <code>self</code>…","Creates an adaptor which implements the <code>Read</code> trait for <code>self</code>…","Returns the number of bytes between the current position …","","","Returns the number of bytes that can be written from the …","","","Sets the maximum number of bytes that can be written.","Sets the maximum number of bytes that can be read.","","Creates an adaptor which will read at most <code>limit</code> bytes …","Creates an adaptor which will read at most <code>limit</code> bytes …","","","","","","","","","","","","","","","","","","","","Creates a <code>&amp;mut UninitSlice</code> wrapping a slice of …","","Write a single byte at the specified offset.","Creates an adaptor which implements the <code>Write</code> trait for …","Creates an adaptor which implements the <code>Write</code> trait for …"],"i":[0,0,0,0,1,4,4,4,1,4,1,1,4,4,1,4,4,0,4,1,4,4,1,4,1,4,1,4,1,4,1,1,4,1,4,1,4,4,1,4,1,1,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,1,1,1,4,4,4,4,1,1,1,1,1,1,1,4,4,4,1,4,4,1,1,4,1,4,1,1,4,4,1,4,1,4,1,4,1,1,1,1,1,1,4,4,4,4,4,4,4,4,4,1,4,4,4,4,4,1,1,4,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,21,27,28,29,27,30,7,7,7,27,36,30,32,28,34,7,27,36,30,32,28,34,21,21,29,29,21,27,28,29,27,30,21,21,27,32,7,21,21,27,28,21,21,32,27,27,34,7,27,36,30,32,28,34,7,7,27,36,30,32,28,34,7,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,36,30,32,28,34,36,30,32,28,34,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,29,29,7,7,7,7,7,7,7,7,7,7,7,7,27,36,30,32,28,34,27,36,30,32,28,34,27,36,27,27,7,29,29,30,28,7,36,36,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,32,21,21,21,27,28,29,27,30,30,28,36,21,21,27,36,30,32,28,34,27,36,30,32,28,34,7,27,36,30,32,28,34,7,34,7,29,29],"f":[0,0,0,0,[[1,2],3],[[4,2],3],[[4,2],3],[4,[[6,[5]]]],[1,[[6,[5]]]],[4,[[6,[5]]]],[-1,-2,[],[]],[1,[[6,[5]]]],[-1,-2,[],[]],[4,[[6,[5]]]],[-1,-2,[],[]],[4,[[6,[5]]]],[-1,-2,[],[]],0,[4,2],[1,[[6,[5]]]],[4,[[6,[5]]]],[4,7],[1,3],[4,3],[1,1],[4,4],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[1,1],8],[[4,4],8],[[[6,[5]]],1],[[1,2],1],[[4,2],1],[[],1],[[],4],[1,[[6,[5]]]],[4,[[6,[5]]]],[4,[[6,[5]]]],[1,3],[4,3],[[1,[9,[5]]],10],[[1,11],10],[[1,12],10],[[1,[6,[5]]],10],[[1,4],10],[[1,1],10],[[1,-1],10,13],[[4,4],10],[[4,-1],10,13],[[4,11],10],[[4,12],10],[[4,1],10],[[4,[9,[5]]],10],[[4,[6,[5]]],10],[[4,-1],3,[[15,[],[[14,[1]]]]]],[[4,-1],3,[[15,[],[[14,[5]]]]]],[[4,-1],3,[[15,[],[[14,[5]]]]]],[[4,[6,[5]]],3],[[1,16],17],[[1,16],17],[[1,16],17],[[4,16],17],[[4,16],17],[[4,16],17],[4,1],[12,1],[4,1],[[[6,[5]]],1],[[[9,[5]]],1],[11,1],[-1,-1,[]],[[[18,[[6,[5]]]]],1],[12,4],[-1,-1,[]],[[[6,[5]]],4],[-1,1,[[15,[],[[14,[5]]]]]],[-1,4,[[15,[],[[14,[5]]]]]],[-1,4,[[15,[],[[14,[5]]]]]],[[[6,[5]]],1],[[1,-1],3,19],[[4,-1],3,19],[-1,-2,[],[]],[-1,-2,[],[]],[1,-1,[]],[1,-1,[]],[4,-1,[]],[4,-1,[]],[1,10],[4,10],[1,2],[4,2],[[],1],[[],4],[[1,[9,[5]]],[[20,[8]]]],[[1,[6,[5]]],[[20,[8]]]],[[1,11],[[20,[8]]]],[[1,12],[[20,[8]]]],[[1,1],[[20,[8]]]],[[1,-1],[[20,[8]]],13],[[4,11],[[20,[8]]]],[[4,-1],[[20,[8]]],13],[[4,12],[[20,[8]]]],[[4,[9,[5]]],[[20,[8]]]],[[4,4],[[20,[8]]]],[[4,[6,[5]]],[[20,[8]]]],[[4,-1],3,21],[[4,5,2],3],[[4,[6,[5]]],3],[1,2],[4,2],[4,2],[[4,2],3],[[4,2,5],3],[[4,2],3],[[1,-1],1,[[22,[2]]]],[[1,[6,[5]]],1],[4,[[6,[[23,[5]]]]]],[4,4],[[1,2],1],[[4,2],4],[[1,2],1],[[4,2],4],[-1,-2,[],[]],[-1,-2,[],[]],[[1,2],3],[[4,2],3],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[[4,4],3],[2,4],[[4,26],17],[[4,12],17],[2,4],0,0,0,0,0,0,0,0,0,[[21,2],3],[[[27,[-1,-2]],2],3,21,21],[[[28,[-1]],2],3,21],[[29,2],3],[[[27,[-1,-2]],2],3,29,29],[[[30,[-1]],2],3,29],[7,5],[7,[[6,[[23,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[21,-1],[[27,[21,-1]]],21],[[21,-1],[[27,[21,-1]]],21],[[29,-1],[[27,[29,-1]]],29],[[29,-1],[[27,[29,-1]]],29],[21,[[6,[5]]]],[[[27,[-1,-2]]],[[6,[5]]],21,21],[[[28,[-1]]],[[6,[5]]],21],[29,7],[[[27,[-1,-2]]],7,29,29],[[[30,[-1]]],7,29],[[21,[6,[31]]],2],[[21,[6,[31]]],2],[[[27,[-1,-2]],[6,[31]]],2,21,21],[[[32,[-1]],2],3,[21,13]],[[7,[6,[5]]],3],[[21,2],1],[[21,2],1],[[[27,[-1,-2]],2],1,21,21],[[[28,[-1]],2],1,21],[[21,[6,[5]]],3],[[21,[6,[5]]],3],[[[32,[-1]]],[[33,[[6,[5]]]]],[21,13]],[[[27,[-1,-2]]],-1,[],[]],[[[27,[-1,-2]]],-1,[],[]],[[[34,[-1]]],[[33,[3]]],[29,13]],[[7,16],17],[[[27,[-1,-2]],16],17,35,35],[[[36,[-1]],16],17,35],[[[30,[-1]],16],17,35],[[[32,[-1]],16],17,35],[[[28,[-1]],16],17,35],[[[34,[-1]],16],17,35],[[[6,[[23,[5]]]]],7],[[[6,[5]]],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[5,2],7],[21,37],[21,37],[21,37],[21,37],[21,37],[21,37],[21,38],[21,38],[21,38],[21,38],[21,38],[21,38],[21,39],[21,39],[21,39],[21,39],[21,39],[21,39],[21,40],[21,40],[21,40],[21,40],[21,40],[21,40],[21,41],[21,41],[21,41],[21,41],[21,41],[21,41],[21,42],[21,42],[21,42],[21,42],[21,42],[21,42],[21,43],[21,43],[[21,2],42],[[21,2],42],[[21,2],42],[[21,2],42],[[21,2],42],[[21,2],42],[[[36,[-1]]],-1,[]],[[[30,[-1]]],-1,[]],[[[32,[-1]]],-1,21],[[[28,[-1]]],-1,[]],[[[34,[-1]]],-1,29],[[[36,[-1]]],-1,[]],[[[30,[-1]]],-1,[]],[[[32,[-1]]],-1,21],[[[28,[-1]]],-1,[]],[[[34,[-1]]],-1,29],[21,44],[21,44],[21,44],[21,44],[21,44],[21,44],[21,45],[21,45],[21,45],[21,45],[21,45],[21,45],[21,46],[21,46],[21,46],[21,46],[21,46],[21,46],[21,47],[21,47],[21,47],[21,47],[21,47],[21,47],[21,5],[21,5],[[21,2],47],[[21,2],47],[[21,2],47],[[21,2],47],[[21,2],47],[[21,2],47],[21,10],[21,10],[29,10],[29,10],[[7,48],7],[[7,[49,[2]]],7],[[7,[50,[2]]],7],[[7,[51,[2]]],7],[[7,[52,[2]]],7],[[7,[53,[2]]],7],[[7,[49,[2]]],7],[[7,[51,[2]]],7],[[7,[50,[2]]],7],[[7,[52,[2]]],7],[[7,[53,[2]]],7],[[7,48],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[27,[-1,-2]]],[[3,[-1,-2]]],[],[]],[[[36,[-1]]],-1,[]],[[[30,[-1]]],-1,[]],[[[32,[-1]]],-1,21],[[[28,[-1]]],-1,[]],[[[34,[-1]]],-1,29],[[[27,[-1,-2]]],-3,21,21,[]],[-1,-2,[],[]],[[[27,[-1,-2]]],-2,[],[]],[[[27,[-1,-2]]],-2,[],[]],[7,2],[[29,2],[[30,[29]]]],[[29,2],[[30,[29]]]],[[[30,[-1]]],2,[]],[[[28,[-1]]],2,[]],[[[6,[5]]],7],[-1,[[36,[-1]]],[]],[[[36,[-1]]],[[20,[5]]],21],[[29,-1],3,21],[[29,-1],3,21],[[29,5,2],3],[[29,5,2],3],[[29,37],3],[[29,37],3],[[29,37],3],[[29,37],3],[[29,37],3],[[29,37],3],[[29,38],3],[[29,38],3],[[29,38],3],[[29,38],3],[[29,38],3],[[29,38],3],[[29,39],3],[[29,39],3],[[29,39],3],[[29,39],3],[[29,39],3],[[29,39],3],[[29,40],3],[[29,40],3],[[29,40],3],[[29,40],3],[[29,40],3],[[29,40],3],[[29,41],3],[[29,41],3],[[29,41],3],[[29,41],3],[[29,41],3],[[29,41],3],[[29,42],3],[[29,42],3],[[29,42],3],[[29,42],3],[[29,42],3],[[29,42],3],[[29,43],3],[[29,43],3],[[29,42,2],3],[[29,42,2],3],[[29,42,2],3],[[29,42,2],3],[[29,42,2],3],[[29,42,2],3],[[29,[6,[5]]],3],[[29,[6,[5]]],3],[[29,44],3],[[29,44],3],[[29,44],3],[[29,44],3],[[29,44],3],[[29,44],3],[[29,45],3],[[29,45],3],[[29,45],3],[[29,45],3],[[29,45],3],[[29,45],3],[[29,46],3],[[29,46],3],[[29,46],3],[[29,46],3],[[29,46],3],[[29,46],3],[[29,47],3],[[29,47],3],[[29,47],3],[[29,47],3],[[29,47],3],[[29,47],3],[[29,5],3],[[29,5],3],[[29,47,2],3],[[29,47,2],3],[[29,47,2],3],[[29,47,2],3],[[29,47,2],3],[[29,47,2],3],[[[32,[-1]],[6,[5]]],[[33,[2]]],[21,13]],[21,[[32,[21]]]],[21,[[32,[21]]]],[21,2],[[[27,[-1,-2]]],2,21,21],[[[28,[-1]]],2,21],[29,2],[[[27,[-1,-2]]],2,29,29],[[[30,[-1]]],2,29],[[[30,[-1]],2],3,[]],[[[28,[-1]],2],3,[]],[[[36,[-1]]],[[3,[2,[20,[2]]]]],21],[[21,2],[[28,[21]]]],[[21,2],[[28,[21]]]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[[[6,[[23,[5]]]]],7],[[[34,[-1]],[6,[5]]],[[33,[2]]],[29,13]],[[7,2,5],3],[29,[[34,[29]]]],[29,[[34,[29]]]]],"c":[],"p":[[5,"Bytes",0],[1,"usize"],[1,"tuple"],[5,"BytesMut",0],[1,"u8"],[1,"slice"],[5,"UninitSlice",137],[6,"Ordering",455],[5,"Vec",456],[1,"bool"],[5,"String",457],[1,"str"],[10,"Sized",458],[17,"Item"],[10,"IntoIterator",459],[5,"Formatter",460],[8,"Result",460],[5,"Box",461],[10,"Hasher",462],[6,"Option",463],[10,"Buf",137],[10,"RangeBounds",464],[20,"MaybeUninit",465],[6,"Result",466],[5,"TypeId",467],[5,"Arguments",460],[5,"Chain",137],[5,"Take",137],[10,"BufMut",137],[5,"Limit",137],[5,"IoSlice",468],[5,"Reader",137],[8,"Result",469],[5,"Writer",137],[10,"Debug",460],[5,"IntoIter",137],[1,"f32"],[1,"f64"],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[1,"u128"],[1,"u16"],[1,"u32"],[1,"u64"],[5,"RangeFull",464],[5,"RangeInclusive",464],[5,"RangeToInclusive",464],[5,"RangeFrom",464],[5,"RangeTo",464],[5,"Range",464]],"b":[[40,"impl-PartialEq%3CVec%3Cu8%3E%3E-for-Bytes"],[41,"impl-PartialEq%3CString%3E-for-Bytes"],[42,"impl-PartialEq%3Cstr%3E-for-Bytes"],[43,"impl-PartialEq%3C%5Bu8%5D%3E-for-Bytes"],[44,"impl-PartialEq%3CBytesMut%3E-for-Bytes"],[45,"impl-PartialEq-for-Bytes"],[46,"impl-PartialEq%3C%26T%3E-for-Bytes"],[47,"impl-PartialEq-for-BytesMut"],[48,"impl-PartialEq%3C%26T%3E-for-BytesMut"],[49,"impl-PartialEq%3CString%3E-for-BytesMut"],[50,"impl-PartialEq%3Cstr%3E-for-BytesMut"],[51,"impl-PartialEq%3CBytes%3E-for-BytesMut"],[52,"impl-PartialEq%3CVec%3Cu8%3E%3E-for-BytesMut"],[53,"impl-PartialEq%3C%5Bu8%5D%3E-for-BytesMut"],[54,"impl-Extend%3CBytes%3E-for-BytesMut"],[55,"impl-Extend%3Cu8%3E-for-BytesMut"],[56,"impl-Extend%3C%26u8%3E-for-BytesMut"],[58,"impl-LowerHex-for-Bytes"],[59,"impl-UpperHex-for-Bytes"],[60,"impl-Debug-for-Bytes"],[61,"impl-Debug-for-BytesMut"],[62,"impl-UpperHex-for-BytesMut"],[63,"impl-LowerHex-for-BytesMut"],[65,"impl-From%3C%26str%3E-for-Bytes"],[66,"impl-From%3CBytesMut%3E-for-Bytes"],[67,"impl-From%3C%26%5Bu8%5D%3E-for-Bytes"],[68,"impl-From%3CVec%3Cu8%3E%3E-for-Bytes"],[69,"impl-From%3CString%3E-for-Bytes"],[71,"impl-From%3CBox%3C%5Bu8%5D%3E%3E-for-Bytes"],[72,"impl-From%3C%26str%3E-for-BytesMut"],[74,"impl-From%3C%26%5Bu8%5D%3E-for-BytesMut"],[76,"impl-FromIterator%3C%26u8%3E-for-BytesMut"],[77,"impl-FromIterator%3Cu8%3E-for-BytesMut"],[83,"impl-IntoIterator-for-%26Bytes"],[84,"impl-IntoIterator-for-Bytes"],[85,"impl-IntoIterator-for-%26BytesMut"],[86,"impl-IntoIterator-for-BytesMut"],[93,"impl-PartialOrd%3CVec%3Cu8%3E%3E-for-Bytes"],[94,"impl-PartialOrd%3C%5Bu8%5D%3E-for-Bytes"],[95,"impl-PartialOrd%3CString%3E-for-Bytes"],[96,"impl-PartialOrd%3Cstr%3E-for-Bytes"],[97,"impl-PartialOrd-for-Bytes"],[98,"impl-PartialOrd%3C%26T%3E-for-Bytes"],[99,"impl-PartialOrd%3CString%3E-for-BytesMut"],[100,"impl-PartialOrd%3C%26T%3E-for-BytesMut"],[101,"impl-PartialOrd%3Cstr%3E-for-BytesMut"],[102,"impl-PartialOrd%3CVec%3Cu8%3E%3E-for-BytesMut"],[103,"impl-PartialOrd-for-BytesMut"],[104,"impl-PartialOrd%3C%5Bu8%5D%3E-for-BytesMut"],[200,"impl-From%3C%26mut+%5BMaybeUninit%3Cu8%3E%5D%3E-for-%26mut+UninitSlice"],[201,"impl-From%3C%26mut+%5Bu8%5D%3E-for-%26mut+UninitSlice"],[299,"impl-Index%3CRangeFull%3E-for-UninitSlice"],[300,"impl-Index%3CRangeInclusive%3Cusize%3E%3E-for-UninitSlice"],[301,"impl-Index%3CRangeToInclusive%3Cusize%3E%3E-for-UninitSlice"],[302,"impl-Index%3CRangeFrom%3Cusize%3E%3E-for-UninitSlice"],[303,"impl-Index%3CRangeTo%3Cusize%3E%3E-for-UninitSlice"],[304,"impl-Index%3CRange%3Cusize%3E%3E-for-UninitSlice"],[305,"impl-IndexMut%3CRangeInclusive%3Cusize%3E%3E-for-UninitSlice"],[306,"impl-IndexMut%3CRangeFrom%3Cusize%3E%3E-for-UninitSlice"],[307,"impl-IndexMut%3CRangeToInclusive%3Cusize%3E%3E-for-UninitSlice"],[308,"impl-IndexMut%3CRangeTo%3Cusize%3E%3E-for-UninitSlice"],[309,"impl-IndexMut%3CRange%3Cusize%3E%3E-for-UninitSlice"],[310,"impl-IndexMut%3CRangeFull%3E-for-UninitSlice"]]}],\
["cesu8",{"doc":"A simple library implementing the CESU-8 compatibility …","t":"FNNNNNNNNNHHNHHHHNNNNN","n":["Cesu8DecodingError","borrow","borrow_mut","cause","clone","clone_into","description","fmt","fmt","from","from_cesu8","from_java_cesu8","into","is_valid_cesu8","is_valid_java_cesu8","to_cesu8","to_java_cesu8","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"cesu8"],[22,"core::error"],[23,"core::option"],[24,"core::fmt"],[25,"core::fmt"],[26,"core::result"],[27,"alloc::string"],[28,"core::any"]],"d":["The CESU-8 data could not be decoded as valid UTF-8 data.","","","","","","","","","Returns the argument unchanged.","Convert CESU-8 data to a Rust string, re-encoding only if …","Convert Java’s modified UTF-8 data to a Rust string, …","Calls <code>U::from(self)</code>.","Check whether a Rust string contains valid CESU-8 data.","Check whether a Rust string contains valid Java’s …","Convert a Rust <code>&amp;str</code> to CESU-8 bytes.","Convert a Rust <code>&amp;str</code> to Java’s modified UTF-8 bytes.","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[1,[[3,[2]]]],[1,1],[[-1,-2],4,[],[]],[1,5],[[1,6],7],[[1,6],7],[-1,-1,[]],[[[9,[8]]],[[11,[[10,[5]],1]]]],[[[9,[8]]],[[11,[[10,[5]],1]]]],[-1,-2,[],[]],[5,12],[5,12],[5,[[10,[[9,[8]]]]]],[5,[[10,[[9,[8]]]]]],[-1,-2,[],[]],[-1,13,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,14,[]]],"c":[],"p":[[5,"Cesu8DecodingError",0],[10,"Error",22],[6,"Option",23],[1,"tuple"],[1,"str"],[5,"Formatter",24],[8,"Result",24],[1,"u8"],[1,"slice"],[6,"Cow",25],[6,"Result",26],[1,"bool"],[5,"String",27],[5,"TypeId",28]],"b":[[7,"impl-Display-for-Cesu8DecodingError"],[8,"impl-Debug-for-Cesu8DecodingError"]]}],\
["cfg_if",{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":"Q","n":["cfg_if"],"q":[[0,"cfg_if"]],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"c":[],"p":[],"b":[]}],\
["chrono",{"doc":"Chrono: Date and Time for Rust","t":"PPPFFKEPFPPKRPEPEPPPEESSTTSSTTPPPPPGFEEEEPPPEFFEFEFGPGPPKPPEKPPTEPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNNNNNNNNNMNMNNNNNNNNNNNNNQNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNMNNNNNNMNNMNNMNNNCNNNNNMNNNNNNNNNNNNNNNNNNNNNCNNMNNMNNNNNNNNNNNNNNNCMNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNQNNNNNNNNNNNNMNNNMNNMNNMNMNMNNMNNMNMNNMNNMNNNMNNMNNNNNNNPPGPFPPGPPPPPPPFFPPPPPGPPPPPPPPPPPPPPPPPGPFGPPPPPPPPGFGIFPPPPPPPPEPPPPPPPPPPPPPPPPPPONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNOOOONOOONNNOOOHHOONNNNNNNNNNNNNNNNNNNNNCONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOFNNNNNNNNNNNNNNFFTTSSTTTSSFFFFFFTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPFFGPKRPKFNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNMNNNMNNNMNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEEEEEEEEEEEEEEEE","n":["April","August","AutoSi","Date","DateTime","Datelike","Days","December","Duration","DurationExceedsLimit","DurationExceedsTimestamp","DurationRound","Err","February","FixedOffset","Fri","IsoWeek","January","July","June","Local","LocalResult","MAX_DATE","MAX_DATETIME","MAX_UTC","MAX_UTC","MIN_DATE","MIN_DATETIME","MIN_UTC","MIN_UTC","March","May","Micros","Millis","Mon","Month","Months","NaiveDate","NaiveDateTime","NaiveTime","NaiveWeek","Nanos","November","October","Offset","OutOfRange","OutOfRangeError","ParseError","ParseMonthError","ParseResult","ParseWeekdayError","RoundingError","Sat","SecondsFormat","Secs","September","SubsecRound","Sun","Thu","TimeZone","Timelike","TimestampExceedsLimit","Tue","UNIX_EPOCH","Utc","Wed","Weekday","abs","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","and_hms","and_hms_micro","and_hms_micro_opt","and_hms_milli","and_hms_milli_opt","and_hms_nano","and_hms_nano_opt","and_hms_opt","and_time","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_add_days","checked_add_months","checked_add_signed","checked_add_signed","checked_sub","checked_sub_days","checked_sub_months","checked_sub_signed","checked_sub_signed","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","date","date_naive","day","day","day","day0","day0","day0","days","default","default","default","description","description","div","duration_round","duration_round","duration_trunc","duration_trunc","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","expect","fixed_offset","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format","format","format_with_items","format_with_items","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i64","from_i64","from_local","from_naive_utc_and_offset","from_std","from_str","from_str","from_str","from_str","from_str","from_timestamp","from_u32","from_u64","from_u64","from_utc","from_utc","hash","hash","hash","hash","hash","hash","hash","hash","hour","hour","hour12","hour12","hours","into","into","into","into","into","into","into","into","into","into","into","into","is_zero","iso_week","iso_week","iso_week","max_value","microseconds","milliseconds","min_value","minute","minute","minutes","month","month","month","month0","month0","month0","mul","naive","naive_local","naive_local","naive_utc","naive_utc","name","nanosecond","nanosecond","nanoseconds","neg","new","num_days","num_days_from_ce","num_days_from_ce","num_days_from_monday","num_days_from_sunday","num_hours","num_microseconds","num_milliseconds","num_minutes","num_nanoseconds","num_seconds","num_seconds_from_midnight","num_seconds_from_midnight","num_weeks","number_from_monday","number_from_month","number_from_sunday","offset","offset","offset","ordinal","ordinal","ordinal","ordinal0","ordinal0","ordinal0","parse_and_remainder","parse_from_rfc2822","parse_from_rfc3339","parse_from_str","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pred","pred","pred","pred_opt","prelude","round_subsecs","round_subsecs","second","second","seconds","signed_duration_since","signed_duration_since","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","succ","succ","succ","succ_opt","sum","sum","time","timestamp","timestamp_micros","timestamp_millis","timestamp_nanos","timestamp_nanos_opt","timestamp_subsec_micros","timestamp_subsec_millis","timestamp_subsec_nanos","timezone","timezone","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_rfc2822","to_rfc3339","to_rfc3339_opts","to_std","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","trunc_subsecs","trunc_subsecs","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_opt","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","weekday","weekday","weekday","weeks","with_day","with_day","with_day","with_day0","with_day0","with_day0","with_hour","with_hour","with_minute","with_minute","with_month","with_month","with_month","with_month0","with_month0","with_month0","with_nanosecond","with_nanosecond","with_ordinal","with_ordinal","with_ordinal","with_ordinal0","with_ordinal0","with_ordinal0","with_second","with_second","with_timezone","with_timezone","with_year","with_year","with_year","year","year","year","year_ce","year_ce","years_since","years_since","zero","BadFormat","Colon","Colons","Day","DelayedFormat","Err","Error","Fixed","Fixed","Hour","Hour12","Hours","Impossible","Internal","Internal","InternalFixed","InternalNumeric","Invalid","IsoWeek","IsoYear","IsoYearDiv100","IsoYearMod100","Item","Literal","LongMonthName","LongWeekdayName","LowerAmPm","Maybe","Minute","Minutes","Month","Nanosecond","Nanosecond","Nanosecond3","Nanosecond6","Nanosecond9","None","None","NotEnough","NumDaysFromSun","Numeric","Numeric","OffsetFormat","OffsetPrecision","Ok","OptionalMinutes","OptionalMinutesAndSeconds","OptionalSeconds","Ordinal","OutOfRange","OwnedLiteral","OwnedSpace","Pad","ParseError","ParseErrorKind","ParseResult","Parsed","RFC2822","RFC3339","Second","Seconds","ShortMonthName","ShortWeekdayName","Space","Space","StrftimeItems","Timestamp","TimezoneName","TimezoneOffset","TimezoneOffsetColon","TimezoneOffsetColonZ","TimezoneOffsetDoubleColon","TimezoneOffsetTripleColon","TimezoneOffsetZ","TooLong","TooShort","UpperAmPm","WeekFromMon","WeekFromSun","WeekdayFromMon","Year","YearDiv100","YearMod100","Zero","allow_zulu","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","colons","day","default","description","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format_item","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hour_div_12","hour_mod_12","into","into","into","into","into","into","into","into","into","into","into","into","into","isoweek","isoyear","isoyear_div_100","isoyear_mod_100","kind","minute","month","nanosecond","new","new","new_with_offset","offset","ordinal","padding","parse","parse_and_remainder","precision","second","set_ampm","set_day","set_hour","set_hour12","set_isoweek","set_isoyear","set_isoyear_div_100","set_isoyear_mod_100","set_minute","set_month","set_nanosecond","set_offset","set_ordinal","set_second","set_timestamp","set_week_from_mon","set_week_from_sun","set_weekday","set_year","set_year_div_100","set_year_mod_100","strftime","timestamp","to_datetime","to_datetime_with_timezone","to_fixed_offset","to_naive_date","to_naive_datetime_with_offset","to_naive_time","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","week_from_mon","week_from_sun","weekday","year","year_div_100","year_mod_100","StrftimeItems","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","new","next","to_owned","try_from","try_into","type_id","Days","IsoWeek","MAX","MAX","MAX_DATE","MAX_DATETIME","MIN","MIN","MIN","MIN_DATE","MIN_DATETIME","NaiveDate","NaiveDateDaysIterator","NaiveDateTime","NaiveDateWeeksIterator","NaiveTime","NaiveWeek","UNIX_EPOCH","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","and_hms","and_hms_micro","and_hms_micro_opt","and_hms_milli","and_hms_milli_opt","and_hms_nano","and_hms_nano_opt","and_hms_opt","and_local_timezone","and_time","and_utc","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add_days","checked_add_days","checked_add_months","checked_add_months","checked_add_signed","checked_add_signed","checked_sub_days","checked_sub_days","checked_sub_months","checked_sub_months","checked_sub_signed","checked_sub_signed","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","date","day","day","day0","day0","days","default","default","default","duration_round","duration_trunc","eq","eq","eq","eq","eq","eq","eq","first_day","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format","format","format_with_items","format_with_items","format_with_items","from","from","from","from","from","from","from","from","from","from_hms","from_hms_micro","from_hms_micro_opt","from_hms_milli","from_hms_milli_opt","from_hms_nano","from_hms_nano_opt","from_hms_opt","from_isoywd","from_isoywd_opt","from_num_days_from_ce","from_num_days_from_ce_opt","from_num_seconds_from_midnight","from_num_seconds_from_midnight_opt","from_str","from_str","from_str","from_timestamp","from_timestamp_micros","from_timestamp_millis","from_timestamp_opt","from_weekday_of_month","from_weekday_of_month_opt","from_ymd","from_ymd_opt","from_yo","from_yo_opt","hash","hash","hash","hash","hash","hash","hash","hour","hour","into","into","into","into","into","into","into","into","into_iter","into_iter","iso_week","iso_week","iter_days","iter_weeks","last_day","leap_year","minute","minute","month","month","month0","month0","nanosecond","nanosecond","new","new","next","next","next_back","next_back","num_seconds_from_midnight","ordinal","ordinal","ordinal0","ordinal0","overflowing_add_signed","overflowing_sub_signed","parse_and_remainder","parse_and_remainder","parse_and_remainder","parse_from_str","parse_from_str","parse_from_str","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pred","pred_opt","round_subsecs","round_subsecs","second","second","signed_duration_since","signed_duration_since","signed_duration_since","size_hint","size_hint","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","succ","succ_opt","time","timestamp","timestamp_micros","timestamp_millis","timestamp_nanos","timestamp_nanos_opt","timestamp_subsec_micros","timestamp_subsec_millis","timestamp_subsec_nanos","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","trunc_subsecs","trunc_subsecs","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","week","week","week0","weekday","weekday","with_day","with_day","with_day0","with_day0","with_hour","with_hour","with_minute","with_minute","with_month","with_month","with_month0","with_month0","with_nanosecond","with_nanosecond","with_ordinal","with_ordinal","with_ordinal0","with_ordinal0","with_second","with_second","with_year","with_year","year","year","year","years_since","Ambiguous","FixedOffset","Local","LocalResult","None","Offset","Offset","Single","TimeZone","Utc","and_hms_micro_opt","and_hms_milli_opt","and_hms_nano_opt","and_hms_opt","and_time","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","datetime_from_str","earliest","east","east_opt","eq","eq","eq","fix","fix","fix","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_local_date","from_local_datetime","from_offset","from_offset","from_offset","from_offset","from_str","from_utc_date","from_utc_datetime","hash","hash","hash","into","into","into","into","isoywd","isoywd_opt","latest","local_minus_utc","map","now","now","offset_from_local_date","offset_from_local_date","offset_from_local_date","offset_from_local_date","offset_from_local_datetime","offset_from_local_datetime","offset_from_local_datetime","offset_from_local_datetime","offset_from_utc_date","offset_from_utc_date","offset_from_utc_date","offset_from_utc_date","offset_from_utc_datetime","offset_from_utc_datetime","offset_from_utc_datetime","offset_from_utc_datetime","single","timestamp","timestamp_micros","timestamp_millis","timestamp_millis_opt","timestamp_nanos","timestamp_opt","to_owned","to_owned","to_owned","to_owned","to_string","to_string","today","today","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap","utc_minus_local","west","west_opt","with_ymd_and_hms","ymd","ymd_opt","yo","yo_opt","Date","DateTime","Datelike","FixedOffset","Local","Month","NaiveDate","NaiveDateTime","NaiveTime","Offset","SecondsFormat","SubsecRound","TimeZone","Timelike","Utc","Weekday"],"q":[[0,"chrono"],[485,"chrono::format"],[799,"chrono::format::strftime"],[814,"chrono::naive"],[1147,"chrono::offset"],[1273,"chrono::prelude"],[1289,"core::time"],[1290,"core::option"],[1291,"core::clone"],[1292,"core::cmp"],[1293,"core::result"],[1294,"core::error"],[1295,"core::fmt"],[1296,"core::fmt"],[1297,"core::iter::traits::iterator"],[1298,"std::time"],[1299,"core::hash"],[1300,"alloc::string"],[1301,"core::any"],[1302,"core::fmt"],[1303,"core::cmp"]],"d":["April","August","Automatically select one of <code>Secs</code>, <code>Millis</code>, <code>Micros</code>, or <code>Nanos</code> …","ISO 8601 calendar date with time zone.","ISO 8601 combined date and time with time zone.","The common set of methods for date component.","","December","ISO 8601 time duration with nanosecond precision.","Error when <code>Duration.num_nanoseconds</code> exceeds the limit.","Error when the Duration exceeds the Duration from or until …","Extension trait for rounding or truncating a DateTime by a …","Error that can occur in rounding or truncating","February","","Friday.","","January","July","June","","","The maximum possible <code>Date</code>.","The maximum possible <code>DateTime&lt;Utc&gt;</code>.","The maximum possible <code>Date</code>.","The maximum possible <code>DateTime&lt;Utc&gt;</code>.","The minimum possible <code>Date</code>.","The minimum possible <code>DateTime&lt;Utc&gt;</code>.","The minimum possible <code>Date</code>.","The minimum possible <code>DateTime&lt;Utc&gt;</code>.","March","May","Use fixed 6 subsecond digits. This corresponds to …","Use fixed 3 subsecond digits. This corresponds to …","Monday.","The month of the year.","A duration in calendar months","","","","","Use fixed 9 subsecond digits. This corresponds to …","November","October","","Out of range error type used in various converting APIs","Represents error when converting <code>Duration</code> to/from a …","","An error resulting from reading <code>&lt;Month&gt;</code> value with <code>FromStr</code>.","","An error resulting from reading <code>Weekday</code> value with <code>FromStr</code>.","An error from rounding by <code>Duration</code>","Saturday.","Specific formatting options for seconds. This may be …","Format whole seconds only, with no decimal point nor …","September","Extension trait for subsecond rounding or truncation to a …","Sunday.","Thursday.","","The common set of methods for time component.","Error when <code>DateTime.timestamp_nanos</code> exceeds the limit.","Tuesday.","The Unix Epoch, 1970-01-01 00:00:00 UTC.","","Wednesday.","The day of week.","Returns the duration as an absolute (non-negative) value.","","","","","","","","","","","Makes a new <code>DateTime</code> from the current date, hour, minute …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute …","Makes a new <code>DateTime</code> from the current date and given …","","","","","","","","","","","","","","","","","","","","","","","","","Add two durations, returning <code>None</code> if overflow occurred.","Add a duration in <code>Days</code> to the date part of the <code>DateTime</code>.","Adds given <code>Months</code> to the current date and time.","Adds given <code>Duration</code> to the current date.","Adds given <code>Duration</code> to the current date and time.","Subtract two durations, returning <code>None</code> if overflow …","Subtract a duration in <code>Days</code> from the date part of the …","Subtracts given <code>Months</code> from the current date and time.","Subtracts given <code>Duration</code> from the current date.","Subtracts given <code>Duration</code> from the current date and time.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Retrieves the date component with an associated timezone.","Retrieves the date component.","Returns the day of month starting from 1.","","","Returns the day of month starting from 0.","","","Makes a new <code>Duration</code> with given number of days. Equivalent …","","","","","","","Return a copy rounded by Duration.","","Return a copy truncated by Duration.","","","","","","","","","","","","","","Workaround because <code>.expect()</code> is not (yet) available in …","Fix the offset from UTC to its current value, dropping the …","","Format a duration using the ISO 8601 format","","","","","","","","","","","","","","","","","","","","Formatting (and parsing) utilities for date and time.","Formats the date with the specified format string. See the …","Formats the combined date and time per the specified …","Formats the date with the specified formatting items.","Formats the combined date and time with the specified …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Convert this <code>DateTime&lt;Local&gt;</code> instance into a …","Convert this <code>DateTime&lt;FixedOffset&gt;</code> instance into a …","Convert this <code>DateTime&lt;Local&gt;</code> instance into a <code>DateTime&lt;Utc&gt;</code> …","Convert this <code>DateTime&lt;Utc&gt;</code> instance into a <code>DateTime&lt;Local&gt;</code> …","Convert this <code>DateTime&lt;FixedOffset&gt;</code> instance into a …","Returns the argument unchanged.","","Convert this <code>DateTime&lt;Utc&gt;</code> instance into a …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Makes a new <code>DateTime</code> from a <code>NaiveDateTime</code> in <em>local</em> time …","Makes a new <code>DateTime</code> from its components: a <code>NaiveDateTime</code> …","Creates a <code>time::Duration</code> object from <code>std::time::Duration</code>","","","","","","Makes a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …","","","Returns an <code>Option&lt;Month&gt;</code> from a i64, assuming a 1-index, …","Makes a new <code>Date</code> with given <em>UTC</em> date and offset. The local …","Makes a new <code>DateTime</code> from its components: a <code>NaiveDateTime</code> …","","","","","","","","","Returns the hour number from 0 to 23.","","Returns the hour number from 1 to 12 with a boolean flag, …","Returns the hour number from 1 to 12 with a boolean flag, …","Makes a new <code>Duration</code> with given number of hours. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the duration equals <code>Duration::zero()</code>.","Returns the ISO week.","","","The maximum possible <code>Duration</code>: <code>i64::MAX</code> milliseconds.","Makes a new <code>Duration</code> with given number of microseconds.","Makes a new <code>Duration</code> with given number of milliseconds.","The minimum possible <code>Duration</code>: <code>i64::MIN</code> milliseconds.","Returns the minute number from 0 to 59.","","Makes a new <code>Duration</code> with given number of minutes. …","Returns the month number starting from 1.","","","Returns the month number starting from 0.","","","","Date and time types unconcerned with timezones.","Returns a view to the naive local date.","Returns a view to the naive local datetime.","Returns a view to the naive UTC date.","Returns a view to the naive UTC datetime.","Get the name of the month","Returns the number of nanoseconds since the whole non-leap …","","Makes a new <code>Duration</code> with given number of nanoseconds.","","Construct a new <code>Months</code> from a number of months","Returns the total number of whole days in the duration.","Counts the days in the proleptic Gregorian calendar, with …","Counts the days in the proleptic Gregorian calendar, with …","Returns a day-of-week number starting from Monday = 0.","Returns a day-of-week number starting from Sunday = 0.","Returns the total number of whole hours in the duration.","Returns the total number of whole microseconds in the …","Returns the total number of whole milliseconds in the …","Returns the total number of whole minutes in the duration.","Returns the total number of whole nanoseconds in the …","Returns the total number of whole seconds in the duration.","Returns the number of non-leap seconds past the last …","Returns the number of non-leap seconds past the last …","Returns the total number of whole weeks in the duration.","Returns a day-of-week number starting from Monday = 1. …","Returns a month-of-year number starting from January = 1.","Returns a day-of-week number starting from Sunday = 1.","The time zone, which calculates offsets from the local …","Retrieves an associated offset from UTC.","Retrieves an associated offset from UTC.","Returns the day of year starting from 1.","","","Returns the day of year starting from 0.","","","Parses a string from a user-specified format into a …","Parses an RFC 2822 date-and-time string into a …","Parses an RFC 3339 date-and-time string into a …","Parses a string from a user-specified format into a …","","","Compare two DateTimes based on their true time, ignoring …","","","Makes a new <code>Date</code> for the prior date.","The previous day in the week.","The previous month.","Makes a new <code>Date</code> for the prior date.","A convenience module appropriate for glob imports (…","Return a copy rounded to the specified number of subsecond …","","Returns the second number from 0 to 59.","","Makes a new <code>Duration</code> with given number of seconds. Panics …","Subtracts another <code>Date</code> from the current date. Returns a …","Subtracts another <code>DateTime</code> from the current date and time. …","","","","","","","","","","","","","","Makes a new <code>Date</code> for the next date.","The next day in the week.","The next month.","Makes a new <code>Date</code> for the next date.","","","Retrieves the time component.","Returns the number of non-leap seconds since January 1, …","Returns the number of non-leap-microseconds since January …","Returns the number of non-leap-milliseconds since January …","Returns the number of non-leap-nanoseconds since January …","Returns the number of non-leap-nanoseconds since January …","Returns the number of microseconds since the last second …","Returns the number of milliseconds since the last second …","Returns the number of nanoseconds since the last second …","Retrieves an associated time zone.","Retrieves an associated time zone.","","","","","","","","","","","","","Returns an RFC 2822 date and time string such as …","Returns an RFC 3339 and ISO 8601 date and time string such …","Return an RFC 3339 and ISO 8601 date and time string with …","Creates a <code>std::time::Duration</code> object from <code>time::Duration</code>","","","","","","","","","","Return a copy truncated to the specified number of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Workaround because <code>?</code> is not (yet) available in const …","","","","","","","","","","","","","Returns the day of week.","","","Makes a new <code>Duration</code> with given number of weeks. …","Makes a new value with the day of month (starting from 1) …","","Makes a new <code>DateTime</code> with the month number (starting from …","Makes a new value with the day of month (starting from 0) …","","Makes a new <code>DateTime</code> with the month number (starting from …","Makes a new value with the hour number changed.","Makes a new <code>DateTime</code> with the hour number changed.","Makes a new value with the minute number changed.","Makes a new <code>DateTime</code> with the minute number changed.","Makes a new value with the month number (starting from 1) …","","Makes a new <code>DateTime</code> with the month number (starting from …","Makes a new value with the month number (starting from 0) …","","Makes a new <code>DateTime</code> with the month number (starting from …","Makes a new value with nanoseconds since the whole …","Makes a new <code>DateTime</code> with nanoseconds since the whole …","Makes a new value with the day of year (starting from 1) …","","Makes a new <code>DateTime</code> with the month number (starting from …","Makes a new value with the day of year (starting from 0) …","","Makes a new <code>DateTime</code> with the month number (starting from …","Makes a new value with the second number changed.","Makes a new <code>DateTime</code> with the second number changed.","Changes the associated time zone. This does not change the …","Changes the associated time zone. The returned <code>DateTime</code> …","Makes a new value with the year number changed, while …","","Makes a new <code>DateTime</code> with the year number changed, while …","Returns the year number in the calendar date.","","","Returns the absolute year number starting from 1 with a …","Returns the absolute year number starting from 1 with a …","Returns the number of whole years from the given <code>base</code> …","Retrieve the elapsed years from now to the given <code>DateTime</code>.","A duration where the stored seconds and nanoseconds are …","There was an error on the formatting string, or there were …","Colon (<code>:</code>) as separator","The separator between hours and minutes in an offset.","Day of the month (FW=PW=2).","A <em>temporary</em> object which can be used as an argument to …","Contains the error value","Issues a formatting error. Used to signal an invalid …","Fixed-format item types.","Fixed-format item.","Hour number in the 24-hour clocks (FW=PW=2).","Hour number in the 12-hour clocks (FW=PW=2).","Format offset from UTC as only hours. Not recommended, it …","There is no possible date and time value with given set of …","Internal uses only.","Internal uses only.","An opaque type representing fixed-format item types for …","An opaque type representing numeric item types for …","The input string has some invalid character sequence for …","Week number in the ISO week date (FW=PW=2).","Year in the ISO week date (FW=4, PW=∞). May accept years …","Year in the ISO week date, divided by 100 (FW=PW=2). …","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be …","A single formatting item. This is used for both formatting …","A literally printed and parsed text.","Full month names.","Full day of the week names.","AM/PM.","No separator when formatting, colon allowed when parsing.","The number of minutes since the last whole hour (FW=PW=2).","Format offset from UTC as hours and minutes. Any seconds …","Month (FW=PW=2).","The number of nanoseconds since the last whole second …","An optional dot plus one or more digits for left-aligned …","Same as <code>Nanosecond</code> but the accuracy is fixed to 3.","Same as <code>Nanosecond</code> but the accuracy is fixed to 6.","Same as <code>Nanosecond</code> but the accuracy is fixed to 9.","No padding.","No separator","Given set of fields is not enough to make a requested date …","Day of the week, where Sunday = 0 and Saturday = 6 …","Numeric item types. They have associated formatting width …","Numeric item. Can be optionally padded to the maximal …","Type for specifying the format of UTC offsets.","The precision of an offset from UTC formatting item.","Contains the success value","Format offset from UTC as hours, and optionally with …","Format offset from UTC as hours and optionally minutes and …","Format offset from UTC as hours and minutes, and …","Day of the year (FW=PW=3).","Given field is out of permitted range.","Same as <code>Literal</code> but with the string owned by the item.","Same as <code>Space</code> but with the string owned by the item.","Padding characters for numeric items.","An error from the <code>parse</code> function.","The category of parse error","Same as <code>Result&lt;T, ParseError&gt;</code>.","Parsed parts of date and time. There are two classes of …","RFC 2822 date and time syntax. Commonly used for email and …","RFC 3339 &amp; ISO 8601 date and time syntax.","The number of seconds since the last whole minute …","Format offset from UTC as hours, minutes and seconds.","Abbreviated month names.","Abbreviated day of the week names.","Space padding.","Whitespace. Prints literally but reads zero or more …","","The number of non-leap seconds since the midnight UTC on …","Timezone name.","Same as <code>TimezoneOffsetColon</code> but prints no colon. Parsing …","Offset from the local time to UTC (<code>+09:00</code> or <code>-04:00</code> or …","Offset from the local time to UTC (<code>+09:00</code> or <code>-04:00</code> or <code>Z</code>).","Offset from the local time to UTC with seconds (<code>+09:00:00</code> …","Offset from the local time to UTC without minutes (<code>+09</code> or …","Same as <code>TimezoneOffsetColonZ</code> but prints no colon. Parsing …","All formatting items have been read but there is a …","The input string has been prematurely ended.","AM/PM.","Week number, where the week 1 starts at the first Monday …","Week number, where the week 1 starts at the first Sunday …","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).","Full Gregorian year (FW=4, PW=∞). May accept years …","Gregorian year divided by 100 (century number; FW=PW=2). …","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.","Zero (<code>0</code>) padding.","Represent <code>+00:00</code> as <code>Z</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Separator between hours, minutes and seconds.","Day of the month (1–28, 1–29, 1–30 or 1–31 …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to format given arguments with given formatting …","Formats single formatting item","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Hour number divided by 12 (0–1). 0 indicates AM and 1 …","Hour number modulo 12 (0–11).","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","ISO week number (1–52 or 1–53 depending on the year).","Year in the ISO week date.","Year in the ISO week date, divided by 100. Implies that …","Year in the ISO week date, modulo 100. Implies that the …","The category of parse error","Minute number (0–59).","Month (1–12).","The number of nanoseconds since the whole second (0–…","Makes a new <code>DelayedFormat</code> value out of local date and time.","Returns the initial value of parsed parts.","Makes a new <code>DelayedFormat</code> value out of local date and time …","Offset from the local time to UTC, in seconds.","Day of the year (1–365 or 1–366 depending on the year).","Pad the hour value to two digits.","Tries to parse given string into <code>parsed</code> with given …","Tries to parse given string into <code>parsed</code> with given …","See <code>OffsetPrecision</code>.","Second number (0–60, accounting for leap seconds).","Tries to set the <code>hour_div_12</code> field from given value. (<code>false</code>…","Tries to set the <code>day</code> field from given value.","Tries to set both <code>hour_div_12</code> and <code>hour_mod_12</code> fields from …","Tries to set the <code>hour_mod_12</code> field from given hour number …","Tries to set the <code>isoweek</code> field from given value.","Tries to set the <code>isoyear</code> field from given value.","Tries to set the <code>isoyear_div_100</code> field from given value.","Tries to set the <code>isoyear_mod_100</code> field from given value.","Tries to set the <code>minute</code> field from given value.","Tries to set the <code>month</code> field from given value.","Tries to set the <code>nanosecond</code> field from given value.","Tries to set the <code>offset</code> field from given value.","Tries to set the <code>ordinal</code> field from given value.","Tries to set the <code>second</code> field from given value.","Tries to set the <code>timestamp</code> field from given value.","Tries to set the <code>week_from_mon</code> field from given value.","Tries to set the <code>week_from_sun</code> field from given value.","Tries to set the <code>weekday</code> field from given value.","Tries to set the <code>year</code> field from given value.","Tries to set the <code>year_div_100</code> field from given value.","Tries to set the <code>year_mod_100</code> field from given value.","<code>strftime</code>/<code>strptime</code>-inspired date and time formatting syntax.","The number of non-leap seconds since the midnight UTC on …","Returns a parsed timezone-aware date and time out of given …","Returns a parsed timezone-aware date and time out of given …","Returns a parsed fixed time zone offset out of given …","Returns a parsed naive date out of given fields.","Returns a parsed naive date and time out of given fields, …","Returns a parsed naive time out of given fields.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Week number, where the week 1 starts at the first Monday …","Week number, where the week 1 starts at the first Sunday …","Day of the week.","Year.","Year divided by 100. Implies that the year is &gt;= 1 BCE …","Year modulo 100. Implies that the year is &gt;= 1 BCE when …","Parsing iterator for <code>strftime</code>-like format strings.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Creates a new parsing iterator from the <code>strftime</code>-like …","","","","","","A duration in calendar days.","ISO 8601 week.","The maximum possible <code>NaiveDate</code> (December 31, 262143 CE).","The maximum possible <code>NaiveDateTime</code>.","The maximum possible <code>NaiveDate</code> (December 31, 262143 CE).","The maximum possible <code>NaiveDateTime</code>.","The minimum possible <code>NaiveDate</code> (January 1, 262145 BCE).","The minimum possible <code>NaiveDateTime</code>.","The earliest possible <code>NaiveTime</code>","The minimum possible <code>NaiveDate</code> (January 1, 262145 BCE).","The minimum possible <code>NaiveDateTime</code>.","ISO 8601 calendar date without timezone. Allows for every …","Iterator over <code>NaiveDate</code> with a step size of one day.","ISO 8601 combined date and time without timezone.","Iterator over <code>NaiveDate</code> with a step size of one week.","ISO 8601 time without timezone. Allows for the nanosecond …","A week represented by a <code>NaiveDate</code> and a <code>Weekday</code> which is …","The Unix Epoch, 1970-01-01 00:00:00.","","","An addition of months to <code>NaiveDate</code> clamped to valid days …","","An addition of months to <code>NaiveDateTime</code> clamped to valid …","","","","","","","","","","","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Converts the <code>NaiveDateTime</code> into the timezone-aware …","Makes a new <code>NaiveDateTime</code> from the current date and given …","Converts the <code>NaiveDateTime</code> into the timezone-aware …","","","","","","","","","","","","","","","","","Add a duration in <code>Days</code> to the date","Add a duration in <code>Days</code> to the date part of the …","Add a duration in <code>Months</code> to the date","Adds given <code>Months</code> to the current date and time.","Adds the number of whole days in the given <code>Duration</code> to the …","Adds given <code>Duration</code> to the current date and time.","Subtract a duration in <code>Days</code> from the date","Subtract a duration in <code>Days</code> from the date part of the …","Subtract a duration in <code>Months</code> from the date","Subtracts given <code>Months</code> from the current date and time.","Subtracts the number of whole days in the given <code>Duration</code> …","Subtracts given <code>Duration</code> from the current date and time.","","","","","","","","","","","","","","","","","","","","","","Retrieves a date component.","Returns the day of month starting from 1.","Returns the day of month starting from 1.","Returns the day of month starting from 0.","Returns the day of month starting from 0.","Returns a <code>RangeInclusive&lt;T&gt;</code> representing the whole week …","","","","","","","","","","","","","Returns a date representing the first day of the week.","","","","","","","","","","","","Formats the date with the specified format string. See the …","Formats the combined date and time with the specified …","Formats the time with the specified format string. See the …","Formats the date with the specified formatting items. …","Formats the combined date and time with the specified …","Formats the time with the specified formatting items. …","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Makes a new <code>NaiveTime</code> from hour, minute and second.","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute and second.","Makes a new <code>NaiveDate</code> from the ISO week date (year, week …","Makes a new <code>NaiveDate</code> from the ISO week date (year, week …","Makes a new <code>NaiveDate</code> from a day’s number in the …","Makes a new <code>NaiveDate</code> from a day’s number in the …","Makes a new <code>NaiveTime</code> from the number of seconds since …","Makes a new <code>NaiveTime</code> from the number of seconds since …","","","","Makes a new <code>NaiveDateTime</code> corresponding to a UTC date and …","Creates a new NaiveDateTime from microseconds since the …","Creates a new NaiveDateTime from milliseconds since the …","Makes a new <code>NaiveDateTime</code> corresponding to a UTC date and …","Makes a new <code>NaiveDate</code> by counting the number of …","Makes a new <code>NaiveDate</code> by counting the number of …","Makes a new <code>NaiveDate</code> from the calendar date (year, month …","Makes a new <code>NaiveDate</code> from the calendar date (year, month …","Makes a new <code>NaiveDate</code> from the ordinal date (year and day …","Makes a new <code>NaiveDate</code> from the ordinal date (year and day …","","","","","","","","Returns the hour number from 0 to 23.","Returns the hour number from 0 to 23.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns an iterator that steps by days across all …","Returns an iterator that steps by weeks across all …","Returns a date representing the last day of the week.","Returns <code>true</code> if this is a leap year.","Returns the minute number from 0 to 59.","Returns the minute number from 0 to 59.","Returns the month number starting from 1.","Returns the month number starting from 1.","Returns the month number starting from 0.","Returns the month number starting from 0.","Returns the number of nanoseconds since the whole non-leap …","Returns the number of nanoseconds since the whole non-leap …","Construct a new <code>Days</code> from a number of days","Makes a new <code>NaiveDateTime</code> from date and time components. …","","","","","Returns the number of non-leap seconds past the last …","Returns the day of year starting from 1.","Returns the day of year starting from 1.","Returns the day of year starting from 0.","Returns the day of year starting from 0.","Adds given <code>Duration</code> to the current time, and also returns …","Subtracts given <code>Duration</code> from the current time, and also …","Parses a string from a user-specified format into a new …","Parses a string with the specified format string and …","Parses a string from a user-specified format into a new …","Parses a string with the specified format string and …","Parses a string with the specified format string and …","Parses a string with the specified format string and …","","","","","","","","Makes a new <code>NaiveDate</code> for the previous calendar date.","Makes a new <code>NaiveDate</code> for the previous calendar date.","","","Returns the second number from 0 to 59.","Returns the second number from 0 to 59.","Subtracts another <code>NaiveDate</code> from the current date. Returns …","Subtracts another <code>NaiveDateTime</code> from the current date and …","Subtracts another <code>NaiveTime</code> from the current time. Returns …","","","","A subtraction of Months from <code>NaiveDate</code> clamped to valid …","","","","","","","","","","","","","","","","","","Makes a new <code>NaiveDate</code> for the next calendar date.","Makes a new <code>NaiveDate</code> for the next calendar date.","Retrieves a time component.","Returns the number of non-leap seconds since the midnight …","Returns the number of non-leap <em>microseconds</em> since midnight …","Returns the number of non-leap <em>milliseconds</em> since midnight …","Returns the number of non-leap <em>nanoseconds</em> since midnight …","Returns the number of non-leap <em>nanoseconds</em> since midnight …","Returns the number of microseconds since the last whole …","Returns the number of milliseconds since the last whole …","Returns the number of nanoseconds since the last whole …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>NaiveWeek</code> that the date belongs to, starting …","Returns the ISO week number starting from 1.","Returns the ISO week number starting from 0.","Returns the day of week.","Returns the day of week.","Makes a new <code>NaiveDate</code> with the day of month (starting from …","Makes a new <code>NaiveDateTime</code> with the day of month (starting …","Makes a new <code>NaiveDate</code> with the day of month (starting from …","Makes a new <code>NaiveDateTime</code> with the day of month (starting …","Makes a new <code>NaiveDateTime</code> with the hour number changed.","Makes a new <code>NaiveTime</code> with the hour number changed.","Makes a new <code>NaiveDateTime</code> with the minute number changed.","Makes a new <code>NaiveTime</code> with the minute number changed.","Makes a new <code>NaiveDate</code> with the month number (starting from …","Makes a new <code>NaiveDateTime</code> with the month number (starting …","Makes a new <code>NaiveDate</code> with the month number (starting from …","Makes a new <code>NaiveDateTime</code> with the month number (starting …","Makes a new <code>NaiveDateTime</code> with nanoseconds since the whole …","Makes a new <code>NaiveTime</code> with nanoseconds since the whole …","Makes a new <code>NaiveDate</code> with the day of year (starting from …","Makes a new <code>NaiveDateTime</code> with the day of year (starting …","Makes a new <code>NaiveDate</code> with the day of year (starting from …","Makes a new <code>NaiveDateTime</code> with the day of year (starting …","Makes a new <code>NaiveDateTime</code> with the second number changed.","Makes a new <code>NaiveTime</code> with the second number changed.","Makes a new <code>NaiveDate</code> with the year number changed, while …","Makes a new <code>NaiveDateTime</code> with the year number changed, …","Returns the year number in the calendar date.","Returns the year number in the calendar date.","Returns the year number for this ISO week.","Returns the number of whole years from the given <code>base</code> …","Given local time representation has multiple results and …","The time zone with fixed offset, from UTC-23:59:59 to …","The local timescale. This is implemented via the standard …","The conversion result from the local time to the …","Given local time representation is invalid. This can occur …","The offset from the local time to UTC.","An associated offset type. This type is used to store the …","Given local time representation has a single unique result.","The time zone.","The UTC time zone. This is the most efficient time zone …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute …","Makes a new <code>DateTime</code> from the current date and given …","","","","","","","","","","","","","","","","","Parses a string with the specified format string and …","Returns <code>Some</code> for the earliest possible conversion result, …","Makes a new <code>FixedOffset</code> for the Eastern Hemisphere with …","Makes a new <code>FixedOffset</code> for the Eastern Hemisphere with …","","","","Returns the fixed offset from UTC to the local time stored.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts the local <code>NaiveDate</code> to the timezone-aware <code>Date</code> if …","Converts the local <code>NaiveDateTime</code> to the timezone-aware …","Reconstructs the time zone from the offset.","","","","","Converts the UTC <code>NaiveDate</code> to the local time. The UTC is …","Converts the UTC <code>NaiveDateTime</code> to the local time. The UTC …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Makes a new <code>Date</code> from ISO week date (year and week …","Makes a new <code>Date</code> from ISO week date (year and week …","Returns <code>Some</code> for the latest possible conversion result, or …","Returns the number of seconds to add to convert from UTC …","Maps a <code>LocalResult&lt;T&gt;</code> into <code>LocalResult&lt;U&gt;</code> with given …","Returns a <code>DateTime&lt;Local&gt;</code> which corresponds to the current …","Returns a <code>DateTime&lt;Utc&gt;</code> which corresponds to the current …","Creates the offset(s) for given local <code>NaiveDate</code> if …","","","","Creates the offset(s) for given local <code>NaiveDateTime</code> if …","","","","Creates the offset for given UTC <code>NaiveDate</code>. This cannot …","","","","Creates the offset for given UTC <code>NaiveDateTime</code>. This …","","","","Returns <code>Some</code> only when the conversion result is unique, or …","Makes a new <code>DateTime</code> from the number of non-leap seconds …","Makes a new <code>DateTime</code> from the number of non-leap …","Makes a new <code>DateTime</code> from the number of non-leap …","Makes a new <code>DateTime</code> from the number of non-leap …","Makes a new <code>DateTime</code> from the number of non-leap …","Makes a new <code>DateTime</code> from the number of non-leap seconds …","","","","","","","Returns a <code>Date</code> which corresponds to the current date.","Returns a <code>Date</code> which corresponds to the current date.","","","","","","","","","","","","","Returns the single unique conversion result, or panics …","Returns the number of seconds to add to convert from the …","Makes a new <code>FixedOffset</code> for the Western Hemisphere with …","Makes a new <code>FixedOffset</code> for the Western Hemisphere with …","Make a new <code>DateTime</code> from year, month, day, time components …","Makes a new <code>Date</code> from year, month, day and the current …","Makes a new <code>Date</code> from year, month, day and the current …","Makes a new <code>Date</code> from year, day of year (DOY or “ordinal…","Makes a new <code>Date</code> from year, day of year (DOY or “ordinal…","","","","","","","","","","","","","","","",""],"i":[19,19,15,0,0,0,0,19,0,16,16,0,31,19,0,17,0,19,19,19,0,0,0,0,2,4,0,0,2,4,19,19,15,15,17,0,0,0,0,0,0,15,19,19,0,0,0,0,0,0,0,0,17,0,15,19,0,17,17,0,0,16,17,4,0,17,0,1,1,2,4,4,4,4,4,2,4,4,2,2,2,2,2,2,2,2,2,1,13,2,15,4,16,17,18,19,6,20,21,1,13,2,15,4,16,17,18,19,6,20,21,1,4,4,2,4,1,4,4,2,4,1,13,2,15,4,16,17,18,19,6,20,21,1,13,2,15,4,16,17,18,19,6,20,21,1,2,4,19,6,4,4,24,2,4,24,2,4,1,4,4,4,13,16,1,31,4,31,4,1,13,2,15,4,16,17,18,19,6,20,21,0,4,1,1,13,13,2,2,15,4,4,16,16,17,17,18,18,19,6,20,20,21,21,0,2,4,2,4,1,13,2,15,4,4,4,4,4,4,4,4,4,16,17,18,19,6,20,21,17,19,4,4,1,4,4,4,17,19,4,19,17,19,2,4,1,2,15,4,17,19,6,21,48,4,48,48,1,1,13,2,15,4,16,17,18,19,6,20,21,1,24,2,4,1,1,1,1,48,4,1,24,2,4,24,2,4,1,0,2,4,2,4,19,48,4,1,1,6,1,24,24,17,17,1,1,1,1,1,1,48,48,1,17,19,17,0,2,4,24,2,4,24,2,4,4,4,4,4,1,2,4,19,6,2,17,19,2,0,50,4,48,4,1,2,4,1,2,2,4,4,4,4,4,4,4,2,4,4,2,17,19,2,1,1,4,4,4,4,4,4,4,4,4,2,4,1,13,2,15,4,16,17,18,19,6,20,21,4,4,4,1,1,13,2,4,16,17,18,20,21,50,4,1,13,2,15,4,16,17,17,18,19,19,6,20,21,1,13,2,15,4,16,17,18,19,6,20,21,0,1,13,2,15,4,16,17,18,19,6,20,21,24,2,4,1,24,2,4,24,2,4,48,4,48,4,24,2,4,24,2,4,48,4,24,2,4,24,2,4,48,4,2,4,24,2,4,24,2,4,24,24,2,4,1,65,63,0,57,0,45,39,0,39,57,57,62,65,57,59,0,0,65,57,57,57,57,0,39,59,59,59,63,57,62,57,57,59,59,59,59,56,63,65,57,0,39,0,0,45,62,62,62,57,65,39,39,0,0,0,0,0,59,59,57,62,59,59,56,39,0,57,59,59,59,59,59,59,59,65,65,59,57,57,57,57,57,57,56,61,38,55,56,57,58,59,60,61,62,63,39,64,65,38,55,56,57,58,59,60,61,62,63,39,64,65,55,56,57,58,59,60,61,62,63,39,64,65,55,56,57,58,59,60,61,62,63,39,64,65,61,55,55,64,55,56,57,58,59,60,61,62,63,39,64,65,38,38,55,56,57,58,59,60,61,62,63,39,64,64,65,0,0,38,55,56,57,58,59,60,61,62,63,39,64,65,55,56,57,58,59,60,61,62,63,39,64,65,55,55,38,55,56,57,58,59,60,61,62,63,39,64,65,55,55,55,55,64,55,55,55,38,55,38,55,55,61,0,0,61,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,55,55,55,55,55,55,55,55,56,57,58,59,60,61,62,63,39,64,65,38,64,38,55,56,57,58,59,60,61,62,63,39,64,65,38,55,56,57,58,59,60,61,62,63,39,64,65,38,55,56,57,58,59,60,61,62,63,39,64,65,55,55,55,55,55,55,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,23,44,0,0,23,44,12,0,0,0,0,0,0,0,0,44,23,23,23,44,44,44,44,44,12,12,12,23,44,44,12,12,23,23,23,23,23,23,23,23,44,23,44,72,5,23,70,71,44,49,12,72,5,23,70,71,44,49,12,23,44,23,44,23,44,23,44,23,44,23,44,5,23,70,71,44,49,12,5,23,70,71,44,49,12,5,23,70,71,44,49,12,44,23,44,23,44,72,23,44,12,44,44,5,23,70,71,44,49,12,72,72,5,23,23,70,71,44,44,49,12,12,23,44,12,23,44,12,72,5,23,23,70,71,44,49,12,12,12,12,12,12,12,12,12,23,23,23,23,12,12,23,44,12,44,44,44,44,23,23,23,23,23,23,5,23,70,71,44,49,12,44,12,72,5,23,70,71,44,49,12,70,71,23,44,23,23,72,23,44,12,23,44,23,44,44,12,5,44,70,71,70,71,12,23,44,23,44,12,12,23,44,12,23,44,12,5,23,70,71,44,49,12,23,23,44,12,44,12,23,44,12,70,71,23,23,23,23,44,44,44,44,44,44,12,12,12,12,23,44,44,12,12,23,23,44,44,44,44,44,44,44,44,44,5,23,70,71,44,49,12,23,44,12,44,12,72,5,23,70,71,44,49,12,72,5,23,70,71,44,49,12,72,5,23,70,71,44,49,12,23,49,49,23,44,23,44,23,44,44,12,44,12,23,44,23,44,44,12,23,44,23,44,44,12,23,44,23,44,49,23,69,0,0,0,69,0,3,69,0,0,69,69,69,69,69,7,26,27,69,7,26,27,69,7,26,27,69,7,26,27,69,3,69,7,7,7,27,69,67,7,27,7,7,26,27,27,69,7,26,27,69,3,3,3,7,26,27,7,3,3,7,27,69,7,26,27,69,3,3,69,7,69,26,27,3,7,26,27,3,7,26,27,3,7,26,27,3,7,26,27,69,3,3,3,3,3,3,7,26,27,69,7,27,26,27,7,26,27,69,7,26,27,69,7,26,27,69,69,7,7,7,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[[1,1],1],[[[2,[-1]],1],[[2,[-1]]],3],[[[4,[-1]],5],-2,3,[]],[[[4,[-1]],6],-2,3,[]],[[[4,[-1]],7],[[4,[-1]]],3],[[[4,[-1]],1],[[4,[-1]]],3],[[[4,[-1]],8],[[4,[-1]]],3],[[[2,[-1]],1],9,3],[[[4,[-1]],8],9,3],[[[4,[-1]],1],9,3],[[[2,[-1]],10,10,10],[[4,[-1]]],3],[[[2,[-1]],10,10,10,10],[[4,[-1]]],3],[[[2,[-1]],10,10,10,10],[[11,[[4,[-1]]]]],3],[[[2,[-1]],10,10,10,10],[[4,[-1]]],3],[[[2,[-1]],10,10,10,10],[[11,[[4,[-1]]]]],3],[[[2,[-1]],10,10,10,10],[[4,[-1]]],3],[[[2,[-1]],10,10,10,10],[[11,[[4,[-1]]]]],3],[[[2,[-1]],10,10,10],[[11,[[4,[-1]]]]],3],[[[2,[-1]],12],[[11,[[4,[-1]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],[[11,[1]]]],[[[4,[-1]],5],[[11,[[4,[-1]]]]],3],[[[4,[-1]],6],[[11,[[4,[-1]]]]],3],[[[2,[-1]],1],[[11,[[2,[-1]]]]],3],[[[4,[-1]],1],[[11,[[4,[-1]]]]],3],[[1,1],[[11,[1]]]],[[[4,[-1]],5],[[11,[[4,[-1]]]]],3],[[[4,[-1]],6],[[11,[[4,[-1]]]]],3],[[[2,[-1]],1],[[11,[[2,[-1]]]]],3],[[[4,[-1]],1],[[11,[[4,[-1]]]]],3],[1,1],[13,13],[[[2,[-1]]],[[2,[-1]]],[14,3]],[15,15],[[[4,[-1]]],[[4,[-1]]],[14,3]],[16,16],[17,17],[18,18],[19,19],[6,6],[20,20],[21,21],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[1,1],22],[[[2,[-1]],[2,[-1]]],22,3],[[[4,[-1]],[4,[-1]]],22,3],[[19,19],22],[[6,6],22],[[[4,[-1]]],[[2,[-1]]],3],[[[4,[-1]]],23,3],[24,10],[[[2,[-1]]],10,3],[[[4,[-1]]],10,3],[24,10],[[[2,[-1]]],10,3],[[[4,[-1]]],10,3],[25,1],[[],[[4,[26]]]],[[],[[4,[27]]]],[[],[[4,[7]]]],[13,28],[16,28],[[1,29],1],[[[31,[],[[30,[-1]]]],1],[[32,[[31,[],[[30,[-1]]]],-1]]],33],[[[4,[-1]],1],[[32,[[4,[-1]],-2]]],3,[]],[[[31,[],[[30,[-1]]]],1],[[32,[[31,[],[[30,[-1]]]],-1]]],33],[[[4,[-1]],1],[[32,[[4,[-1]],-2]]],3,[]],[[1,1],34],[[13,13],34],[[[2,[-1]],[2,[-2]]],34,3,3],[[15,15],34],[[[4,[-1]],[4,[-2]]],34,3,3],[[16,16],34],[[17,17],34],[[18,18],34],[[19,19],34],[[6,6],34],[[20,20],34],[[21,21],34],0,[[[4,[-1]]],[[4,[7]]],3],[[1,35],36],[[1,35],36],[[13,35],36],[[13,35],36],[[[2,[-1]],35],36,3],[[[2,[-1]],35],36,3],[[15,35],36],[[[4,[-1]],35],36,3],[[[4,[-1]],35],36,3],[[16,35],36],[[16,35],36],[[17,35],36],[[17,35],36],[[18,35],36],[[18,35],36],[[19,35],36],[[6,35],36],[[20,35],36],[[20,35],36],[[21,35],36],[[21,35],36],0,[[[2,[-1]],28],[[38,[37]]],3],[[[4,[-1]],28],[[38,[37]]],3],[[[2,[-1]],-3],[[38,[-3]]],3,[[40,[39]]],[[42,[],[[41,[-2]]]],14]],[[[4,[-1]],-3],[[38,[-3]]],3,[[40,[39]]],[[42,[],[[41,[-2]]]],14]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[43,[[4,[26]]]],[[[4,[26]]],[[4,[7]]]],[[[4,[7]]],[[4,[27]]]],[[[4,[26]]],[[4,[27]]]],[[[4,[27]]],[[4,[26]]]],[[[4,[7]]],[[4,[26]]]],[-1,-1,[]],[43,[[4,[27]]]],[[[4,[27]]],[[4,[7]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[25,[[11,[17]]]],[25,[[11,[19]]]],[44,[[4,[-1]]],3],[44,[[4,[-1]]],3],[8,[[32,[1,13]]]],[28,[[45,[[4,[26]]]]]],[28,[[45,[[4,[27]]]]]],[28,[[45,[[4,[7]]]]]],[28,[[32,[17,-1]]],[]],[28,[[32,[19,-1]]],[]],[[25,10],[[11,[[4,[27]]]]]],[10,[[11,[19]]]],[46,[[11,[17]]]],[46,[[11,[19]]]],[23,[[2,[-1]]],3],[44,[[4,[-1]]],3],[[1,-1],9,47],[[[2,[-1]],-2],9,3,47],[[15,-1],9,47],[[[4,[-1]],-2],9,3,47],[[17,-1],9,47],[[19,-1],9,47],[[6,-1],9,47],[[21,-1],9,47],[48,10],[[[4,[-1]]],10,3],[48,[[9,[34,10]]]],[48,[[9,[34,10]]]],[25,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,34],[24,49],[[[2,[-1]]],49,3],[[[4,[-1]]],49,3],[[],1],[25,1],[25,1],[[],1],[48,10],[[[4,[-1]]],10,3],[25,1],[24,10],[[[2,[-1]]],10,3],[[[4,[-1]]],10,3],[24,10],[[[2,[-1]]],10,3],[[[4,[-1]]],10,3],[[1,29],1],0,[[[2,[-1]]],23,3],[[[4,[-1]]],44,3],[[[2,[-1]]],23,3],[[[4,[-1]]],44,3],[19,28],[48,10],[[[4,[-1]]],10,3],[25,1],[1,1],[10,6],[1,25],[24,29],[24,29],[17,10],[17,10],[1,25],[1,[[11,[25]]]],[1,25],[1,25],[1,[[11,[25]]]],[1,25],[48,10],[48,10],[1,25],[17,10],[19,10],[17,10],0,[[[2,[-1]]],[],3],[[[4,[-1]]],[],3],[24,10],[[[2,[-1]]],10,3],[[[4,[-1]]],10,3],[24,10],[[[2,[-1]]],10,3],[[[4,[-1]]],10,3],[[28,28],[[45,[[9,[[4,[7]],28]]]]]],[28,[[45,[[4,[7]]]]]],[28,[[45,[[4,[7]]]]]],[[28,28],[[45,[[4,[7]]]]]],[[1,1],[[11,[22]]]],[[[2,[-1]],[2,[-1]]],[[11,[22]]],3],[[[4,[-1]],[4,[-2]]],[[11,[22]]],3,3],[[19,19],[[11,[22]]]],[[6,6],[[11,[22]]]],[[[2,[-1]]],[[2,[-1]]],3],[17,17],[19,19],[[[2,[-1]]],[[11,[[2,[-1]]]]],3],0,[[50,51],50],[[-1,51],-2,[],[]],[48,10],[[[4,[-1]]],10,3],[25,1],[[[2,[-1]],[2,[-2]]],1,3,3],[[[4,[-1]],-3],1,3,3,[[40,[[4,[-2]]]]]],[[1,1],1],[[[2,[-1]],[2,[-1]]],1,3],[[[2,[-1]],1],[[2,[-1]]],3],[[[4,[-1]],1],[[4,[-1]]],3],[[[4,[-1]],8],[[4,[-1]]],3],[[[4,[-1]],[4,[-1]]],1,3],[[[4,[-1]],5],-2,3,[]],[[[4,[-1]],6],-2,3,[]],[[[4,[-1]],[4,[-1]]],1,3],[[[4,[-1]],7],[[4,[-1]]],3],[[[2,[-1]],1],9,3],[[[4,[-1]],1],9,3],[[[4,[-1]],8],9,3],[[[2,[-1]]],[[2,[-1]]],3],[17,17],[19,19],[[[2,[-1]]],[[11,[[2,[-1]]]]],3],[-1,1,[[42,[],[[41,[1]]]]]],[-1,1,[[42,[],[[41,[1]]]]]],[[[4,[-1]]],12,3],[[[4,[-1]]],25,3],[[[4,[-1]]],25,3],[[[4,[-1]]],25,3],[[[4,[-1]]],25,3],[[[4,[-1]]],[[11,[25]]],3],[[[4,[-1]]],10,3],[[[4,[-1]]],10,3],[[[4,[-1]]],10,3],[[[2,[-1]]],-1,3],[[[4,[-1]]],-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[-1]]],52,3],[[[4,[-1]]],52,3],[[[4,[-1]],15,34],52,3],[1,[[32,[8,13]]]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[[50,51],50],[[-1,51],-2,[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[53,[[32,[17,-1]]],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[53,[[32,[19,-1]]],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],0,[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[24,17],[[[2,[-1]]],17,3],[[[4,[-1]]],17,3],[25,1],[[24,10],[[11,[24]]]],[[[2,[-1]],10],[[11,[[2,[-1]]]]],3],[[[4,[-1]],10],[[11,[[4,[-1]]]]],3],[[24,10],[[11,[24]]]],[[[2,[-1]],10],[[11,[[2,[-1]]]]],3],[[[4,[-1]],10],[[11,[[4,[-1]]]]],3],[[48,10],[[11,[48]]]],[[[4,[-1]],10],[[11,[[4,[-1]]]]],3],[[48,10],[[11,[48]]]],[[[4,[-1]],10],[[11,[[4,[-1]]]]],3],[[24,10],[[11,[24]]]],[[[2,[-1]],10],[[11,[[2,[-1]]]]],3],[[[4,[-1]],10],[[11,[[4,[-1]]]]],3],[[24,10],[[11,[24]]]],[[[2,[-1]],10],[[11,[[2,[-1]]]]],3],[[[4,[-1]],10],[[11,[[4,[-1]]]]],3],[[48,10],[[11,[48]]]],[[[4,[-1]],10],[[11,[[4,[-1]]]]],3],[[24,10],[[11,[24]]]],[[[2,[-1]],10],[[11,[[2,[-1]]]]],3],[[[4,[-1]],10],[[11,[[4,[-1]]]]],3],[[24,10],[[11,[24]]]],[[[2,[-1]],10],[[11,[[2,[-1]]]]],3],[[[4,[-1]],10],[[11,[[4,[-1]]]]],3],[[48,10],[[11,[48]]]],[[[4,[-1]],10],[[11,[[4,[-1]]]]],3],[[[2,[-1]],-2],[[2,[-2]]],3,3],[[[4,[-1]],-2],[[4,[-2]]],3,3],[[24,29],[[11,[24]]]],[[[2,[-1]],29],[[11,[[2,[-1]]]]],3],[[[4,[-1]],29],[[11,[[4,[-1]]]]],3],[24,29],[[[2,[-1]]],29,3],[[[4,[-1]]],29,3],[24,[[9,[34,10]]]],[24,[[9,[34,10]]]],[[[2,[-1]],[2,[-1]]],[[11,[10]]],3],[[[4,[-1]],[4,[-1]]],[[11,[10]]],3],[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[39,39],[64,64],[65,65],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,[[],55],[64,28],[[55,55],34],[[56,56],34],[[57,57],34],[[58,58],34],[[59,59],34],[[60,60],34],[[61,61],34],[[62,62],34],[[63,63],34],[[39,39],34],[[64,64],34],[[65,65],34],[[[38,[-1]],35],36,66],[[[38,[-2]],35],36,[[40,[39]]],[[42,[],[[41,[-1]]]],14]],[[55,35],36],[[56,35],36],[[57,35],36],[[58,35],36],[[59,35],36],[[60,35],36],[[61,35],36],[[62,35],36],[[63,35],36],[[39,35],36],[[64,35],36],[[64,35],36],[[65,35],36],[[35,[11,[23]],[11,[12]],[11,[[9,[52,7]]]],-2],36,[[40,[39]]],[[42,[],[[41,[-1]]]],14]],[[35,[11,[23]],[11,[12]],[11,[[9,[52,7]]]],39],36],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[55,-1],9,47],[[56,-1],9,47],[[57,-1],9,47],[[58,-1],9,47],[[59,-1],9,47],[[60,-1],9,47],[[61,-1],9,47],[[62,-1],9,47],[[63,-1],9,47],[[39,-1],9,47],[[64,-1],9,47],[[65,-1],9,47],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[64,65],0,0,0,[[[11,[23]],[11,[12]],-2],[[38,[-2]]],[[40,[39]]],[[42,[],[[41,[-1]]]],14]],[[],55],[[[11,[23]],[11,[12]],-1,-3],[[38,[-3]]],[67,68],[[40,[39]]],[[42,[],[[41,[-2]]]],14]],0,0,0,[[55,28,-2],[[45,[9]]],[[40,[39]]],[[42,[],[[41,[-1]]]]]],[[55,28,-2],[[45,[28]]],[[40,[39]]],[[42,[],[[41,[-1]]]]]],0,0,[[55,34],[[45,[9]]]],[[55,25],[[45,[9]]]],[[55,25],[[45,[9]]]],[[55,25],[[45,[9]]]],[[55,25],[[45,[9]]]],[[55,25],[[45,[9]]]],[[55,25],[[45,[9]]]],[[55,25],[[45,[9]]]],[[55,25],[[45,[9]]]],[[55,25],[[45,[9]]]],[[55,25],[[45,[9]]]],[[55,25],[[45,[9]]]],[[55,25],[[45,[9]]]],[[55,25],[[45,[9]]]],[[55,25],[[45,[9]]]],[[55,25],[[45,[9]]]],[[55,25],[[45,[9]]]],[[55,17],[[45,[9]]]],[[55,25],[[45,[9]]]],[[55,25],[[45,[9]]]],[[55,25],[[45,[9]]]],0,0,[55,[[45,[[4,[7]]]]]],[[55,-1],[[45,[[4,[-1]]]]],3],[55,[[45,[7]]]],[55,[[45,[23]]]],[[55,29],[[45,[44]]]],[55,[[45,[12]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,52,[]],[-1,52,[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[37,37],[[-1,-2],9,[],[]],[[37,35],36],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,37],[37,[[11,[39]]]],[-1,-2,[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,54,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[23,1],23],[[23,5],-1,[]],[[23,6],-1,[]],[[44,8],44],[[44,6],-1,[]],[[44,1],44],[[44,5],-1,[]],[[44,7],44],[[12,1],12],[[12,8],12],[[12,7],12],[[23,1],9],[[44,1],9],[[44,8],9],[[12,8],9],[[12,1],9],[[23,10,10,10],44],[[23,10,10,10,10],44],[[23,10,10,10,10],[[11,[44]]]],[[23,10,10,10,10],44],[[23,10,10,10,10],[[11,[44]]]],[[23,10,10,10,10],44],[[23,10,10,10,10],[[11,[44]]]],[[23,10,10,10],[[11,[44]]]],[[44,-1],[[69,[[4,[-1]]]]],3],[[23,12],44],[44,[[4,[27]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[23,5],[[11,[23]]]],[[44,5],[[11,[44]]]],[[23,6],[[11,[23]]]],[[44,6],[[11,[44]]]],[[23,1],[[11,[23]]]],[[44,1],[[11,[44]]]],[[23,5],[[11,[23]]]],[[44,5],[[11,[44]]]],[[23,6],[[11,[23]]]],[[44,6],[[11,[44]]]],[[23,1],[[11,[23]]]],[[44,1],[[11,[44]]]],[5,5],[23,23],[70,70],[71,71],[44,44],[49,49],[12,12],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[5,5],22],[[23,23],22],[[70,70],22],[[71,71],22],[[44,44],22],[[49,49],22],[[12,12],22],[44,23],[23,10],[44,10],[23,10],[44,10],[72,[[73,[23]]]],[[],23],[[],44],[[],12],[[44,1],[[32,[44,-1]]],[]],[[44,1],[[32,[44,-1]]],[]],[[5,5],34],[[23,23],34],[[70,70],34],[[71,71],34],[[44,44],34],[[49,49],34],[[12,12],34],[72,23],[[72,35],36],[[5,35],36],[[23,35],36],[[23,35],36],[[70,35],36],[[71,35],36],[[44,35],36],[[44,35],36],[[49,35],36],[[12,35],36],[[12,35],36],[[23,28],[[38,[37]]]],[[44,28],[[38,[37]]]],[[12,28],[[38,[37]]]],[[23,-2],[[38,[-2]]],[[40,[39]]],[[42,[],[[41,[-1]]]],14]],[[44,-2],[[38,[-2]]],[[40,[39]]],[[42,[],[[41,[-1]]]],14]],[[12,-2],[[38,[-2]]],[[40,[39]]],[[42,[],[[41,[-1]]]],14]],[-1,-1,[]],[-1,-1,[]],[44,23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[10,10,10],12],[[10,10,10,10],12],[[10,10,10,10],[[11,[12]]]],[[10,10,10,10],12],[[10,10,10,10],[[11,[12]]]],[[10,10,10,10],12],[[10,10,10,10],[[11,[12]]]],[[10,10,10],[[11,[12]]]],[[29,10,17],23],[[29,10,17],[[11,[23]]]],[29,23],[29,[[11,[23]]]],[[10,10],12],[[10,10],[[11,[12]]]],[28,[[45,[23]]]],[28,[[45,[44]]]],[28,[[45,[12]]]],[[25,10],44],[25,[[11,[44]]]],[25,[[11,[44]]]],[[25,10],[[11,[44]]]],[[29,10,17,53],23],[[29,10,17,53],[[11,[23]]]],[[29,10,10],23],[[29,10,10],[[11,[23]]]],[[29,10],23],[[29,10],[[11,[23]]]],[[5,-1],9,47],[[23,-1],9,47],[[70,-1],9,47],[[71,-1],9,47],[[44,-1],9,47],[[49,-1],9,47],[[12,-1],9,47],[44,10],[12,10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[23,49],[44,49],[23,70],[23,71],[72,23],[23,34],[44,10],[12,10],[23,10],[44,10],[23,10],[44,10],[44,10],[12,10],[46,5],[[23,12],44],[70,[[11,[-1]]],[]],[71,[[11,[-1]]],[]],[70,[[11,[-1]]],[]],[71,[[11,[-1]]],[]],[12,10],[23,10],[44,10],[23,10],[44,10],[[12,1],[[9,[12,25]]]],[[12,1],[[9,[12,25]]]],[[28,28],[[45,[[9,[23,28]]]]]],[[28,28],[[45,[[9,[44,28]]]]]],[[28,28],[[45,[[9,[12,28]]]]]],[[28,28],[[45,[23]]]],[[28,28],[[45,[44]]]],[[28,28],[[45,[12]]]],[[5,5],[[11,[22]]]],[[23,23],[[11,[22]]]],[[70,70],[[11,[22]]]],[[71,71],[[11,[22]]]],[[44,44],[[11,[22]]]],[[49,49],[[11,[22]]]],[[12,12],[[11,[22]]]],[23,23],[23,[[11,[23]]]],[[-1,51],-2,[],[]],[[-1,51],-2,[],[]],[44,10],[12,10],[[23,23],1],[[44,44],1],[[12,12],1],[70,[[9,[74,[11,[74]]]]]],[71,[[9,[74,[11,[74]]]]]],[[23,23],1],[[23,6],-1,[]],[[23,5],-1,[]],[[23,1],23],[[44,5],-1,[]],[[44,6],-1,[]],[[44,7],44],[[44,8],44],[[44,1],44],[[44,44],1],[[12,8],12],[[12,7],12],[[12,12],1],[[12,1],12],[[23,1],9],[[44,8],9],[[44,1],9],[[12,8],9],[[12,1],9],[23,23],[23,[[11,[23]]]],[44,12],[44,25],[44,25],[44,25],[44,25],[44,[[11,[25]]]],[44,10],[44,10],[44,10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[[-1,51],-2,[],[]],[[-1,51],-2,[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[[23,17],72],[49,10],[49,10],[23,17],[44,17],[[23,10],[[11,[23]]]],[[44,10],[[11,[44]]]],[[23,10],[[11,[23]]]],[[44,10],[[11,[44]]]],[[44,10],[[11,[44]]]],[[12,10],[[11,[12]]]],[[44,10],[[11,[44]]]],[[12,10],[[11,[12]]]],[[23,10],[[11,[23]]]],[[44,10],[[11,[44]]]],[[23,10],[[11,[23]]]],[[44,10],[[11,[44]]]],[[44,10],[[11,[44]]]],[[12,10],[[11,[12]]]],[[23,10],[[11,[23]]]],[[44,10],[[11,[44]]]],[[23,10],[[11,[23]]]],[[44,10],[[11,[44]]]],[[44,10],[[11,[44]]]],[[12,10],[[11,[12]]]],[[23,29],[[11,[23]]]],[[44,29],[[11,[44]]]],[23,29],[44,29],[49,29],[[23,23],[[11,[10]]]],0,0,0,0,0,0,0,0,0,0,[[[69,[[2,[-1]]]],10,10,10,10],[[69,[[4,[-1]]]]],3],[[[69,[[2,[-1]]]],10,10,10,10],[[69,[[4,[-1]]]]],3],[[[69,[[2,[-1]]]],10,10,10,10],[[69,[[4,[-1]]]]],3],[[[69,[[2,[-1]]]],10,10,10],[[69,[[4,[-1]]]]],3],[[[69,[[2,[-1]]]],12],[[69,[[4,[-1]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,7],[26,26],[27,27],[[[69,[-1]]],[[69,[-1]]],14],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[3,[],[[75,[-1]]]],28,28],[[45,[[4,[[3,[],[[75,[-1]]]]]]]]],67],[[[69,[-1]]],[[11,[-1]]],[]],[29,7],[29,[[11,[7]]]],[[7,7],34],[[27,27],34],[[[69,[-1]],[69,[-1]]],34,76],[67,7],[7,7],[27,7],[[7,35],36],[[7,35],36],[[26,35],36],[[27,35],36],[[27,35],36],[[[69,[-1]],35],36,66],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[3,[],[[75,[-1]]]],23],[[69,[[2,[[3,[],[[75,[-1]]]]]]]]],67],[[[3,[],[[75,[-1]]]],44],[[69,[[4,[[3,[],[[75,[-1]]]]]]]]],67],[-1,[[3,[],[[75,[-1]]]]],67],[7,7],[7,26],[27,27],[28,[[32,[7,-1]]],[]],[[[3,[],[[75,[-1]]]],23],[[2,[[3,[],[[75,[-1]]]]]]],67],[[[3,[],[[75,[-1]]]],44],[[4,[[3,[],[[75,[-1]]]]]]],67],[[7,-1],9,47],[[27,-1],9,47],[[[69,[-1]],-2],9,77,47],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[],[[75,[-1]]]],29,10,17],[[2,[[3,[],[[75,[-1]]]]]]],67],[[[3,[],[[75,[-1]]]],29,10,17],[[69,[[2,[[3,[],[[75,[-1]]]]]]]]],67],[[[69,[-1]]],[[11,[-1]]],[]],[7,29],[[[69,[-1]],-3],[[69,[-2]]],[],[],[[79,[-1],[[78,[-2]]]]]],[[],[[4,[26]]]],[[],[[4,[27]]]],[[[3,[],[[75,[-1]]]],23],[[69,[-1]]],67],[[7,23],[[69,[7]]]],[[26,23],[[69,[7]]]],[[27,23],[[69,[27]]]],[[[3,[],[[75,[-1]]]],44],[[69,[-1]]],67],[[7,44],[[69,[7]]]],[[26,44],[[69,[7]]]],[[27,44],[[69,[27]]]],[[[3,[],[[75,[-1]]]],23],-1,67],[[7,23],7],[[26,23],7],[[27,23],27],[[[3,[],[[75,[-1]]]],44],-1,67],[[7,44],7],[[26,44],7],[[27,44],27],[[[69,[-1]]],[[11,[-1]]],[]],[[[3,[],[[75,[-1]]]],25,10],[[4,[[3,[],[[75,[-1]]]]]]],67],[[[3,[],[[75,[-1]]]],25],[[69,[[4,[[3,[],[[75,[-1]]]]]]]]],67],[[[3,[],[[75,[-1]]]],25],[[4,[[3,[],[[75,[-1]]]]]]],67],[[[3,[],[[75,[-1]]]],25],[[69,[[4,[[3,[],[[75,[-1]]]]]]]]],67],[[[3,[],[[75,[-1]]]],25],[[4,[[3,[],[[75,[-1]]]]]]],67],[[[3,[],[[75,[-1]]]],25,10],[[69,[[4,[[3,[],[[75,[-1]]]]]]]]],67],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,52,[]],[-1,52,[]],[[],[[2,[26]]]],[[],[[2,[27]]]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[[[69,[-1]]],-1,66],[7,29],[29,7],[29,[[11,[7]]]],[[[3,[],[[75,[-1]]]],29,10,10,10,10,10],[[69,[[4,[[3,[],[[75,[-1]]]]]]]]],67],[[[3,[],[[75,[-1]]]],29,10,10],[[2,[[3,[],[[75,[-1]]]]]]],67],[[[3,[],[[75,[-1]]]],29,10,10],[[69,[[2,[[3,[],[[75,[-1]]]]]]]]],67],[[[3,[],[[75,[-1]]]],29,10],[[2,[[3,[],[[75,[-1]]]]]]],67],[[[3,[],[[75,[-1]]]],29,10],[[69,[[2,[[3,[],[[75,[-1]]]]]]]]],67],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[3,22,23,26,27,78,79,81,83,150,231,244,334,359,369,818,819,823,824,848,849,851,853,953,954,956,958,961,963,965,970,974,976,978,1039,1069,1075,1178,1180,1198,1205,1214,1215,1238,1240,1250,1251,1266,1269,1270,1271,1272],"p":[[5,"Duration",0],[5,"Date",0],[10,"TimeZone",1147],[5,"DateTime",0],[5,"Days",814],[5,"Months",0],[5,"FixedOffset",1147],[5,"Duration",1289],[1,"tuple"],[1,"u32"],[6,"Option",1290],[5,"NaiveTime",814],[5,"OutOfRangeError",0],[10,"Clone",1291],[6,"SecondsFormat",0],[6,"RoundingError",0],[6,"Weekday",0],[5,"ParseWeekdayError",0],[6,"Month",0],[5,"ParseMonthError",0],[5,"OutOfRange",0],[6,"Ordering",1292],[5,"NaiveDate",814],[10,"Datelike",0],[1,"i64"],[5,"Local",1147],[5,"Utc",1147],[1,"str"],[1,"i32"],[17,"Err"],[10,"DurationRound",0],[6,"Result",1293],[10,"Error",1294],[1,"bool"],[5,"Formatter",1295],[8,"Result",1295],[5,"StrftimeItems",799],[5,"DelayedFormat",485],[6,"Item",485],[10,"Borrow",1296],[17,"Item"],[10,"Iterator",1297],[5,"SystemTime",1298],[5,"NaiveDateTime",814],[8,"ParseResult",485],[1,"u64"],[10,"Hasher",1299],[10,"Timelike",0],[5,"IsoWeek",814],[10,"SubsecRound",0],[1,"u16"],[5,"String",1300],[1,"u8"],[5,"TypeId",1301],[5,"Parsed",485],[6,"Pad",485],[6,"Numeric",485],[5,"InternalNumeric",485],[6,"Fixed",485],[5,"InternalFixed",485],[5,"OffsetFormat",485],[6,"OffsetPrecision",485],[6,"Colons",485],[5,"ParseError",485],[6,"ParseErrorKind",485],[10,"Debug",1295],[10,"Offset",1147],[10,"Display",1295],[6,"LocalResult",1147],[5,"NaiveDateDaysIterator",814],[5,"NaiveDateWeeksIterator",814],[5,"NaiveWeek",814],[5,"RangeInclusive",1302],[1,"usize"],[17,"Offset"],[10,"PartialEq",1292],[10,"Hash",1299],[17,"Output"],[10,"FnMut",1303]],"b":[[70,"impl-Add%3CDays%3E-for-DateTime%3CTz%3E"],[71,"impl-Add%3CMonths%3E-for-DateTime%3CTz%3E"],[72,"impl-Add%3CFixedOffset%3E-for-DateTime%3CTz%3E"],[73,"impl-Add%3CDuration%3E-for-DateTime%3CTz%3E"],[74,"impl-Add%3CDuration%3E-for-DateTime%3CTz%3E"],[76,"impl-AddAssign%3CDuration%3E-for-DateTime%3CTz%3E"],[77,"impl-AddAssign%3CDuration%3E-for-DateTime%3CTz%3E"],[159,"impl-Default-for-DateTime%3CLocal%3E"],[160,"impl-Default-for-DateTime%3CUtc%3E"],[161,"impl-Default-for-DateTime%3CFixedOffset%3E"],[183,"impl-Debug-for-Duration"],[184,"impl-Display-for-Duration"],[185,"impl-Display-for-OutOfRangeError"],[186,"impl-Debug-for-OutOfRangeError"],[187,"impl-Debug-for-Date%3CTz%3E"],[188,"impl-Display-for-Date%3CTz%3E"],[190,"impl-Display-for-DateTime%3CTz%3E"],[191,"impl-Debug-for-DateTime%3CTz%3E"],[192,"impl-Debug-for-RoundingError"],[193,"impl-Display-for-RoundingError"],[194,"impl-Debug-for-Weekday"],[195,"impl-Display-for-Weekday"],[196,"impl-Debug-for-ParseWeekdayError"],[197,"impl-Display-for-ParseWeekdayError"],[200,"impl-Debug-for-ParseMonthError"],[201,"impl-Display-for-ParseMonthError"],[202,"impl-Display-for-OutOfRange"],[203,"impl-Debug-for-OutOfRange"],[213,"impl-From%3CSystemTime%3E-for-DateTime%3CLocal%3E"],[214,"impl-From%3CDateTime%3CLocal%3E%3E-for-DateTime%3CFixedOffset%3E"],[215,"impl-From%3CDateTime%3CFixedOffset%3E%3E-for-DateTime%3CUtc%3E"],[216,"impl-From%3CDateTime%3CLocal%3E%3E-for-DateTime%3CUtc%3E"],[217,"impl-From%3CDateTime%3CUtc%3E%3E-for-DateTime%3CLocal%3E"],[218,"impl-From%3CDateTime%3CFixedOffset%3E%3E-for-DateTime%3CLocal%3E"],[220,"impl-From%3CSystemTime%3E-for-DateTime%3CUtc%3E"],[221,"impl-From%3CDateTime%3CUtc%3E%3E-for-DateTime%3CFixedOffset%3E"],[234,"impl-FromStr-for-DateTime%3CLocal%3E"],[235,"impl-FromStr-for-DateTime%3CUtc%3E"],[236,"impl-FromStr-for-DateTime%3CFixedOffset%3E"],[347,"impl-Sub-for-Date%3CTz%3E"],[348,"impl-Sub%3CDuration%3E-for-Date%3CTz%3E"],[349,"impl-Sub%3CDuration%3E-for-DateTime%3CTz%3E"],[350,"impl-Sub%3CDuration%3E-for-DateTime%3CTz%3E"],[351,"impl-Sub-for-DateTime%3CTz%3E"],[352,"impl-Sub%3CDays%3E-for-DateTime%3CTz%3E"],[353,"impl-Sub%3CMonths%3E-for-DateTime%3CTz%3E"],[354,"impl-Sub%3C%26DateTime%3CTz%3E%3E-for-DateTime%3CTz%3E"],[355,"impl-Sub%3CFixedOffset%3E-for-DateTime%3CTz%3E"],[357,"impl-SubAssign%3CDuration%3E-for-DateTime%3CTz%3E"],[358,"impl-SubAssign%3CDuration%3E-for-DateTime%3CTz%3E"],[363,"impl-Sum-for-Duration"],[364,"impl-Sum%3C%26Duration%3E-for-Duration"],[636,"impl-Debug-for-DelayedFormat%3CI%3E"],[637,"impl-Display-for-DelayedFormat%3CI%3E"],[648,"impl-Display-for-ParseError"],[649,"impl-Debug-for-ParseError"],[832,"impl-Add%3CDuration%3E-for-NaiveDate"],[833,"impl-Add%3CDays%3E-for-NaiveDate"],[834,"impl-Add%3CMonths%3E-for-NaiveDate"],[835,"impl-Add%3CDuration%3E-for-NaiveDateTime"],[836,"impl-Add%3CMonths%3E-for-NaiveDateTime"],[837,"impl-Add%3CDuration%3E-for-NaiveDateTime"],[838,"impl-Add%3CDays%3E-for-NaiveDateTime"],[839,"impl-Add%3CFixedOffset%3E-for-NaiveDateTime"],[840,"impl-Add%3CDuration%3E-for-NaiveTime"],[841,"impl-Add%3CDuration%3E-for-NaiveTime"],[842,"impl-Add%3CFixedOffset%3E-for-NaiveTime"],[844,"impl-AddAssign%3CDuration%3E-for-NaiveDateTime"],[845,"impl-AddAssign%3CDuration%3E-for-NaiveDateTime"],[846,"impl-AddAssign%3CDuration%3E-for-NaiveTime"],[847,"impl-AddAssign%3CDuration%3E-for-NaiveTime"],[929,"impl-Display-for-NaiveDate"],[930,"impl-Debug-for-NaiveDate"],[933,"impl-Display-for-NaiveDateTime"],[934,"impl-Debug-for-NaiveDateTime"],[936,"impl-Display-for-NaiveTime"],[937,"impl-Debug-for-NaiveTime"],[1050,"impl-Sub-for-NaiveDate"],[1051,"impl-Sub%3CMonths%3E-for-NaiveDate"],[1052,"impl-Sub%3CDays%3E-for-NaiveDate"],[1053,"impl-Sub%3CDuration%3E-for-NaiveDate"],[1054,"impl-Sub%3CDays%3E-for-NaiveDateTime"],[1055,"impl-Sub%3CMonths%3E-for-NaiveDateTime"],[1056,"impl-Sub%3CFixedOffset%3E-for-NaiveDateTime"],[1057,"impl-Sub%3CDuration%3E-for-NaiveDateTime"],[1058,"impl-Sub%3CDuration%3E-for-NaiveDateTime"],[1059,"impl-Sub-for-NaiveDateTime"],[1060,"impl-Sub%3CDuration%3E-for-NaiveTime"],[1061,"impl-Sub%3CFixedOffset%3E-for-NaiveTime"],[1062,"impl-Sub-for-NaiveTime"],[1063,"impl-Sub%3CDuration%3E-for-NaiveTime"],[1065,"impl-SubAssign%3CDuration%3E-for-NaiveDateTime"],[1066,"impl-SubAssign%3CDuration%3E-for-NaiveDateTime"],[1067,"impl-SubAssign%3CDuration%3E-for-NaiveTime"],[1068,"impl-SubAssign%3CDuration%3E-for-NaiveTime"],[1188,"impl-Debug-for-FixedOffset"],[1189,"impl-Display-for-FixedOffset"],[1191,"impl-Display-for-Utc"],[1192,"impl-Debug-for-Utc"]]}],\
["combine",{"doc":"This crate contains parser combinators, roughly based on …","t":"PPKPRPRKGKRPPRKRKKIKRKRMNNNNNNHHHNNNNHHHQNNNHHQQMCNMHNCNNNNNNHNNNMNMNNHHHNNNNHHHQHNNNNNNCHQNHMNHMNHHHHHHMMNNHHHHNCQNNNNHHHNNNMMMNHHHNGFPGPPPIPPFPPOOOOPGPPPPPPPKFPRGPPKKGPPPFPFPIIKRKGFPFPGPMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNONMNNMNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNMMNNNNMMNNNNNNNNNMMNNNNNNNNNNMNNMNNNNMNNNNNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNNNMNNKRKRNNNNNCCCCNCNNCNNNNNNNNNNNNCCNCNNNNNNCNFFFOOONNNHOONNNNNNHHHONNNNNNHHNNNHNNNHHHCHHHHHHHHNNNNNNNNNNNNHHHHHHHHHHHHHHHHHFNHNNHNNHHNHNHHHHHHHHHNNNNHFKFFRRNNNMNNNNNNHNNNNNNNNNNNNHHMMMNNNNNNNNNNNNFFFFFFFKGFFIFFFRFPFFFFFFFPFKFONNNNNNNNNNNNNNNNNNNHHHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMONNNHHNNNNNNNNNNNNNNNNNNNNNNNHMHNNNNNNNNNNNNNNNNNNNNNNNHHHHHHHNNNNNNNNNNNNOOHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFNNNNNNNNNNNNNNNNNNNNHNNNNNNNNHNHNNNNNNNNNNNNNNNNHHFFNNNNNNNNHNNNNNNHNNNNNNNNPPFFFFFGFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNOHHHHHHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFFFFFFFFFFFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNNNNNNNNHOOHNOOHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHOONNOONNOOOOHHHHHHHHHHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOFOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOFFFFFFFFFFFFFFFFFFFFOOOOOOOOOOOOFOOFFFOFNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONOHHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHFFFFFFFFFFFFNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNHHHHNNNNNNNNNNNNHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHRFERFFFFRKKRKKKFKIKRNNNNNNNNNNNNCCMNNNNNNNNNNNNNNNNNNNNNNHHCNMNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNCMNNNNMNNNNCMNNNNNCCNNNNNNNNNNNNNNNNNNNNNNNNNNHMNNNNNHMNNNNHMNNNNHNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNFGPPNNNNNNNNNNNNNNNNNNNNNNNOOGFPGPPPIPPFPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNRKFRKRKFFNNNNNNMNNNNNNNNNNNONNNNNNNNNNNNNONNNNONNNNNMNNNNONMNNNNNNNNNNNNNNNNNNNNNMNNNMNNNPGPFPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNONNNNNNNNNNNNFNNNNNNNNNNNNNNNNOONNNNNNNN","n":["CommitErr","CommitOk","EasyParser","Err","Error","Ok","Output","ParseError","ParseResult","Parser","PartialState","PeekErr","PeekOk","Position","Positioned","Range","RangeStream","RangeStreamOnce","StdParseResult","Stream","StreamError","StreamOnce","Token","add","add_error","add_expected","add_message","add_unexpected","and","and_then","any","attempt","between","borrow","borrow_mut","boxed","by_ref","chainl1","chainr1","choice","choice","clear_expected","clone","clone_into","count","count_min_max","decode","dispatch","distance","easy","easy_parse","empty","eof","eq","error","expected","flat_map","fmt","from","from","from_error","from_str","into","into","into","into_other","is_partial","is_unexpected_end_of_input","iter","left","look_ahead","many","many1","map","map_input","merge","message","none_of","not_followed_by","one_of","opaque","optional","or","parse","parse_lazy","parse_stream","parse_stream_partial","parse_with_state","parser","parser","parser","partial_iter","position","position","position","produce","range","right","satisfy","satisfy_map","sep_by","sep_by1","sep_end_by","sep_end_by1","set_expected","set_position","silent","skip","skip_count","skip_count_min_max","skip_many","skip_many1","spanned","stream","struct_parser","then","then_partial","then_ref","to_owned","token","tokens","tokens_cmp","try_from","try_into","type_id","uncons","uncons_range","uncons_while","uncons_while1","unexpected","unexpected_any","value","with","Error","Errors","Expected","Info","Message","Other","Owned","ParseError","Range","Static","Stream","Token","Unexpected","errors","errors","position","position","CharacterBoundary","Commit","Commit","CommitErr","CommitOk","Eoi","Eoi","Err","Err","ErrorInfo","Format","Format","Format","Info","Ok","Ok","ParseError","ParseErrorInto","ParseResult","Peek","PeekErr","PeekOk","Range","Range","Static","Static","StdParseResult","StdParseResult2","StreamError","StreamError","StreamErrorInto","StringStreamError","Token","Token","Tracked","Unexpected","UnexpectedParse","UnexpectedParse","add","add","add","add_expected","add_message","add_unexpected","and_then","as_mut","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_expected","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","combine","combine_commit","description","description","empty","empty","empty","end_of_input","end_of_input","end_of_input","eq","eq","eq","eq","error","expected","expected_format","expected_format","expected_format","expected_range","expected_range","expected_range","expected_static_message","expected_token","expected_token","expected_token","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_error","from_error","from_error","into","into","into","into","into","into","into","into","into","into_commit","into_info","into_info","into_info","into_info","into_info","into_info","into_inner","into_other","into_other","into_other","into_other","into_other","into_other","into_other_error","into_other_error","into_other_error","into_other_error","into_other_error","into_other_error","into_peek","into_result","is_err","is_ok","is_peek","is_unexpected_end_of_input","is_unexpected_end_of_input","is_unexpected_end_of_input","is_unexpected_end_of_input","is_unexpected_end_of_input","is_unexpected_end_of_input","map","map","map_err","merge","merge","message","message_format","message_format","message_format","message_range","message_range","message_range","message_static_message","message_static_message","message_token","message_token","message_token","other","position","position","position","set_expected","set_expected","set_expected","set_position","set_position","set_position","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unexpected","unexpected_format","unexpected_format","unexpected_format","unexpected_range","unexpected_range","unexpected_range","unexpected_static_message","unexpected_token","unexpected_token","unexpected_token","EasyParser","Output","Parser","PartialState","add_error","and","and_then","boxed","by_ref","byte","char","choice","combinator","easy_parse","error","expected","flat_map","function","iter","left","map","map_input","message","or","parse","parse_lazy","parse_stream","parse_stream_partial","parse_with_state","partial_iter","range","repeat","right","sequence","silent","skip","spanned","then","then_partial","then_ref","token","with","TakeUntilByte","TakeUntilByte2","TakeUntilByte3","a","a","a","add_error","add_error","add_error","alpha_num","b","b","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte","bytes","bytes_cmp","c","clone","clone","clone","clone_into","clone_into","clone_into","crlf","digit","from","from","from","hex_digit","into","into","into","letter","lower","newline","num","oct_digit","space","spaces","tab","take_until_byte","take_until_byte2","take_until_byte3","take_until_bytes","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upper","be_f32","be_f64","be_i16","be_i32","be_i64","be_u16","be_u32","be_u64","le_f32","le_f64","le_i16","le_i32","le_i64","le_u16","le_u32","le_u64","Digit","add_error","alpha_num","borrow","borrow_mut","char","clone","clone_into","crlf","digit","from","hex_digit","into","letter","lower","newline","oct_digit","space","spaces","string","string_cmp","tab","to_owned","try_from","try_into","type_id","upper","Choice","ChoiceParser","Optional","Or","Output","PartialState","add_error","add_error","add_error","add_error_choice","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","choice","clone","clone","clone","clone_into","clone_into","clone_into","from","from","from","into","into","into","optional","or","parse_first","parse_mode_choice","parse_partial","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","AndThen","AnyPartialState","AnyPartialStateParser","AnySendPartialState","AnySendPartialStateParser","AnySendSyncPartialState","AnySendSyncPartialStateParser","Converter","Either","Factory","FlatMap","FnOpaque","FromStr","Ignore","InputConverter","InputInner","Lazy","Left","LookAhead","Map","MapInput","NoPartial","NotFollowedBy","Opaque","Recognize","Right","Spanned","StrLike","Try","_marker","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","and_then","any_partial_state","any_send_partial_state","any_send_sync_partial_state","attempt","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","convert","convert_error","converter","default","default","default","factory","flat_map","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_utf8","input_converter","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","lazy","look_ahead","map","map_input","no_partial","not_followed_by","opaque","parse_lazy","parse_lazy","parse_lazy","parse_lazy","parse_lazy","parse_lazy","parse_lazy","parse_lazy","parse_lazy","parse_stream","parse_stream","parse_stream","parser","parser","recognize","spanned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Expected","Message","Silent","Unexpected","add_error","add_error","add_error","add_error","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","expected","from","from","from","from","into","into","into","into","message","parse_lazy","silent","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unexpected","unexpected_any","EnvParser","FnParser","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","env_parser","from","from","into","into","parse_lazy","parse_lazy","parser","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Found","NotFound","Range","Recognize","RecognizeWithValue","Take","TakeFn","TakeRange","TakeUntilRange","TakeWhile","TakeWhile1","add_error","add_error","add_error","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","length_prefix","parse_lazy","parse_lazy","parser","range","recognize","recognize_with_value","take","take_fn","take_until_range","take_while","take_while1","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Chainl1","Chainr1","Count","CountMinMax","Escaped","EscapedState","Iter","Iterate","Many","Many1","RepeatUntil","SepBy","SepBy1","SepEndBy","SepEndBy1","SkipCount","SkipCountMinMax","SkipMany","SkipMany1","SkipRepeatUntil","SkipUntil","TakeUntil","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","add_error","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chainl1","chainr1","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count","count_min_max","default","end","end","escaped","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_result","iterate","many","many1","max","min","new","next","p","p","parse_lazy","parse_lazy","parser","parser","parser","parser","repeat_skip_until","repeat_until","sep_by","sep_by1","sep_end_by","sep_end_by1","skip_count","skip_count_min_max","skip_many","skip_many1","skip_until","take_until","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","B","Between","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","G","G","G","G","G","G","G","G","G","G","G","G","G","G","H","H","H","H","H","H","H","H","H","H","H","H","H","I","I","I","I","I","I","I","I","I","I","I","I","J","J","J","J","J","J","J","J","J","J","J","K","K","K","K","K","K","K","K","K","K","L","L","L","L","L","L","L","L","L","M","M","M","M","M","M","M","M","N","N","N","N","N","N","N","P","P","P","P","P","P","PartialState1","PartialState10","PartialState11","PartialState12","PartialState13","PartialState14","PartialState15","PartialState16","PartialState17","PartialState18","PartialState19","PartialState2","PartialState20","PartialState3","PartialState4","PartialState5","PartialState6","PartialState7","PartialState8","PartialState9","Q","Q","Q","Q","Q","R","R","R","R","S","S","S","Skip","T","T","Then","ThenPartial","ThenRef","U","With","add_error","add_error","add_error","add_error","add_error","add_error","between","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","open","parse_lazy","parser","skip","then","then_partial","then_ref","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with","Any","Eof","NoneOf","OneOf","Position","Produce","Satisfy","SatisfyMap","Token","Tokens","TokensCmp","Value","add_error","add_error","add_error","add_error","any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eof","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","none_of","one_of","parse_lazy","parse_lazy","parse_lazy","parse_lazy","parse_lazy","parse_lazy","parse_lazy","parse_lazy","parse_lazy","parse_lazy","parse_lazy","parse_lazy","position","produce","satisfy","satisfy_map","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","token","tokens","tokens_cmp","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","Checkpoint","CompleteStream","Decoder","Error","IteratorStream","MaybePartialStream","PartialStream","PointerOffset","Position","Positioned","Range","Range","RangeStream","RangeStreamOnce","ResetStream","SliceStream","Stream","StreamErrorFor","StreamOnce","Token","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf_reader","buffered","checkpoint","checkpoint","checkpoint","checkpoint","checkpoint","checkpoint","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","decode","decode_tokio","decoder","default","distance","distance","distance","distance","distance","easy","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","is_empty","is_partial","is_partial","is_partial","is_partial","len","new","new","next","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","position","position","position","position","position","position","range","range","range","range","range","read","reset","reset","reset","reset","reset","reset","span","state","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","translate_position","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","uncons","uncons","uncons","uncons","uncons","uncons","uncons","uncons_range","uncons_range","uncons_range","uncons_range","uncons_range","uncons_range","uncons_while","uncons_while","uncons_while","uncons_while","uncons_while","uncons_while","uncons_while1","uncons_while1","uncons_while1","uncons_while1","uncons_while1","uncons_while1","BufReader","Buffer","Bufferless","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer","consume","default","default","fill_buf","fmt","from","from","from","get_mut","get_ref","into","into","into","into_inner","new","read","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_capacity","Stream","borrow","borrow_mut","checkpoint","eq","fmt","from","into","is_partial","new","position","reset","try_from","try_into","type_id","uncons","Decoder","Error","Io","Parse","borrow","borrow","borrow_mut","borrow_mut","buffer","default","fmt","fmt","from","from","into","into","new","new_buffer","new_bufferless","position","to_string","try_from","try_from","try_into","try_into","type_id","type_id","error","position","Error","Errors","Expected","Info","Message","Other","Owned","ParseError","Range","Static","Stream","Token","Unexpected","add","add","add_error","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checkpoint","clear_expected","clone","clone","clone_into","clone_into","description","distance","empty","empty","empty","end_of_input","end_of_input","eq","eq","eq","eq","errors","errors","expected_format","expected_range","expected_static_message","expected_token","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_errors","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_error","from_error","from_errors","into","into","into","into","into_other","into_other","into_other","into_other_error","into_other_error","is_partial","is_unexpected_end_of_input","is_unexpected_end_of_input","is_unexpected_end_of_input","map_position","map_range","map_range","map_range","map_token","map_token","map_token","merge","merge","message_format","message_range","message_static_message","message_token","new","other","position","position","position","position","position","range","reset","set_expected","set_expected","set_expected","set_position","set_position","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uncons","uncons_range","uncons_while","uncons_while1","unexpected_format","unexpected_range","unexpected_static_message","unexpected_token","Checkpoint","DefaultPositioned","IndexPositioner","Position","Positioner","Positioner","RangePositioner","SourcePosition","Stream","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","checkpoint","checkpoint","checkpoint","checkpoint","checkpoint","clone","clone","clone","clone_into","clone_into","clone_into","cmp","column","default","default","distance","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","input","into","into","into","is_partial","line","new","new","new","new_with_position","partial_cmp","position","position","position","position","position","positioner","range","reset","reset","reset","reset","reset","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uncons","uncons_range","uncons_while","uncons_while1","update","update","update","update","update_range","update_range","update_range","with_positioner","EndOfInput","Error","Io","Stream","Unexpected","add","borrow","borrow","borrow_mut","borrow_mut","empty","end_of_input","eq","expected_format","expected_range","expected_token","fmt","fmt","from","from","from_error","into","into","into_other","into_other","is_unexpected_end_of_input","is_unexpected_end_of_input","message_format","message_range","message_token","new","set_expected","set_position","to_string","try_from","try_from","try_into","try_into","type_id","type_id","uncons","unexpected_format","unexpected_range","unexpected_token","Span","Stream","borrow","borrow","borrow_mut","borrow_mut","checkpoint","clone","clone","clone_into","clone_into","cmp","default","distance","end","eq","eq","fmt","fmt","from","from","from","from","from","from","into","into","is_partial","map","partial_cmp","position","range","reset","start","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","uncons","uncons_range","uncons_while","uncons_while1","Stream","borrow","borrow_mut","checkpoint","clone","clone_into","cmp","distance","eq","fmt","from","into","is_partial","partial_cmp","position","range","reset","state","stream","to_owned","try_from","try_into","type_id","uncons","uncons_range","uncons_while","uncons_while1"],"q":[[0,"combine"],[133,"combine::easy"],[150,"combine::error"],[393,"combine::parser"],[435,"combine::parser::byte"],[497,"combine::parser::byte::num"],[513,"combine::parser::char"],[540,"combine::parser::choice"],[586,"combine::parser::combinator"],[874,"combine::parser::error"],[928,"combine::parser::function"],[954,"combine::parser::range"],[1052,"combine::parser::repeat"],[1317,"combine::parser::sequence"],[1789,"combine::parser::token"],[1949,"combine::stream"],[2131,"combine::stream::buf_reader"],[2167,"combine::stream::buffered"],[2183,"combine::stream::decoder"],[2210,"combine::stream::decoder::Error"],[2212,"combine::stream::easy"],[2349,"combine::stream::position"],[2438,"combine::stream::read"],[2482,"combine::stream::span"],[2528,"combine::stream::state"],[2555,"core::default"],[2556,"core::convert"],[2557,"core::result"],[2558,"core::ops::function"],[2559,"alloc::boxed"],[2560,"core::clone"],[2561,"core::iter::traits::collect"],[2562,"core::cmp"],[2563,"core::fmt"],[2564,"core::fmt"],[2565,"core::cmp"],[2566,"core::ops::function"],[2567,"core::fmt"],[2568,"core::marker"],[2569,"core::marker"],[2570,"core::borrow"],[2571,"core::marker"],[2572,"core::cmp"],[2573,"std::io::error"],[2574,"alloc::vec"]],"d":["The parser failed other parse alternatives will not be …","The parser has succeeded and has committed to this parse. …","Provides the <code>easy_parse</code> method which provides good error …","Contains the error value","","Contains the success value","The type which is returned if the parser is successful.","Trait which defines a combine parse error.","A <code>Result</code> type which has the committed status flattened …","By implementing the <code>Parser</code> trait a type says that it can …","Determines the state necessary to resume parsing after …","The parser failed but other parse alternatives may be …","The parser has succeeded and has not committed to this …","Type which represents the position in a stream. <code>Ord</code> is …","A type which has a position.","The type of a range of items yielded from this stream. …","A <code>RangeStream</code> is an extension of <code>Stream</code> which allows for …","A <code>RangeStream</code> is an extension of <code>StreamOnce</code> which allows …","A type alias over the specific <code>Result</code> type used by parsers …","A stream of tokens which can be duplicated","","<code>StreamOnce</code> represents a sequence of items that can be …","The type of items which is yielded from this stream.","Adds a <code>StreamError</code> to <code>self</code>.","Adds the first error that would normally be returned by …","","","","Parses with <code>self</code> followed by <code>p</code>. Succeeds if both parsers …","Parses with <code>self</code> and applies <code>f</code> on the result if <code>self</code> …","Parses any token.","<code>attempt(p)</code> behaves as <code>p</code> except it always acts as <code>p</code> peeked …","Parses <code>open</code> followed by <code>parser</code> followed by <code>close</code>. Returns …","","","Turns the parser into a trait object by putting it in a <code>Box</code>…","Borrows a parser instead of consuming it.","Parses <code>p</code> 1 or more times separated by <code>op</code>. The value …","Parses <code>p</code> one or more times separated by <code>op</code>. The value …","Takes a tuple, a slice or an array of parsers and tries to …","Takes a number of parsers and tries to apply them each in …","Removes any expected errors currently in <code>self</code>","","","Parses <code>parser</code> from zero up to <code>count</code> times.","Parses <code>parser</code> from <code>min</code> to <code>max</code> times (including <code>min</code> and <code>max</code>…","Parses an instance of <code>std::io::Read</code> as a <code>&amp;[u8]</code> without …","<code>dispatch!</code> allows a parser to be constructed depending on …","Returns the distance between <code>self</code> and <code>end</code>. The returned …","Stream wrapper which provides an informative and easy to …","Entry point of the parser. Takes some input and tries to …","Constructs an empty error.","Succeeds only if the stream is at end of input, fails …","","Error types and traits which define what kind of errors …","Parses with <code>self</code> and if it fails without consuming any …","Uses <code>f</code> to map over the output of <code>self</code>. If <code>f</code> returns an …","","Returns the argument unchanged.","","Creates a <code>ParseError</code> from a single <code>Self::StreamError</code>","Takes a parser that outputs a string like value (<code>&amp;str</code>, …","Calls <code>U::from(self)</code>.","","","Does a best-effort conversion of <code>self</code> into another …","Returns <code>true</code> if this stream only contains partial input.","","Creates an iterator from a parser and a state. Can be used …","Wraps the parser into the <code>Either</code> enum which allows …","<code>look_ahead(p)</code> acts as <code>p</code> but doesn’t consume input on …","Parses <code>p</code> zero or more times returning a collection with …","Parses <code>p</code> one or more times returning a collection with the …","Uses <code>f</code> to map over the parsed value.","","Merges two errors. If they exist at the same position the …","Parses with <code>self</code> and if it fails, adds the message <code>msg</code> to …","Extract one token and succeeds if it is not part of <code>tokens</code>.","Succeeds only if <code>parser</code> fails. Never consumes any input.","Extract one token and succeeds if it is part of <code>tokens</code>.","Convenience macro over <code>opaque</code>.","Parses <code>parser</code> and outputs <code>Some(value)</code> if it succeeds, <code>None</code> …","Returns a parser which attempts to parse using <code>self</code>. If …","Entry point of the parser. Takes some input and tries to …","Parses using the stream <code>input</code> by calling <code>Stream::uncons</code> …","Parses using the stream <code>input</code> by calling <code>Stream::uncons</code> …","Like <code>parse_stream</code> but supports partial parsing.","Entry point of the parser when using partial parsing. …","A collection of both concrete parsers as well as parser …","Wraps a function, turning it into a parser.","Declares a named parser which can easily be reused.","Creates an iterator from a parser and a state. Can be used …","Parser which just returns the current position in the …","Returns the current position of the stream.","","Always returns the value produced by calling <code>f</code>.","Returns the entire range of <code>self</code>","Wraps the parser into the <code>Either</code> enum which allows …","Parses a token and succeeds depending on the result of …","Parses a token and passes it to <code>predicate</code>. If <code>predicate</code> …","Parses <code>parser</code> zero or more time separated by <code>separator</code>, …","Parses <code>parser</code> one or more time separated by <code>separator</code>, …","Parses <code>parser</code> zero or more times separated and ended by …","Parses <code>parser</code> one or more times separated and ended by …","Sets <code>info</code> as the <em>only</em> <code>Expected</code> error of <code>self</code>","Sets the position of this <code>ParseError</code>","Parses with <code>self</code>, if it fails without consuming any input …","Discards the value of the <code>p</code> parser and returns the value …","Parses <code>parser</code> from zero up to <code>count</code> times skipping the …","Parses <code>parser</code> from <code>min</code> to <code>max</code> times (including <code>min</code> and <code>max</code>)","Parses <code>p</code> zero or more times ignoring the result.","Parses <code>p</code> one or more times ignoring the result.","Marks errors produced inside the <code>self</code> parser with the span …","Streams are similar to the <code>Iterator</code> trait in that they …","Sequences multiple parsers and builds a struct out of them.","Parses using <code>self</code> and then passes the value to <code>f</code> which …","Variant of <code>then</code> which parses using <code>self</code> and then passes …","Parses using <code>self</code> and then passes a reference to the value …","","Parses a character and succeeds if the character is equal …","Parses multiple tokens.","Parses multiple tokens.","","","","Takes a stream and removes its first token, yielding the …","Takes <code>size</code> elements from the stream. Fails if the length …","Takes items from stream, testing each one with <code>predicate</code>. …","Takes items from stream, testing each one with <code>predicate</code> …","Always fails with <code>message</code> as an unexpected error. Never …","Always fails with <code>message</code> as an unexpected error. Never …","Always returns the value <code>v</code> without consuming any input.","Discards the value of the <code>self</code> parser and returns the …","Enum used to store information about an error that has …","Struct which hold information about an error that occurred …","Error indicating that the parser expected something else","Enum holding error information. Variants are defined for …","Generic message","Variant for containing other types of errors","","Convenience alias over <code>Errors</code> for <code>StreamOnce</code> types which …","","","","","Error indicating an unexpected token has been encountered …","A vector containing specific information on what errors …","A vector containing specific information on what errors …","The position where the error occurred","The position where the error occurred","","Enum used to indicate if a parser committed any items of …","Constructor indicating that the parser has committed to …","The parser failed other parse alternatives will not be …","The parser has succeeded and has committed to this parse. …","","","Contains the error value","Contains the error value","Trait for types which can be used to construct error …","Newtype which constructs an <code>Info::Format</code> through <code>ErrorInfo</code>","","","","Contains the success value","Contains the success value","Trait which defines a combine parse error.","Defines a conversion between two parse error types.","A <code>Result</code> type which has the committed status flattened …","Constructor indicating that the parser has not committed …","The parser failed but other parse alternatives may be …","The parser has succeeded and has not committed to this …","Newtype which constructs an <code>Info::Range</code> through <code>ErrorInfo</code>","","Newtype which constructs an <code>Info::Static</code> through <code>ErrorInfo</code> …","","A type alias over the specific <code>Result</code> type used by parsers …","","<code>StreamError</code> represents a single error returned from a …","","Defines a conversion between two stream error types.","","Newtype which constructs an <code>Info::Token</code> through <code>ErrorInfo</code>","","Error wrapper which lets parsers track which parser in a …","","","","Adds a <code>StreamError</code> to <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Removes any expected errors currently in <code>self</code>","","","","","","","","","","","Combines the <code>Commit</code> flags from <code>self</code> and the result of <code>f</code>.","","","","Constructs an empty error.","","","","","","","","","","The error returned","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Creates a <code>ParseError</code> from a single <code>Self::StreamError</code>","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts <code>self</code> into the <code>Commit</code> state.","","","","","","","Extracts the contained value.","Converts <code>self</code> into a different <code>StreamError</code> type.","Does a best-effort conversion of <code>self</code> into another …","","","","","","","","","","","Converts <code>self</code> into the <code>Peek</code> state.","","","","Returns true if <code>self</code> is peek.","","","","","","","Maps over the contained value without changing the …","","","Merges two errors. If they exist at the same position the …","","","","","","","","","","","","","","","","","","Sets <code>info</code> as the <em>only</em> <code>Expected</code> error of <code>self</code>","","","Sets the position of this <code>ParseError</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Provides the <code>easy_parse</code> method which provides good error …","The type which is returned if the parser is successful.","By implementing the <code>Parser</code> trait a type says that it can …","Determines the state necessary to resume parsing after …","Adds the first error that would normally be returned by …","Parses with <code>self</code> followed by <code>p</code>. Succeeds if both parsers …","Parses with <code>self</code> and applies <code>f</code> on the result if <code>self</code> …","Turns the parser into a trait object by putting it in a <code>Box</code>…","Borrows a parser instead of consuming it.","Module containing parsers specialized on byte streams.","Module containing parsers specialized on character streams.","Combinators which take one or more parsers and attempts to …","Various combinators which do not fit anywhere else.","Entry point of the parser. Takes some input and tries to …","Parsers which cause errors or modifies the returned error …","Parses with <code>self</code> and if it fails without consuming any …","Uses <code>f</code> to map over the output of <code>self</code>. If <code>f</code> returns an …","Parsers constructor from regular functions","Creates an iterator from a parser and a state. Can be used …","Wraps the parser into the <code>Either</code> enum which allows …","Uses <code>f</code> to map over the parsed value.","","Parses with <code>self</code> and if it fails, adds the message <code>msg</code> to …","Returns a parser which attempts to parse using <code>self</code>. If …","Entry point of the parser. Takes some input and tries to …","Parses using the stream <code>input</code> by calling <code>Stream::uncons</code> …","Parses using the stream <code>input</code> by calling <code>Stream::uncons</code> …","Like <code>parse_stream</code> but supports partial parsing.","Entry point of the parser when using partial parsing. …","Creates an iterator from a parser and a state. Can be used …","Module containing zero-copy parsers.","Combinators which take one or more parsers and applies …","Wraps the parser into the <code>Either</code> enum which allows …","Combinators which take multiple parsers and applies them …","Parses with <code>self</code>, if it fails without consuming any input …","Discards the value of the <code>p</code> parser and returns the value …","Marks errors produced inside the <code>self</code> parser with the span …","Parses using <code>self</code> and then passes the value to <code>f</code> which …","Variant of <code>then</code> which parses using <code>self</code> and then passes …","Parses using <code>self</code> and then passes a reference to the value …","Parsers working with single stream items.","Discards the value of the <code>self</code> parser and returns the …","","","","","","","","","","Parses either an ASCII alphabet letter or digit (a–z, …","","","","","","","","","Parses a byte and succeeds if the byte is equal to <code>c</code>.","Parses the bytes <code>s</code>.","Parses the bytes <code>s</code> using <code>cmp</code> to compare each token.","","","","","","","","Parses carriage return and newline (<code>&amp;b&quot;\\\\r\\\\n&quot;</code>), returning …","Parses a base-10 digit (0–9).","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Parses an ASCII hexdecimal digit (accepts both uppercase …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Parses an ASCII alphabet letter (a–z, A–Z).","Parses an lowercase ASCII letter (a–z).","Parses a newline byte (<code>b&#39;\\\\n&#39;</code>).","Parsers for decoding numbers in big-endian or …","Parses an octal digit.","Parses a <code>b&#39; &#39;</code>, <code>b&#39;\\\\t&#39;</code>, <code>b&#39;\\\\n&#39;</code> or <code>&#39;b\\\\&#39;r&#39;</code>.","Skips over <code>space</code> zero or more times","Parses a tab byte (<code>b&#39;\\\\t&#39;</code>).","Zero-copy parser which reads a range of 0 or more tokens …","Zero-copy parser which reads a range of 0 or more tokens …","Zero-copy parser which reads a range of 0 or more tokens …","Zero-copy parser which reads a range of 0 or more tokens …","","","","","","","","","","","","","Parses an uppercase ASCII letter (A–Z).","Reads a i32 out of the byte stream with the specified …","Reads a i64 out of the byte stream with the specified …","Reads a i16 out of the byte stream with the specified …","Reads a i32 out of the byte stream with the specified …","Reads a i64 out of the byte stream with the specified …","Reads a u16 out of the byte stream with the specified …","Reads a u32 out of the byte stream with the specified …","Reads a u64 out of the byte stream with the specified …","Reads a i32 out of the byte stream with the specified …","Reads a i64 out of the byte stream with the specified …","Reads a i16 out of the byte stream with the specified …","Reads a i32 out of the byte stream with the specified …","Reads a i64 out of the byte stream with the specified …","Reads a u16 out of the byte stream with the specified …","Reads a u32 out of the byte stream with the specified …","Reads a u64 out of the byte stream with the specified …","","","Parses either an alphabet letter or digit according to …","","","Parses a character and succeeds if the character is equal …","","","Parses carriage return and newline (<code>&quot;\\\\r\\\\n&quot;</code>), returning the …","Parses a base-10 digit.","Returns the argument unchanged.","Parses a hexdecimal digit with uppercase and lowercase.","Calls <code>U::from(self)</code>.","Parses an alphabet letter according to …","Parses an lowercase letter according to …","Parses a newline character (<code>&#39;\\\\n&#39;</code>).","Parses an octal digit.","Parse a single whitespace according to …","Skips over zero or more spaces according to …","Parses the string <code>s</code>.","Parses the string <code>s</code>, using <code>cmp</code> to compare each character.","Parses a tab character (<code>&#39;\\\\t&#39;</code>).","","","","","Parses an uppercase letter according to …","","<code>ChoiceParser</code> represents a parser which may parse one of …","","","","","","","","","","","","","","","Takes a tuple, a slice or an array of parsers and tries to …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Parses <code>parser</code> and outputs <code>Some(value)</code> if it succeeds, <code>None</code> …","Equivalent to <code>p1.or(p2)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Alias over <code>Opaque</code> where the function can be a plain …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Equivalent to <code>p.and_then(f)</code>.","Returns a parser where <code>P::PartialState</code> is boxed. Useful as …","Returns a parser where <code>P::PartialState</code> is boxed. Useful as …","Returns a parser where <code>P::PartialState</code> is boxed. Useful as …","<code>attempt(p)</code> behaves as <code>p</code> except it always acts as <code>p</code> peeked …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs the parser lazily on each <code>parse_*</code> call. This is …","Equivalent to <code>p.flat_map(f)</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Takes a parser that outputs a string like value (<code>&amp;str</code>, …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs the parser lazily on each <code>parse_*</code> call. Can be …","<code>look_ahead(p)</code> acts as <code>p</code> but doesn’t consume input on …","Equivalent to <code>p.map(f)</code>.","Equivalent to <code>p.map_input(f)</code>.","","Succeeds only if <code>parser</code> fails. Never consumes any input.","Creates a parser from a function which takes a function …","","","","","","","","","","","","","","","Constructs a parser which returns the tokens parsed by …","Equivalent to <code>p.spanned()</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Equivalent to <code>p.expected(info)</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Equivalent to <code>p1.message(msg)</code>.","","Equivalent to <code>p.silent()</code>.","","","","","","","","","","","","","","","","","Always fails with <code>message</code> as an unexpected error. Never …","Always fails with <code>message</code> as an unexpected error. Never …","","","","","","","","","","","Constructs a parser out of an environment and a function …","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Wraps a function, turning it into a parser.","","","","","","","","","Found the pattern at this offset","Did not find the pattern but the parser can skip ahead to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Takes a parser which parses a <code>length</code> then extracts a range …","","","","Zero-copy parser which reads a range of length <code>i.len()</code> and …","Zero-copy parser which returns committed input range.","Zero-copy parser which returns a pair: (committed input …","Zero-copy parser which reads a range of length <code>n</code>.","Searches the entire range using <code>searcher</code> and then consumes …","Zero-copy parser which reads a range of 0 or more tokens …","Zero-copy parser which reads a range of 0 or more tokens …","Zero-copy parser which reads a range of 1 or more tokens …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses <code>p</code> 1 or more times separated by <code>op</code>. The value …","Parses <code>p</code> one or more times separated by <code>op</code>. The value …","","","","","","","","","","","","","","","","","","","","","","","Parses <code>parser</code> from zero up to <code>count</code> times.","","","Parses <code>parser</code> from <code>min</code> to <code>max</code> times (including <code>min</code> and <code>max</code>…","","","","Parses an escaped string by first applying <code>parser</code> which …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Converts the iterator to a <code>ParseResult</code>, returning <code>Ok</code> if …","","Parses <code>p</code> zero or more times returning a collection with …","Parses <code>p</code> one or more times returning a collection with the …","","","","","","","","","","","","","Skips input until <code>end</code> is encountered or <code>end</code> indicates that …","","Parses <code>parser</code> zero or more time separated by <code>separator</code>, …","Parses <code>parser</code> one or more time separated by <code>separator</code>, …","Parses <code>parser</code> zero or more times separated and ended by …","Parses <code>parser</code> one or more times separated and ended by …","Parses <code>parser</code> from zero up to <code>count</code> times skipping the …","Parses <code>parser</code> from <code>min</code> to <code>max</code> times (including <code>min</code> and <code>max</code>)","Parses <code>p</code> zero or more times ignoring the result.","Parses <code>p</code> one or more times ignoring the result.","Skips input until <code>end</code> is encountered or <code>end</code> indicates that …","Takes input until <code>end</code> is encountered or <code>end</code> indicates that …arses <code>open</code> followed by <code>parser</code> followed by <code>close</code>. Returns …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Equivalent to <code>p.then(f)</code>.","Equivalent to <code>p.then_partial(f)</code>.","Equivalent to <code>p.then_ref(f)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Equivalent to <code>p1.with(p2)</code>.","","","","","","","","","","","","","","","","","Parses any token.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Succeeds only if the stream is at end of input, fails …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Extract one token and succeeds if it is not part of <code>tokens</code>.","Extract one token and succeeds if it is part of <code>tokens</code>.","","","","","","","","","","","","","Parser which just returns the current position in the …","Always returns the value produced by calling <code>f</code>.","Parses a token and succeeds depending on the result of …","Parses a token and passes it to <code>predicate</code>. If <code>predicate</code> …","","","","","","","","","","","","","Parses a character and succeeds if the character is equal …","Parses multiple tokens.","Parses multiple tokens.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Always returns the value <code>v</code> without consuming any input.","","Stream type which indicates that the stream is complete if …","","","Wrapper around iterators which allows them to be treated …","","Stream type which indicates that the stream is partial if …","Newtype around a pointer offset into a slice stream (<code>&amp;[T]</code>/…","Type which represents the position in a stream. <code>Ord</code> is …","A type which has a position.","Trait representing a range of elements.","The type of a range of items yielded from this stream. …","A <code>RangeStream</code> is an extension of <code>Stream</code> which allows for …","A <code>RangeStream</code> is an extension of <code>StreamOnce</code> which allows …","A <code>StreamOnce</code> which can create checkpoints which the stream …","Newtype for constructing a stream from a slice where the …","A stream of tokens which can be duplicated","Convenience alias over the <code>StreamError</code> for the input …","<code>StreamOnce</code> represents a sequence of items that can be …","The type of items which is yielded from this stream.","","","","","","","","","","","","","","Stream wrapper which provides a <code>ResetStream</code> impl for …","Creates a <code>Checkpoint</code> at the current position which can be …","","","","","","","","","","","","","","","","","","","","","","","Decodes <code>input</code> using <code>parser</code>.","Decodes <code>input</code> using <code>parser</code>. Like <code>decode</code> but works directly …","","","Returns the distance between <code>self</code> and <code>end</code>. The returned …","","","","","Stream wrapper which provides an informative and easy to …","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the range does not contain any elements (…","Returns <code>true</code> if this stream only contains partial input.","","","","Returns the remaining length of <code>self</code>. The returned length …","","Converts an <code>Iterator</code> into a stream.","","","","","","","Stream wrapper which provides more detailed position …","Returns the current position of the stream.","","","","","Returns the entire range of <code>self</code>","","","","","Stream wrapper allowing <code>std::io::Read</code> to be used","Attempts to reset the stream to an earlier position.","","","","","","","Stream wrapper allowing custom state to be used.","","","","","","","","Converts the pointer-based position into an indexed …","","","","","","","","","","","","","","","","","","","","Takes a stream and removes its first token, yielding the …","","","","","","","Takes <code>size</code> elements from the stream. Fails if the length …","","","","","Removes items from the input while <code>predicate</code> returns <code>true</code>.","Takes items from stream, testing each one with <code>predicate</code>. …","","","","","Takes items from stream, testing each one with <code>predicate</code> …","Takes items from stream, testing each one with <code>predicate</code> …","","","","","<code>BufReader</code> used by <code>Decoder</code> when it is constructed with …","Marker used by <code>Decoder</code> for an internal buffer","Marker used by <code>Decoder</code> for an external buffer","","","","","","","Returns a reference to the internally buffered data.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a mutable reference to the underlying reader.","Gets a reference to the underlying reader.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>BufWriter</code>, returning the underlying reader.","Creates a new <code>BufReader</code> with a default buffer capacity. …","","","","","","","","","","","Creates a new <code>BufReader</code> with the specified buffer capacity.","<code>Stream</code> which buffers items from an instance of <code>StreamOnce</code> …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Constructs a new <code>BufferedStream</code> from a <code>StreamOnce</code> instance …","","","","","","","Used together with the <code>decode!</code> macro","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new <code>Decoder</code> with an internal buffer. Allows …","Constructs a new <code>Decoder</code> with an internal buffer. Allows …","Constructs a new <code>Decoder</code> without an internal buffer. …","","","","","","","","","","","Enum used to store information about an error that has …","Struct which hold information about an error that occurred …","Error indicating that the parser expected something else","Enum holding error information. Variants are defined for …","Generic message","Variant for containing other types of errors","","Convenience alias over <code>Errors</code> for <code>StreamOnce</code> types which …","","","","","Error indicating an unexpected token has been encountered …","","","Adds an error if <code>error</code> does not exist in this <code>ParseError</code> …","","","","","","","","","","","","","","","","","","Constructs an error with no other information than the …","","Returns the <code>end_of_input</code> error.","Constructs an end of input error. Should be returned by …","","","","","A vector containing specific information on what errors …","A vector containing specific information on what errors …","","","","","","","","","","","","Formats a slice of errors in a human readable way.","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Constructs a <code>ParseError</code> with multiple causes.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Maps the position to a new value","","","Maps all range variants to a new value.","","","Maps all token variants to a new value","Merges two <code>ParseError</code>s. If they exist at the same position …","","","","","","Constructs a new <code>ParseError</code> which occurred at <code>position</code>.","","","","","The position where the error occurred","The position where the error occurred","","","","Removes all <code>Expected</code> errors in <code>self</code> and adds <code>info</code> instead.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Defines a default <code>Positioner</code> type for a particular <code>Stream</code> …","The <code>IndexPositioner&lt;Item, Range&gt;</code> struct maintains the …","The type which keeps track of the position","Trait for tracking the current position of a <code>Stream</code>.","","Trait for tracking the current position of a <code>RangeStream</code>.","Struct which represents a position in a source file.","The <code>Stream&lt;Input&gt;</code> struct maintains the current position in …","","","","","","","","","","","","","","","","","","","Current column of the input","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The input stream used when items are requested","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Current line of the input","Creates a new <code>Stream&lt;Input, X&gt;</code> from an input stream and …","","","","","Returns the current position","","","","","The positioner used to update the current position","","","","","","","","","","","","","","","","","","","","","","","","Updates the position given that <code>token</code> has been taken from …","","","","Updates the position given that <code>range</code> has been taken from …","","","Creates a new <code>Stream&lt;Input, X&gt;</code> from an input stream and a …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Creates a <code>StreamOnce</code> instance from a value implementing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[24,24,0,66,49,66,7,0,0,0,7,24,24,49,0,49,0,0,0,0,2,0,49,2,7,2,2,2,7,7,0,0,0,24,24,7,7,0,0,0,0,2,24,24,0,0,0,0,30,0,31,2,0,24,0,7,7,24,24,24,2,0,24,24,24,2,49,2,7,7,0,0,0,7,7,2,7,0,0,0,0,0,7,7,7,7,7,7,0,0,0,7,0,68,2,0,30,7,0,0,0,0,0,0,2,2,7,7,0,0,0,0,7,0,0,7,7,7,24,0,0,0,24,24,24,49,30,30,30,0,0,0,7,0,0,208,0,208,208,211,0,211,211,0,211,208,32,209,32,209,97,0,44,24,24,96,97,66,41,0,0,98,10,0,66,41,0,0,0,44,24,24,0,98,0,98,0,0,0,2,0,0,0,98,0,96,0,97,2,96,97,2,2,2,24,44,44,24,105,103,102,104,98,44,96,97,8,105,103,102,104,98,44,96,97,8,2,98,44,96,97,8,98,44,96,97,8,44,44,96,97,2,96,97,4,96,97,44,96,97,8,8,4,4,96,97,4,96,97,4,4,96,97,98,44,96,96,97,97,8,105,103,102,104,98,98,98,98,98,98,98,98,44,96,97,8,8,8,2,96,97,105,103,102,104,98,44,96,97,8,44,10,105,103,102,104,98,44,4,2,96,96,97,97,109,111,96,96,97,97,44,24,24,24,44,4,2,96,96,97,97,44,24,24,2,44,4,4,96,97,4,96,97,4,97,4,96,97,4,2,96,97,2,96,97,2,96,97,98,44,96,97,8,96,97,105,103,102,104,98,44,96,97,8,105,103,102,104,98,44,96,97,8,105,103,102,104,98,44,96,97,8,4,4,96,97,4,96,97,4,4,96,97,0,7,0,7,7,7,7,7,7,0,0,0,0,31,0,7,7,0,7,7,7,7,7,7,7,7,7,7,7,7,0,0,7,0,7,7,7,7,7,7,0,7,0,0,0,116,118,119,116,118,119,0,118,119,116,118,119,116,118,119,0,0,0,119,116,118,119,116,118,119,0,0,116,118,119,0,116,118,119,0,0,0,0,0,0,0,0,0,0,0,0,116,118,119,116,118,119,116,118,119,116,118,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,0,129,129,0,129,129,0,0,129,0,129,0,0,0,0,0,0,0,0,0,129,129,129,129,0,0,0,0,0,23,23,22,64,63,23,22,64,63,22,64,63,0,22,64,63,22,64,63,22,64,63,22,64,63,0,0,23,23,23,22,64,63,22,64,63,22,64,63,22,64,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,141,0,52,0,0,0,0,0,0,0,52,0,0,0,146,52,130,131,132,133,61,17,53,56,57,37,12,134,135,136,137,42,138,84,0,0,0,0,0,52,130,131,132,133,146,61,17,53,56,57,37,12,134,135,142,143,144,136,137,42,138,84,52,130,131,132,133,146,61,17,53,56,57,37,12,134,135,142,143,144,136,137,42,138,84,61,17,53,56,57,37,12,134,135,136,137,138,84,61,17,53,56,57,37,12,134,135,136,137,138,84,141,141,146,142,143,144,0,0,52,130,131,132,133,146,61,17,53,56,57,37,12,134,135,142,143,144,136,137,42,138,84,0,145,0,52,130,131,132,133,146,61,17,53,56,57,37,12,134,135,142,143,144,136,137,42,138,84,0,0,0,0,0,0,0,52,130,131,132,133,53,135,136,138,17,136,138,146,42,0,0,61,17,53,56,57,37,12,134,135,136,137,138,84,52,130,131,132,133,146,61,17,53,56,57,37,12,134,135,142,143,144,136,137,42,138,84,52,130,131,132,133,146,61,17,53,56,57,37,12,134,135,142,143,144,136,137,42,138,84,52,130,131,132,133,146,61,17,53,56,57,37,12,134,135,142,143,144,136,137,42,138,84,0,0,0,0,93,58,36,78,93,58,36,78,93,58,36,78,93,58,36,78,93,58,36,78,0,93,58,36,78,93,58,36,78,0,93,0,93,58,36,78,93,58,36,78,93,58,36,78,93,58,36,78,0,0,0,0,65,147,65,147,65,147,65,147,0,65,147,65,147,65,147,0,65,147,65,147,65,147,65,147,151,151,0,0,0,0,0,0,0,0,0,148,149,150,148,152,155,156,154,153,149,150,151,148,152,155,156,154,153,149,150,151,149,150,149,150,151,151,148,152,155,156,154,153,149,150,151,151,148,152,155,156,154,153,149,150,151,0,148,152,149,0,0,0,0,0,0,0,0,149,150,148,152,155,156,154,153,149,150,151,148,152,155,156,154,153,149,150,151,148,152,155,156,154,153,149,150,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,27,80,29,81,54,55,82,83,73,74,75,76,20,21,158,159,51,157,164,27,80,29,81,54,55,82,83,73,74,75,76,20,21,160,158,161,159,162,51,157,164,27,80,29,81,54,55,82,83,73,74,75,76,20,21,160,158,161,159,162,0,0,29,54,55,73,74,75,76,20,21,160,161,29,54,55,73,74,75,76,20,21,160,161,0,27,80,0,162,158,159,0,51,157,164,27,80,29,81,54,55,82,83,73,74,75,76,20,21,160,158,161,159,162,51,157,164,27,80,29,81,54,55,82,83,73,74,75,76,20,21,160,158,161,159,162,51,51,0,0,0,81,81,51,51,82,83,157,21,27,80,81,159,0,0,0,0,0,0,0,0,0,0,0,0,29,54,55,73,74,75,76,20,21,160,161,51,157,164,27,80,29,81,54,55,82,83,73,74,75,76,20,21,160,158,161,159,162,51,157,164,27,80,29,81,54,55,82,83,73,74,75,76,20,21,160,158,161,159,162,51,157,164,27,80,29,81,54,55,82,83,73,74,75,76,20,21,160,158,161,159,162,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,0,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,171,172,173,174,175,176,177,178,179,180,181,182,183,184,172,173,174,175,176,177,178,179,180,181,182,183,184,173,174,175,176,177,178,179,180,181,182,183,184,174,175,176,177,178,179,180,181,182,183,184,175,176,177,178,179,180,181,182,183,184,176,177,178,179,180,181,182,183,184,177,178,179,180,181,182,183,184,178,179,180,181,182,183,184,179,180,181,182,183,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,181,182,183,184,181,182,183,184,182,183,184,0,183,184,0,0,0,184,0,95,79,18,85,86,87,0,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,95,79,18,85,86,87,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,95,79,18,85,86,87,95,79,18,85,86,87,95,79,18,85,86,87,18,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,95,79,18,85,86,87,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,95,79,18,85,86,87,18,95,18,0,0,0,0,95,79,18,85,86,87,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,95,79,18,85,86,87,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,95,79,18,85,86,87,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,95,79,18,85,86,87,0,0,0,0,0,0,0,0,0,0,0,0,0,88,89,62,33,0,16,70,71,88,89,90,67,62,59,94,69,33,16,70,71,88,89,90,67,62,59,94,69,33,16,70,71,88,89,90,67,62,59,94,69,33,16,70,71,88,89,90,67,62,59,94,69,33,0,16,70,71,88,89,90,67,62,59,94,69,33,16,70,71,88,89,90,67,62,59,94,69,33,0,0,16,70,71,88,89,90,67,62,59,94,69,33,0,0,0,0,16,70,71,88,89,90,67,62,59,94,69,33,0,0,0,16,70,71,88,89,90,67,62,59,94,69,33,16,70,71,88,89,90,67,62,59,94,69,33,16,70,71,88,89,90,67,62,59,94,69,33,0,187,0,0,49,0,0,0,0,49,0,0,49,0,0,0,0,0,0,0,49,193,188,189,190,191,192,193,188,189,190,191,192,0,0,187,188,189,190,191,192,193,188,189,190,191,192,193,188,189,190,191,192,193,188,189,190,191,0,0,0,193,30,188,189,190,191,0,193,188,189,190,191,193,193,188,189,190,191,192,193,188,188,188,189,189,189,189,190,191,192,193,188,189,190,191,192,192,196,49,188,189,190,196,193,192,192,193,188,189,190,191,0,68,188,189,190,191,30,188,189,190,191,0,187,188,189,190,191,192,0,0,193,188,189,190,191,192,193,193,193,188,189,190,191,192,193,188,189,190,191,192,193,188,189,190,191,192,0,49,188,189,190,191,192,0,30,188,189,190,191,0,30,188,189,190,191,0,30,188,189,190,191,0,0,0,200,202,203,200,202,203,200,200,202,203,200,200,200,202,203,200,200,200,202,203,200,200,200,200,202,203,200,202,203,200,202,203,200,0,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,0,0,207,207,207,206,207,206,206,206,207,207,207,206,207,206,206,206,206,206,207,207,206,207,206,207,206,223,223,0,0,208,0,208,208,211,0,211,211,0,211,208,208,209,209,211,208,209,210,211,208,209,210,210,209,211,210,211,210,209,210,208,209,209,208,209,211,208,209,210,32,209,208,208,208,208,211,211,208,208,209,209,210,208,211,211,211,211,211,211,208,208,208,209,209,210,210,210,208,209,209,211,208,209,210,208,208,209,208,209,210,208,208,209,209,211,208,209,211,208,209,209,209,208,208,208,208,209,208,208,209,210,32,209,210,210,208,209,209,208,209,211,210,211,208,209,211,208,209,210,211,208,209,210,211,208,209,210,210,210,210,210,208,208,208,208,213,0,0,213,0,218,0,0,0,214,215,216,214,215,216,213,214,215,216,216,214,215,216,214,215,216,216,216,215,216,214,214,215,216,214,215,216,216,214,215,216,214,214,215,216,214,216,214,215,216,215,216,213,214,215,216,216,214,214,213,214,215,216,216,214,215,216,216,214,215,216,214,215,216,214,215,216,214,214,214,214,213,215,216,216,217,215,216,214,219,0,219,0,219,219,220,219,220,219,219,219,219,219,219,219,219,219,220,219,219,220,219,219,219,219,219,219,219,219,220,219,219,219,220,219,220,219,220,219,220,219,219,219,0,0,139,221,139,221,221,139,221,139,221,139,139,221,139,139,221,139,221,139,139,139,221,221,221,139,221,221,139,139,221,221,221,139,139,221,139,221,139,221,139,221,221,221,221,221,0,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[],[[1,[-1]]]],-1],3,[[4,[-2,-3]]],[],[]],[[[7,[],[[5,[-1]],[6,[-2]]]],8],3,[],9],[[[2,[],[[1,[-1]]]],-4],3,[[4,[-2,-3]]],[],[],[[10,[-2,-3]]]],[[[2,[],[[1,[-1]]]],-4],3,[[4,[-2,-3]]],[],[],[[10,[-2,-3]]]],[[[2,[],[[1,[-1]]]],-4],3,[[4,[-2,-3]]],[],[],[[10,[-2,-3]]]],[[[7,[],[[5,[-1]],[6,[-2]]]],-4],[[3,[[7,[],[[5,[-1]],[6,[-2]]]],-4]]],[],9,11,[[7,[-3]]]],[[[7,[],[[5,[-1]],[6,[-2]]]],-5],[[12,[[7,[],[[5,[-1]],[6,[-2]]]],-5]]],[],9,[],13,[[15,[-1],[[5,[[14,[-3,-4]]]]]]]],[[],[[16,[-1]]],11],[-2,[[17,[-2]]],11,[[7,[-1]]]],[[-2,-3,-4],[[18,[-1,-2,-3,-4]]],[11,11],[[7,[-1]]],[[7,[-1]]],[[7,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[7,[],[[5,[-1]],[6,[-2]]]]],[[19,[7]]],[],9],[[[7,[],[[5,[-1]],[6,[-2]]]]],[[7,[],[[5,[-1]],[6,[-2]]]]],[],9],[[-2,-3],[[20,[-2,-3]]],11,[[7,[-1]]],[[7,[-1]]]],[[-2,-3],[[21,[-2,-3]]],11,[[7,[-1]]],[[7,[-1]]]],[-2,[[22,[-2]]],11,[[23,[-1]]]],0,[[[2,[],[[1,[-1]]]]],3,[[4,[-2,-3]]],[],[]],[[[24,[-1,-2]]],[[24,[-1,-2]]],25,25],[[-1,-2],3,[],[]],[[26,-2],[[27,[-3,-1,-2]]],[11,11],[[7,[-1]]],[28,9]],[[26,26,-2],[[29,[-3,-2]]],11,[[7,[-1]]],[28,9]],0,0,[[30,-1],26,[]],0,[[31,-1],[[14,[[3,[-2,-1]],[32,[-1]]]]],[11,11],[]],[-1,[[2,[],[[1,[-2]]]]],[],[[4,[-3,-4]]],[],[]],[[],[[33,[-1]]],11],[[[24,[-1,-2]],[24,[-1,-2]]],34,35,35],0,[[[7,[],[[5,[-1]],[6,[-2]]]],-3],[[36,[[7,[],[[5,[-1]],[6,[-2]]]],-3]]],[],9,10],[[[7,[],[[5,[-1]],[6,[-2]]]],-4],[[37,[[7,[],[[5,[-1]],[6,[-2]]]],-4]]],[],9,[],[[15,[-1],[[5,[[14,[-3]]]]]]]],[[[24,[-1,-2]],38],39,40,40],[-1,-1,[]],[[[41,[-1,-2]]],[[24,[-1,-2]]],[],[]],[[-1,-2],[[2,[],[[1,[-2]]]]],[],[[4,[-3,-4]]],[],[]],[-2,[[42,[-1,-3,-2]]],11,[[7,[-1]]],43],[-1,-2,[],[]],[[[24,[-1,-2]]],[[14,[[44,[-1]],[44,[[8,[-2]]]]]]],[],[]],[[[24,[-1,-2]]],[[41,[-1,-2]]],[],[]],[[[2,[],[[1,[-1]]]]],-5,[[4,[-2,-3]]],[],[],[],[[2,[-2,-3,-4]]]],[[[49,[],[[45,[-1]],[46,[-2]],[47,[-3]],[48,[-4]]]]],34,25,25,[25,50],[[2,[-1,-2,-3]]]],[[[2,[],[[1,[-1]]]]],34,[[4,[-2,-3]]],[],[]],[[[7,[],[[5,[-1]],[6,[-2]]]],-3],[[51,[-3,[7,[],[[5,[-1]],[6,[-2]]]],-2,0]]],[],9,11],[[[7,[],[[5,[-1]],[6,[-2]]]]],[[52,[[7,[],[[5,[-1]],[6,[-2]]]],-4]]],[],9,11,[[7,[-3],[[5,[-1]]]]]],[-2,[[53,[-2]]],11,[[7,[-1]]]],[-2,[[54,[-3,-2]]],11,[[7,[-1]]],[28,9]],[-2,[[55,[-3,-2]]],11,[[7,[-1]]],[28,9]],[[[7,[],[[5,[-1]],[6,[-2]]]],-4],[[56,[[7,[],[[5,[-1]],[6,[-2]]]],-4]]],[],9,[],[[15,[-1],[[5,[-3]]]]]],[[[7,[],[[5,[-1]],[6,[-2]]]],-5],[[57,[[7,[],[[5,[-1]],[6,[-2]]]],-5]]],[],9,11,[],[[15,[-1,-3],[[5,[-4]]]]]],[[[2,[],[[1,[-1]]]],[2,[],[[1,[-1]]]]],[[2,[],[[1,[-1]]]]],[[4,[-2,-3]]],[],[]],[[[7,[],[[5,[-1]],[6,[-2]]]],-3],[[58,[[7,[],[[5,[-1]],[6,[-2]]]],-3]]],[],9,10],[-1,[[59,[-1,-2]]],[25,60],11],[-2,[[61,[-2]]],11,[[7,[-1]]]],[-1,[[62,[-1,-2]]],[25,60],11],0,[-2,[[63,[-2]]],11,[[7,[-1]]]],[[[7,[],[[5,[-1]],[6,[-2]]]],-4],[[64,[[7,[],[[5,[-1]],[6,[-2]]]],-4]]],[],9,11,[[7,[-3],[[5,[-1]]]]]],[[[7,[],[[5,[-1]],[6,[-2]]]],-3],[[14,[[3,[-1,-3]]]]],[],9,11],[[[7,[],[[5,[-1]],[6,[-2]]]],-3],[[24,[-1]]],[],9,11],[[[7,[],[[5,[-1]],[6,[-2]]]],-3],[[24,[-1]]],[],9,11],[[[7,[],[[5,[-1]],[6,[-2]]]],-3,-2],[[24,[-1]]],[],9,11],[[[7,[],[[5,[-1]],[6,[-2]]]],-3,-2],[[14,[-1]]],[],9,11],0,[-3,[[65,[-1,-3]]],11,[],[[15,[-1],[[5,[[66,[-2,-1]]]]]]]],0,[[[7,[],[[5,[-1]],[6,[-2]]]],-3,-4,-2],[[51,[-4,[7,[],[[5,[-1]],[6,[-2]]]],-2,-3]]],[],9,0,11],[[],[[67,[-1]]],11],[68,-1,[]],[[[2,[],[[1,[-1]]]]],-4,[[4,[-2,-3]]],[],[],[]],[-2,[[69,[-3,-2]]],[],[[15,[],[[5,[-1]]]]],11],[30,-1,[]],[[[7,[],[[5,[-1]],[6,[-2]]]]],[[52,[-4,[7,[],[[5,[-1]],[6,[-2]]]]]]],[],9,11,[[7,[-3],[[5,[-1]]]]]],[-1,[[70,[-2,-1]]],[[15,[],[[5,[34]]]]],11],[-2,[[71,[-3,-2]]],[],[[15,[],[[5,[[72,[-1]]]]]]],11],[[-2,-3],[[73,[-4,-2,-3]]],11,[[7,[-1]]],[[7,[-1]]],[28,9]],[[-2,-3],[[74,[-4,-2,-3]]],11,[[7,[-1]]],[[7,[-1]]],[28,9]],[[-2,-3],[[75,[-4,-2,-3]]],11,[[7,[-1]]],[[7,[-1]]],[28,9]],[[-2,-3],[[76,[-4,-2,-3]]],11,[[7,[-1]]],[[7,[-1]]],[28,9]],[[[8,[[2,[],[[1,[-1]]]]]],-1,-4],3,[[4,[-2,-3]]],[],[],[[77,[[8,[[2,[],[[1,[-1]]]]]]]]]],[[[2,[],[[1,[-1]]]],-4],3,[[4,[-2,-3]]],[],[],[]],[[[7,[],[[5,[-1]],[6,[-2]]]]],[[78,[[7,[],[[5,[-1]],[6,[-2]]]]]]],[],9],[[[7,[],[[5,[-1]],[6,[-2]]]],-4],[[79,[[7,[],[[5,[-1]],[6,[-2]]]],-4]]],[],9,11,[[7,[-3]]]],[[26,-2],[[80,[-1,-2]]],11,[[7,[-1]]]],[[26,26,-2],[[81,[-1,-2]]],11,[[7,[-1]]]],[-2,[[82,[-1,-2]]],11,[[7,[-1]]]],[-2,[[83,[-1,-2]]],11,[[7,[-1]]]],[[[7,[],[[5,[-1]],[6,[-2]]]]],[[84,[[7,[],[[5,[-1]],[6,[-2]]]]]]],[],9],0,0,[[[7,[],[[5,[-1]],[6,[-2]]]],-5],[[85,[[7,[],[[5,[-1]],[6,[-2]]]],-5]]],[],9,11,[[7,[-3]]],[[15,[-1],[[5,[-4]]]]]],[[[7,[],[[5,[-1]],[6,[-2]]]],-5],[[86,[[7,[],[[5,[-1]],[6,[-2]]]],-5]]],[],9,11,[[7,[-3]]],[[15,[-1],[[5,[-4]]]]]],[[[7,[],[[5,[-1]],[6,[-2]]]],-5],[[87,[[7,[],[[5,[-1]],[6,[-2]]]],-5]]],[],9,11,[[7,[-3]]],[[15,[-1],[[5,[-4]]]]]],[-1,-2,[],[]],[[],[[88,[-1]]],11],[[-1,-2,-3],[[89,[-1,-2,-3,-4]]],[[15,[],[[5,[34]]]]],[],[25,60],11],[[-1,-2],[[90,[-2,-1,-3]]],[25,60],[[15,[],[[5,[34]]]]],11],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,91,[]],[[[49,[],[[45,[-1]],[46,[-2]],[47,[-3]],[48,[-4]]]]],[[14,[-1,[92,[[49,[],[[45,[-1]],[46,[-2]],[47,[-3]],[48,[-4]]]]]]]]],25,25,[25,50],[[2,[-1,-2,-3]]]],[[30,26],[[14,[-1,[92,[30]]]]],[]],[[30,-2],[[14,[-3,[92,[30]]]]],[],[[15,[-1],[[5,[34]]]]],[]],[[30,-2],[[24,[-3,[92,[30]]]]],[],[[15,[-1],[[5,[34]]]]],[]],[-1,[[93,[-2,3,-1]]],10,11],[-1,[[93,[-2,-3,-1]]],10,11,[]],[-1,[[94,[-2,-1]]],25,11],[[[7,[],[[5,[-1]],[6,[-2]]]],-4],[[95,[[7,[],[[5,[-1]],[6,[-2]]]],-4]]],[],9,11,[[7,[-3]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[],[[1,[-1]]]],-1],3,[[4,[-2,-3]]],[],[]],[[96,-1],3,[]],[[97,-1],3,[]],[[[2,[],[[1,[-1]]]],-4],3,[[4,[-2,-3]]],[],[],[[10,[-2,-3]]]],[[[2,[],[[1,[-1]]]],-4],3,[[4,[-2,-3]]],[],[],[[10,[-2,-3]]]],[[[2,[],[[1,[-1]]]],-4],3,[[4,[-2,-3]]],[],[],[[10,[-2,-3]]]],[[[24,[-1,-2]],-4],[],[],[],[],[[77,[-1],[[5,[[24,[-3,-2]]]]]]]],[[[44,[-1]]],-1,[]],[[[44,[-1]]],-1,[]],[[[24,[-1,-2]]],[[24,[-1,-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[],[[1,[-1]]]]],3,[[4,[-2,-3]]],[],[]],[[[98,[-1,-2,-3]]],[[98,[-1,-2,-3]]],25,25,25],[[[44,[-1]]],[[44,[-1]]],25],[96,96],[97,97],[[[8,[-1]]],[[8,[-1]]],25],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[44,[-1]],-4],[[41,[-2,-3]]],[],[],[],[[77,[-1],[[5,[[41,[-2,-3]]]]]]]],[[[44,[-1]],-4],[[24,[-2,-3]]],[],[],[],[[77,[-1],[[5,[[24,[-2,-3]]]]]]]],[96,99],[97,99],[-1,[[2,[],[[1,[-2]]]]],[],[[4,[-3,-4]]],[],[]],[-1,96,9],[-1,97,9],[[],4],[[],96],[[],97],[[[44,[-1]],[44,[-1]]],34,35],[[96,96],34],[[97,97],34],[[[8,[-1]],[8,[-1]]],34,35],0,[-3,4,[],[],[[10,[-1,-2]]]],[-1,4,100],[-1,96,100],[-1,97,100],[-1,4,[]],[-1,96,[]],[-1,97,[]],[99,4],[-1,4,[]],[-1,96,[]],[-1,97,[]],[[[98,[-1,-2,-3]],38],39,40,40,40],[[[44,[-1]],38],39,40],[[96,38],39],[[96,38],39],[[97,38],39],[[97,38],39],[[[8,[-1]],38],39,40],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[99,[[98,[-1,-2,-3]]],[],[],[]],[-1,-1,[]],[101,[[98,[101,-1,-2]]],[],[]],[102,[[98,[-1,-2,-3]]],[],[],100],[[[103,[-1]]],[[98,[-2,-1,99]]],[],[]],[[[104,[-1]]],[[98,[-2,-3,-1]]],100,[],[]],[[[105,[-1]]],[[98,[-1,-2,99]]],[],[]],[106,[[98,[106,-1,-2]]],[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[8,[-1]]],[]],[107,-1,[]],[-1,-1,[]],[[-1,-2],[[2,[],[[1,[-2]]]]],[],[[4,[-3,-4]]],[],[]],[[-1,-2],96,9,[]],[[-1,-2],97,9,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[44,[-1]]],[[44,[-1]]],[]],[[[10,[],[[108,[-1]]]]],[[98,[-2,-3,-1]]],100,[],[]],[[[105,[-1]]],[[98,[-1,-2,-3]]],25,[],[]],[[[103,[-1]]],[[98,[-2,-1,-3]]],25,[],[]],[102,[[98,[-1,-2,-3]]],[],[],[]],[[[104,[-1]]],[[98,[-2,-3,-4]]],100,[],[],[]],[[[98,[-1,-2,-3]]],[[98,[-1,-2,-4]]],25,25,100,[]],[[[44,[-1]]],-1,[]],[4,-3,[],[],[[4,[-1,-2]]]],[[[2,[],[[1,[-1]]]]],-5,[[4,[-2,-3]]],[],[],[],[[2,[-2,-3,-4]]]],[96,-4,[],[],9,[[2,[-1,-2,-3]]]],[96,-3,[],[],[[4,[-1,-2]]]],[97,-3,[],[],[[4,[-1,-2]]]],[97,-4,[],[],9,[[2,[-1,-2,-3]]]],[109,-7,[],[[110,[-1]]],[],[[110,[-3]]],[],[[110,[-5]]],[[2,[-2,-4,-6]]]],[111,-5,[],[[110,[-1]]],[],[[110,[-3]]],[[4,[-2,-4]]]],[96,-5,[],[[110,[-1]]],[],[[110,[-3]]],[[4,[-2,-4]]]],[96,-7,[],[[110,[-1]]],[],[[110,[-3]]],9,[[110,[-5]]],[[2,[-2,-4,-6]]]],[97,-5,[],[[110,[-1]]],[],[[110,[-3]]],[[4,[-2,-4]]]],[97,-7,[],[[110,[-1]]],[],[[110,[-3]]],9,[[110,[-5]]],[[2,[-2,-4,-6]]]],[[[44,[-1]]],[[44,[-1]]],[]],[[[24,[-1,-2]]],[[41,[-1,-2]]],[],[]],[[[24,[-1,-2]]],34,[],[]],[[[24,[-1,-2]]],34,[],[]],[[[44,[-1]]],34,[]],[4,34],[[[2,[],[[1,[-1]]]]],34,[[4,[-2,-3]]],[],[]],[96,34],[96,34],[97,34],[97,34],[[[44,[-1]],-3],[[44,[-2]]],[],[],[[77,[-1],[[5,[-2]]]]]],[[[24,[-1,-2]],-4],[[24,[-2]]],[],[],[],[[77,[-1],[[5,[-3]]]]]],[[[24,[-1,-2]],-4],[[24,[-1]]],[],[],[],[[77,[-2],[[5,[-3]]]]]],[[[2,[],[[1,[-1]]]],[2,[],[[1,[-1]]]]],[[2,[],[[1,[-1]]]]],[[4,[-2,-3]]],[],[]],[[[44,[-1]],[44,[-1]]],[[44,[-1]]],[]],[-3,4,[],[],[[10,[-1,-2]]]],[-1,4,100],[-1,96,100],[-1,97,100],[-1,4,[]],[-1,96,[]],[-1,97,[]],[99,4],[99,97],[-1,4,[]],[-1,96,[]],[-1,97,[]],[-1,4,[112,113,114]],[[[2,[],[[1,[-1]]]]],-4,[[4,[-2,-3]]],[],[],[]],[96,-1,9],[97,-1,9],[[[8,[[2,[],[[1,[-1]]]]]],-1,-4],3,[[4,[-2,-3]]],[],[],[[77,[[8,[[2,[],[[1,[-1]]]]]]]]]],[[[8,[96]],-1,-2],3,[],[[77,[[8,[96]]]]]],[[[8,[97]],-1,-2],3,[],[[77,[[8,[97]]]]]],[[[2,[],[[1,[-1]]]],-4],3,[[4,[-2,-3]]],[],[],[]],[[96,-1],3,9],[[97,-1],3,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,115,[]],[-1,115,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-3,4,[],[],[[10,[-1,-2]]]],[-1,4,100],[-1,96,100],[-1,97,100],[-1,4,[]],[-1,96,[]],[-1,97,[]],[99,4],[-1,4,[]],[-1,96,[]],[-1,97,[]],0,0,0,0,[[[7,[],[[5,[-1]],[6,[-2]]]],8],3,[],9],[[[7,[],[[5,[-1]],[6,[-2]]]],-4],[[3,[[7,[],[[5,[-1]],[6,[-2]]]],-4]]],[],9,11,[[7,[-3]]]],[[[7,[],[[5,[-1]],[6,[-2]]]],-5],[[12,[[7,[],[[5,[-1]],[6,[-2]]]],-5]]],[],9,[],13,[[15,[-1],[[5,[[14,[-3,-4]]]]]]]],[[[7,[],[[5,[-1]],[6,[-2]]]]],[[19,[7]]],[],9],[[[7,[],[[5,[-1]],[6,[-2]]]]],[[7,[],[[5,[-1]],[6,[-2]]]]],[],9],0,0,0,0,[[31,-1],[[14,[[3,[-2,-1]],[32,[-1]]]]],[11,11],[]],0,[[[7,[],[[5,[-1]],[6,[-2]]]],-3],[[36,[[7,[],[[5,[-1]],[6,[-2]]]],-3]]],[],9,10],[[[7,[],[[5,[-1]],[6,[-2]]]],-4],[[37,[[7,[],[[5,[-1]],[6,[-2]]]],-4]]],[],9,[],[[15,[-1],[[5,[[14,[-3]]]]]]]],0,[[[7,[],[[5,[-1]],[6,[-2]]]],-3],[[51,[-3,[7,[],[[5,[-1]],[6,[-2]]]],-2,0]]],[],9,11],[[[7,[],[[5,[-1]],[6,[-2]]]]],[[52,[[7,[],[[5,[-1]],[6,[-2]]]],-4]]],[],9,11,[[7,[-3],[[5,[-1]]]]]],[[[7,[],[[5,[-1]],[6,[-2]]]],-4],[[56,[[7,[],[[5,[-1]],[6,[-2]]]],-4]]],[],9,[],[[15,[-1],[[5,[-3]]]]]],[[[7,[],[[5,[-1]],[6,[-2]]]],-5],[[57,[[7,[],[[5,[-1]],[6,[-2]]]],-5]]],[],9,11,[],[[15,[-1,-3],[[5,[-4]]]]]],[[[7,[],[[5,[-1]],[6,[-2]]]],-3],[[58,[[7,[],[[5,[-1]],[6,[-2]]]],-3]]],[],9,10],[[[7,[],[[5,[-1]],[6,[-2]]]],-4],[[64,[[7,[],[[5,[-1]],[6,[-2]]]],-4]]],[],9,11,[[7,[-3],[[5,[-1]]]]]],[[[7,[],[[5,[-1]],[6,[-2]]]],-3],[[14,[[3,[-1,-3]]]]],[],9,11],[[[7,[],[[5,[-1]],[6,[-2]]]],-3],[[24,[-1]]],[],9,11],[[[7,[],[[5,[-1]],[6,[-2]]]],-3],[[24,[-1]]],[],9,11],[[[7,[],[[5,[-1]],[6,[-2]]]],-3,-2],[[24,[-1]]],[],9,11],[[[7,[],[[5,[-1]],[6,[-2]]]],-3,-2],[[14,[-1]]],[],9,11],[[[7,[],[[5,[-1]],[6,[-2]]]],-3,-4,-2],[[51,[-4,[7,[],[[5,[-1]],[6,[-2]]]],-2,-3]]],[],9,0,11],0,0,[[[7,[],[[5,[-1]],[6,[-2]]]]],[[52,[-4,[7,[],[[5,[-1]],[6,[-2]]]]]]],[],9,11,[[7,[-3],[[5,[-1]]]]]],0,[[[7,[],[[5,[-1]],[6,[-2]]]]],[[78,[[7,[],[[5,[-1]],[6,[-2]]]]]]],[],9],[[[7,[],[[5,[-1]],[6,[-2]]]],-4],[[79,[[7,[],[[5,[-1]],[6,[-2]]]],-4]]],[],9,11,[[7,[-3]]]],[[[7,[],[[5,[-1]],[6,[-2]]]]],[[84,[[7,[],[[5,[-1]],[6,[-2]]]]]]],[],9],[[[7,[],[[5,[-1]],[6,[-2]]]],-5],[[85,[[7,[],[[5,[-1]],[6,[-2]]]],-5]]],[],9,11,[[7,[-3]]],[[15,[-1],[[5,[-4]]]]]],[[[7,[],[[5,[-1]],[6,[-2]]]],-5],[[86,[[7,[],[[5,[-1]],[6,[-2]]]],-5]]],[],9,11,[[7,[-3]]],[[15,[-1],[[5,[-4]]]]]],[[[7,[],[[5,[-1]],[6,[-2]]]],-5],[[87,[[7,[],[[5,[-1]],[6,[-2]]]],-5]]],[],9,11,[[7,[-3]]],[[15,[-1],[[5,[-4]]]]]],0,[[[7,[],[[5,[-1]],[6,[-2]]]],-4],[[95,[[7,[],[[5,[-1]],[6,[-2]]]],-4]]],[],9,11,[[7,[-3]]]],0,0,0,0,0,0,[[[116,[-1]],8],3,[11,117]],[[[118,[-1]],8],3,[11,117]],[[[119,[-1]],8],3,[11,117]],[[],[[0,[[7,[-1],[[5,[101]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[101,[[88,[-1]]],[[11,[],[[45,[101]]]]]],[[[120,[101]]],[[0,[-1]]],[11,[11,[],[[45,[101]],[46,[[120,[101]]]]]]]],[[[120,[101]],-1],[[0,[-1,-2]]],[[15,[101,101],[[5,[34]]]]],[11,[11,[],[[45,[101]],[46,[[120,[101]]]]]]]],0,[[[116,[-1]]],[[116,[-1]]],[11,117,25]],[[[118,[-1]]],[[118,[-1]]],[11,117,25]],[[[119,[-1]]],[[119,[-1]]],[11,117,25]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[],[[0,[[7,[-1],[[5,[101]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[101]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[0,[[7,[-1],[[5,[101]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[0,[[7,[-1],[[5,[101]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[101]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[101]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],0,[[],[[0,[[7,[-1],[[5,[101]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[101]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[101]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[101,[[116,[-1]]],[11,117]],[[101,101],[[118,[-1]]],[11,117]],[[101,101,101],[[119,[-1]]],[11,117]],[[[120,[101]]],[[0,[-1]]],[11,117]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[[],[[0,[[7,[-1],[[5,[101]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[121]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[122]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[123]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[124]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[125]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[126]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[127]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[128]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[121]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[122]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[123]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[124]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[125]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[126]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[127]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],[[],[[0,[[7,[-1],[[5,[128]],[6,[3]]]]]]],[[11,[],[[45,[101]]]]]],0,[[[129,[-1]],8],3,[11,[11,[],[[45,[106]]]]]],[[],[[0,[[7,[-1],[[5,[106]],[6,[3]]]]]]],[[11,[],[[45,[106]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[106,[[88,[-1]]],[[11,[],[[45,[106]]]]]],[[[129,[-1]]],[[129,[-1]]],[11,[11,[],[[45,[106]]]],25]],[[-1,-2],3,[],[]],[[],[[0,[[7,[-1],[[5,[106]],[6,[3]]]]]]],[[11,[],[[45,[106]]]]]],[[],[[129,[-1]]],[11,[11,[],[[45,[106]]]]]],[-1,-1,[]],[[],[[0,[[7,[-1],[[5,[106]],[6,[3]]]]]]],[[11,[],[[45,[106]]]]]],[-1,-2,[],[]],[[],[[0,[[7,[-1],[[5,[106]],[6,[3]]]]]]],[[11,[],[[45,[106]]]]]],[[],[[0,[[7,[-1],[[5,[106]],[6,[3]]]]]]],[[11,[],[[45,[106]]]]]],[[],[[0,[[7,[-1],[[5,[106]],[6,[3]]]]]]],[[11,[],[[45,[106]]]]]],[[],[[0,[[7,[-1],[[5,[106]],[6,[3]]]]]]],[[11,[],[[45,[106]]]]]],[[],[[0,[[7,[-1],[[5,[106]],[6,[3]]]]]]],[[11,[],[[45,[106]]]]]],[[],[[0,[[7,[-1],[[5,[3]]]]]]],[[11,[],[[45,[106]]]]]],[99,[[0,[[7,[-1],[[5,[99]]]]]]],[[11,[],[[45,[106]]]]]],[[99,-1],[[0,[[7,[-2],[[5,[99]]]]]]],[[15,[106,106],[[5,[34]]]]],[[11,[],[[45,[106]]]]]],[[],[[0,[[7,[-1],[[5,[106]],[6,[3]]]]]]],[[11,[],[[45,[106]]]]]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,91,[]],[[],[[0,[[7,[-1],[[5,[106]],[6,[3]]]]]]],[[11,[],[[45,[106]]]]]],0,0,0,0,0,0,[[[22,[-2]],8],3,11,[[23,[-1]]]],[[[64,[-3,-4]],8],3,11,[],[[7,[-1],[[5,[-2]]]]],[[7,[-1],[[5,[-2]]]]]],[[[63,[-2]],8],3,11,[[7,[-1]]]],[[[23,[],[[5,[-1]],[6,[-2]]]],8],3,[],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-2,[[22,[-2]]],11,[[23,[-1]]]],[[[22,[-1]]],[[22,[-1]]],25],[[[64,[-1,-2]]],[[64,[-1,-2]]],25,25],[[[63,[-1]]],[[63,[-1]]],25],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-2,[[63,[-2]]],11,[[7,[-1]]]],[[-2,-3],[[64,[-2,-3]]],11,[[7,[-1]]],[[7,[-1],[[5,[]]]]]],[[[23,[],[[5,[-1]],[6,[-2]]]],-3,-2],[[24,[-1]]],[],9,11],[[[23,[],[[5,[-1]],[6,[-2]]]],-3,-4,-2],[[24,[-1]]],[],9,0,11],[[[23,[],[[5,[-1]],[6,[-2]]]],-3,-2],[[24,[-1]]],[],9,11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[52,[-2,-3]],8],3,11,[[7,[-1]]],[[7,[-1],[[5,[]]]]]],[[[130,[-2]],8],3,11,[[7,[-1]]]],[[[131,[-2]],8],3,11,[[7,[-1]]]],[[[132,[-2]],8],3,11,[[7,[-1]]]],[[[133,[-2]],8],3,11,[[7,[-1]]]],[[[61,[-3]],8],3,11,[],[[7,[-1],[[5,[-2]]]]]],[[[17,[-3]],8],3,11,[],[[7,[-1],[[5,[-2]]]]]],[[[53,[-3]],8],3,11,[],[[7,[-1],[[5,[-2]]]]]],[[[56,[-3,-5]],8],3,11,[],[[7,[-1],[[5,[-2]]]]],[],[[15,[-2],[[5,[-4]]]]]],[[[57,[-3,-5]],8],3,11,[],[[7,[-1],[[5,[-2]]]]],[],[[15,[-2,-1],[[5,[-4]]]]]],[[[37,[-3,-5]],8],3,11,[],[[7,[-1],[[5,[-2]]]]],[],[[15,[-2],[[5,[[14,[-4]]]]]]]],[[[12,[-2,-5]],8],3,11,[[7,[-1]]],[],13,[[15,[],[[5,[[14,[-3,-4]]]]]]]],[[[134,[-1,-3]],8],3,[9,28],11,[[7,[-2]]]],[[[135,[-2]],8],3,11,[[7,[-1]]]],[[[136,[-4]],8],3,11,[],[[7,[-1],[[5,[-2]]]]],[[15,[],[[5,[-3]]]]]],[[[137,[-4,-3]],8],3,11,[],[[7,[-1],[[5,[-2]]]]],[[15,[-1],[[5,[-3]]]]]],[[[42,[-1,-2,-3]],8],3,11,43,[[7,[-1]]]],[[[138,[-1,-2,-3,-4]],8],3,[[15,[15]]],11,[],9],[[[84,[-3]],8],3,[50,25],[[11,[],[[47,[[139,[-1]]]]]]],[[7,[-2]]]],[[-2,-5],[[12,[-2,-5]]],11,[[7,[-1]]],[],13,[[15,[],[[5,[[14,[-3,-4]]]]]]]],[-2,[[131,[-2]]],11,[[7,[-1]]]],[-2,[[132,[-2]]],11,[[7,[-1]]]],[-2,[[133,[-2]]],11,[[7,[-1]]]],[-2,[[17,[-2]]],11,[[7,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[61,[-1]]],[[61,[-1]]],25],[[[17,[-1]]],[[17,[-1]]],25],[[[53,[-1]]],[[53,[-1]]],25],[[[56,[-1,-2]]],[[56,[-1,-2]]],25,25],[[[57,[-1,-2]]],[[57,[-1,-2]]],25,25],[[[37,[-1,-2]]],[[37,[-1,-2]]],25,25],[[[12,[-1,-2]]],[[12,[-1,-2]]],25,25],[[[134,[-1,-2]]],[[134,[-1,-2]]],25,25],[[[135,[-1]]],[[135,[-1]]],25],[[[136,[-1]]],[[136,[-1]]],25],[[[137,[-1,-2]]],[[137,[-1,-2]]],25,25],[[[138,[-1,-2,-3,-4]]],[[138,[-1,-2,-3,-4]]],25,25,25,25],[[[84,[-1]]],[[84,[-1]]],25],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[141,[],[[140,[-1]]]],-2],[[14,[-1]]],11,11],[[[141,[],[[140,[-1]]]],-2],[],11,11],0,[[],142],[[],143],[[],144],[-3,[[137,[-3,-2]]],11,[[7,[-1]]],[[15,[-1],[[5,[-2]]]]]],[[-2,-4],[[37,[-2,-4]]],11,[[7,[-1]]],[],[[15,[],[[5,[[14,[-3]]]]]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-2,[[42,[-1,-3,-2]]],11,[[7,[-1]]],43],[145,[[72,[99]]]],[[-2,-4],[[146,[-1,-2,-4]]],11,[[7,[-1]]],11,[[141,[-3],[[140,[-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-3,[[136,[-3]]],11,[[7,[-1]]],[[15,[],[[5,[-2]]]]]],[-2,[[53,[-2]]],11,[[7,[-1]]]],[[-2,-4],[[56,[-2,-4]]],11,[[7,[-1]]],[],[[15,[],[[5,[-3]]]]]],[[-2,-4],[[57,[-2,-4]]],11,[[7,[-1]]],[],[[15,[-1],[[5,[-3]]]]]],[-2,[[130,[-2]]],11,[[7,[-1]]]],[-2,[[61,[-2]]],11,[[7,[-1]]]],[-1,[[138,[-1,-2,-3,-4]]],[[15,[15]]],11,[],9],[[[52,[-2,-3]],-1],[[24,[-4]]],11,[[7,[-1]]],[[7,[-1],[[5,[]]]]],[]],[[[130,[-2]],-1],[[24,[-3]]],11,[[7,[-1]]],[]],[[[131,[-2]],-1],[[24,[-3]]],11,[[7,[-1]]],[]],[[[132,[-2]],-1],[[24,[-3]]],11,[[7,[-1]]],[]],[[[133,[-2]],-1],[[24,[-3]]],11,[[7,[-1]]],[]],[[[53,[-3]],-1],[[24,[-2]]],11,[],[[7,[-1],[[5,[-2]]]]]],[[[135,[-2]],-1],[[24,[-3]]],11,[[7,[-1]]],[]],[[[136,[-4]],-1],[[24,[-2]]],11,[],[[7,[-1],[[5,[-2]]]]],[[15,[],[[5,[-3]]]]]],[[[138,[-1,-2,-3,-4]],-2],[[24,[-3]]],[[15,[15]]],11,[],9],[[[17,[-3]],-1],[[24,[-2]]],11,[],[[7,[-1],[[5,[-2]]]]]],[[[136,[-4]],-1],[[24,[-2]]],11,[],[[7,[-1],[[5,[-2]]]]],[[15,[],[[5,[-3]]]]]],[[[138,[-1,-2,-3,-4]],-2],[[24,[-3]]],[[15,[15]]],11,[],9],0,0,[-2,[[134,[-3,-2]]],11,[[7,[-1]]],[9,28]],[-2,[[84,[-2]]],11,[[7,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],0,0,0,0,[[[93,[-1,-2,-3]],8],3,11,[],10],[[[58,[-2,-3]],8],3,11,[[7,[-1]]],10],[[[36,[-2,-3]],8],3,11,[[7,[-1]]],10],[[[78,[-2]],8],3,11,[[7,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[93,[-1,-2,-3]]],[[93,[-1,-2,-3]]],[11,25],25,25],[[[58,[-1,-2]]],[[58,[-1,-2]]],25,25],[[[36,[-1,-2]]],[[36,[-1,-2]]],25,25],[[[78,[-1]]],[[78,[-1]]],25],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-2,-3],[[36,[-2,-3]]],11,[[7,[-1]]],10],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-2,-3],[[58,[-2,-3]]],11,[[7,[-1]]],10],[[[93,[-1,-2,-3]],-1],[[24,[-2]]],11,[],10],[-2,[[78,[-2]]],11,[[7,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,[[93,[-2,3,-1]]],10,11],[-1,[[93,[-2,-3,-1]]],10,11,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[65,[-1,-2]]],[[65,[-1,-2]]],25,25],[[[147,[-1,-2,-3]]],[[147,[-1,-2,-3]]],25,11,[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[-1,[[147,[-1,-2,-3]]],25,11,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[65,[-1,-3]],-1],[[24,[-2]]],11,[],[[15,[-1],[[5,[[66,[-2,-1]]]]]]]],[[[147,[-1,-2,-3]],-2],[[24,[-3]]],25,11,[]],[-3,[[65,[-1,-3]]],11,[],[[15,[-1],[[5,[[66,[-2,-1]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],0,0,0,0,0,0,0,0,0,0,0,[[[148,[-1]],8],3,117],[[[149,[-1,-2]],8],3,[11,117],[[7,[-1]]]],[[[150,[-2]],8],3,117,[[7,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[149,[-1,-2]]],[[149,[-1,-2]]],[11,117,25],[[7,[-1]],25]],[[[150,[-1]]],[[150,[-1]]],25],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[151,151],34],[[151,38],39],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[72,[26]]],151],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-2,[[0,[-1,-2]]],[11,117],[[7,[-1]]]],[[[148,[-1]],-1],[[24,[-2]]],117,[]],[[[152,[-1]],-1],[[24,[-2]]],117,[]],0,[[],[[148,[-1]]],117],[-2,[[149,[-1,-2]]],[11,117],[[7,[-1]]]],[-2,[[150,[-2]]],117,[[7,[-1]]]],[26,[[152,[-1]]],117],[-2,[[153,[-2,-3]]],[[13,[151]]],[[15,[],[[5,[-1]]]]],117],[[],[[154,[-1]]],117],[-1,[[155,[-2,-1]]],[[15,[],[[5,[34]]]]],117],[-1,[[156,[-2,-1]]],[[15,[],[[5,[34]]]]],117],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[157,[-2,-3]],8],3,11,[[7,[-1]]],[[7,[-1]]]],[[[27,[-1,-2,-3]],8],3,[28,9],[11,11],[[7,[-2]]]],[[[80,[-1,-2]],8],3,11,[[7,[-1]]]],[[[29,[-1,-3]],8],3,[28,9],11,[[7,[-2]]]],[[[81,[-1,-2]],8],3,11,[[7,[-1]]]],[[[54,[-1,-3]],8],3,[28,9],11,[[7,[-2]]]],[[[55,[-1,-3]],8],3,[28,9],11,[[7,[-2]]]],[[[82,[-1,-2]],8],3,11,[[7,[-1]]]],[[[83,[-1,-2]],8],3,11,[[7,[-1]]]],[[[73,[-1,-3,-4]],8],3,[28,9],11,[[7,[-2]]],[[7,[-2]]]],[[[74,[-1,-3,-4]],8],3,[28,9],11,[[7,[-2]]],[[7,[-2]]]],[[[75,[-1,-3,-4]],8],3,[28,9],11,[[7,[-2]]],[[7,[-2]]]],[[[76,[-1,-3,-4]],8],3,[28,9],11,[[7,[-2]]],[[7,[-2]]]],[[[20,[-2,-3]],8],3,11,[[7,[-1]]],[[7,[-1]]]],[[[21,[-2,-3]],8],3,11,[[7,[-1]]],[[7,[-1]]]],[[[158,[-1,-2]],8],3,11,[[7,[-1]]]],[[[159,[-1,-2,-3]],8],3,11,[[7,[-1]]],[[7,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-2,-3],[[20,[-2,-3]]],11,[[7,[-1]]],[[7,[-1]]]],[[-2,-3],[[21,[-2,-3]]],11,[[7,[-1]]],[[7,[-1]]]],[[[29,[-1,-2]]],[[29,[-1,-2]]],25,25],[[[54,[-1,-2]]],[[54,[-1,-2]]],25,25],[[[55,[-1,-2]]],[[55,[-1,-2]]],25,25],[[[73,[-1,-2,-3]]],[[73,[-1,-2,-3]]],25,25,25],[[[74,[-1,-2,-3]]],[[74,[-1,-2,-3]]],25,25,25],[[[75,[-1,-2,-3]]],[[75,[-1,-2,-3]]],25,25,25],[[[76,[-1,-2,-3]]],[[76,[-1,-2,-3]]],25,25,25],[[[20,[-1,-2]]],[[20,[-1,-2]]],25,25],[[[21,[-1,-2]]],[[21,[-1,-2]]],25,25],[[[160,[-1,-2]]],[[160,[-1,-2]]],25,25],[[[161,[-1,-2,-3]]],[[161,[-1,-2,-3]]],25,25,25],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[26,-2],[[27,[-3,-1,-2]]],[11,11],[[7,[-1]]],[28,9]],0,0,[[26,26,-2],[[29,[-3,-2]]],11,[[7,[-1]]],[28,9]],[[],[[162,[-1,-2]]],9,9],0,0,[[-2,-3],[[157,[-2,-3]]],11,[[7,[-1]]],[[7,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[51,[-1,-2,-3,-4]],-5],[[66,[-5,-1]]],11,[[7,[-1]]],163,[],[]],[[-1,-4],[[164,[-5,-1,-4]]],[60,25],11,[[7,[-2]]],[[15,[-2],[[5,[-3]]]]],[28,9]],[-2,[[54,[-3,-2]]],11,[[7,[-1]]],[28,9]],[-2,[[55,[-3,-2]]],11,[[7,[-1]]],[28,9]],0,0,[[-2,-3,-1,-4],[[51,[-1,-2,-4,-3]]],11,[[7,[-1]]],[],163],[[[51,[-1,-2,-3,-4]]],72,11,[[7,[-1]]],163,0],0,0,[[[157,[-2,-3]],-1],[[24,[-4]]],11,[[7,[-1]]],[[7,[-1]]],[]],[[[21,[-2,-3]],-1],24,11,[[7,[-1]]],[[7,[-1]]]],0,0,0,0,[[-2,-3],[[159,[-1,-2,-3]]],11,[[7,[-1]]],[[7,[-1]]]],[[-2,-3],[[161,[-4,-2,-3]]],11,[[7,[-1]]],[[7,[-1]]],[28,9]],[[-2,-3],[[73,[-4,-2,-3]]],11,[[7,[-1]]],[[7,[-1]]],[28,9]],[[-2,-3],[[74,[-4,-2,-3]]],11,[[7,[-1]]],[[7,[-1]]],[28,9]],[[-2,-3],[[75,[-4,-2,-3]]],11,[[7,[-1]]],[[7,[-1]]],[28,9]],[[-2,-3],[[76,[-4,-2,-3]]],11,[[7,[-1]]],[[7,[-1]]],[28,9]],[[26,-2],[[80,[-1,-2]]],11,[[7,[-1]]]],[[26,26,-2],[[81,[-1,-2]]],11,[[7,[-1]]]],[-2,[[82,[-1,-2]]],11,[[7,[-1]]]],[-2,[[83,[-1,-2]]],11,[[7,[-1]]]],[-2,[[158,[-1,-2]]],11,[[7,[-1]]]],[-2,[[160,[-3,-2]]],11,[[7,[-1]]],[28,9]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[95,[-2,-3]],8],3,11,[[7,[-1]]],[[7,[-1]]]],[[[79,[-2,-3]],8],3,11,[[7,[-1]]],[[7,[-1]]]],[[[18,[-1,-2,-3,-4]],8],3,[11,11],[[7,[-1]]],[[7,[-1]]],[[7,[-1]]]],[[[85,[-2,-4]],8],3,11,[[7,[-1]]],[[7,[-1]]],[[15,[],[[5,[-3]]]]]],[[[86,[-2,-4]],8],3,11,[[7,[-1]]],[[7,[-1]]],[[15,[],[[5,[-3]]]]]],[[[87,[-2,-4]],8],3,11,[[7,[-1]]],[[7,[-1]]],[[15,[],[[5,[-3]]]]]],[[-2,-3,-4],[[18,[-1,-2,-3,-4]]],[11,11],[[7,[-1]]],[[7,[-1]]],[[7,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[95,[-1,-2]]],[[95,[-1,-2]]],25,25],[[[79,[-1,-2]]],[[79,[-1,-2]]],25,25],[[[18,[-1,-2,-3,-4]]],[[18,[-1,-2,-3,-4]]],[11,11,25],[[7,[-1]],25],[[7,[-1]],25],[[7,[-1]],25]],[[[85,[-1,-2]]],[[85,[-1,-2]]],25,25],[[[86,[-1,-2]]],[[86,[-1,-2]]],25,25],[[[87,[-1,-2]]],[[87,[-1,-2]]],25,25],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,[[],[[165,[-1]]],9],[[],[[166,[-1,-2]]],9,9],[[],[[167,[-1,-2,-3]]],9,9,9],[[],[[168,[-1,-2,-3,-4]]],9,9,9,9],[[],[[169,[-1,-2,-3,-4,-5]]],9,9,9,9,9],[[],[[170,[-1,-2,-3,-4,-5,-6]]],9,9,9,9,9,9],[[],[[171,[-1,-2,-3,-4,-5,-6,-7]]],9,9,9,9,9,9,9],[[],[[172,[-1,-2,-3,-4,-5,-6,-7,-8]]],9,9,9,9,9,9,9,9],[[],[[173,[-1,-2,-3,-4,-5,-6,-7,-8,-9]]],9,9,9,9,9,9,9,9,9],[[],[[174,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]]],9,9,9,9,9,9,9,9,9,9],[[],[[175,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],9,9,9,9,9,9,9,9,9,9,9],[[],[[176,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],9,9,9,9,9,9,9,9,9,9,9,9],[[],[[177,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],9,9,9,9,9,9,9,9,9,9,9,9,9],[[],[[178,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14]]],9,9,9,9,9,9,9,9,9,9,9,9,9,9],[[],[[179,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15]]],9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],[[],[[180,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16]]],9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],[[],[[181,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17]]],9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],[[],[[182,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],[[],[[183,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19]]],9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],[[],[[184,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20]]],9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[95,[-2,-3]],-1],[[24,[-4]]],11,[[7,[-1]]],[[7,[-1]]],[]],0,[[-2,-3],[[79,[-2,-3]]],11,[[7,[-1]]],[[7,[-1]]]],[[-2,-4],[[85,[-2,-4]]],11,[[7,[-1]]],[[7,[-1]]],[[15,[],[[5,[-3]]]]]],[[-2,-4],[[86,[-2,-4]]],11,[[7,[-1]]],[[7,[-1]]],[[15,[],[[5,[-3]]]]]],[[-2,-4],[[87,[-2,-4]]],11,[[7,[-1]]],[[7,[-1]]],[[15,[],[[5,[-3]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[[-2,-3],[[95,[-2,-3]]],11,[[7,[-1]]],[[7,[-1]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[[88,[-1]],8],3,11],[[[89,[-1,-2,-3,-4]],8],3,[[15,[],[[5,[34]]]]],10,[25,60],11],[[[62,[-1,-2]],8],3,[25,[60,[],[[185,[]]]]],11],[[[33,[-1]],8],3,11],[[],[[16,[-1]]],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[-1]]],[[16,[-1]]],25],[[[70,[-1,-2]]],[[70,[-1,-2]]],25,25],[[[71,[-1,-2]]],[[71,[-1,-2]]],25,25],[[[88,[-1]]],[[88,[-1]]],[11,25]],[[[89,[-1,-2,-3,-4]]],[[89,[-1,-2,-3,-4]]],25,25,25,[11,25]],[[[90,[-1,-2,-3]]],[[90,[-1,-2,-3]]],25,25,[11,25]],[[[67,[-1]]],[[67,[-1]]],[11,25]],[[[62,[-1,-2]]],[[62,[-1,-2]]],25,[11,25]],[[[59,[-1,-2]]],[[59,[-1,-2]]],25,[11,25]],[[[94,[-1,-2]]],[[94,[-1,-2]]],25,25],[[[69,[-1,-2]]],[[69,[-1,-2]]],25,25],[[[33,[-1]]],[[33,[-1]]],25],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[],[[33,[-1]]],11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[59,[-1,-2]]],[25,60],11],[-1,[[62,[-1,-2]]],[25,60],11],[[[16,[-1]],-1],24,11],[[[70,[-1,-2]],-1],[[24,[-3]]],11,[[15,[],[[5,[34]]]]],[]],[[[71,[-1,-3]],-1],[[24,[-4]]],11,[],[[15,[],[[5,[[72,[-2]]]]]]],[]],[[[88,[-1]],-1],24,11],[[[89,[-1,-2,-3,-4]],-4],[[24,[-3]]],[[15,[],[[5,[34]]]]],10,[25,60],11],[[[90,[-1,-2,-3]],-3],[[24,[-2]]],[[15,[],[[5,[34]]]]],[25,60],11],[[[67,[-1]],-1],24,11],[[[62,[-1,-2]],-2],24,[25,[60,[],[[185,[]]]]],11],[[[59,[-1,-2]],-2],24,[25,[60,[],[[185,[]]]]],11],[[[94,[-1,-2]],-1],[[24,[-2]]],11,25],[[[69,[-1,-3]],-1],[[24,[-2]]],11,[],[[15,[],[[5,[-2]]]]]],[[[33,[-1]],-1],[[24,[3]]],11],[[],[[67,[-1]]],11],[-2,[[69,[-3,-2]]],[],[[15,[],[[5,[-1]]]]],11],[-1,[[70,[-2,-1]]],[[15,[],[[5,[34]]]]],11],[-2,[[71,[-3,-2]]],[],[[15,[],[[5,[[72,[-1]]]]]]],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[88,[-1]]],11],[[-1,-2,-3],[[89,[-1,-2,-3,-4]]],[[15,[],[[5,[34]]]]],[],[25,60],11],[[-1,-2],[[90,[-2,-1,-3]]],[25,60],[[15,[],[[5,[34]]]]],11],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,[[94,[-2,-1]]],25,11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[187,[],[[186,[-1]]]]],-1,25],[[[188,[-1]]],-2,187,[]],[[[189,[-1]]],-2,187,[]],[[[190,[-1]]],-2,187,[]],[[[191,[-1]]],[[191,[-1]]],[]],[[[192,[-1]]],[[192,[-1]]],25],[[[193,[-1]]],[[193,[-1]]],194],[[[188,[-1]]],[[188,[-1]]],25],[[[189,[-1]]],[[189,[-1]]],25],[[[190,[-1]]],[[190,[-1]]],25],[[[191,[-1]]],[[191,[-1]]],[]],[[[192,[-1]]],[[192,[-1]]],25],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[193,[-1]],[193,[-1]]],195,194],[[[188,[-1]],[188,[-1]]],195,50],[[[189,[-1]],[189,[-1]]],195,50],[[[190,[-1]],[190,[-1]]],195,50],[[[191,[-1]],[191,[-1]]],195,50],[[-2,-1],[[14,[[3,[72,26]]]]],117,[[7,[-1]]]],[[-2,-1],[[14,[[3,[72,26]]]]],117,[[7,[-1]]]],0,[[],[[193,[-1]]],194],[[30,-1],26,[]],[[[188,[-1]],-2],26,30,[]],[[[189,[-1]],-2],26,30,[]],[[[190,[-1]],-2],26,30,[]],[[[191,[-1]],[191,[-1]]],26,35],0,[[[193,[-1]],[193,[-1]]],34,194],[[[188,[-1]],[188,[-1]]],34,35],[[[189,[-1]],[189,[-1]]],34,35],[[[190,[-1]],[190,[-1]]],34,35],[[[191,[-1]],[191,[-1]]],34,35],[[[193,[-1]],38],39,194],[[[193,[-1]],38],39,194],[[[188,[-1]],38],39,40],[[[189,[-1]],38],39,40],[[[190,[-1]],38],39,40],[[[191,[-1]],38],39,40],[[[192,[-1]],38],39,40],[-1,-1,[]],[107,-1,[]],[-1,[[188,[-1]]],[]],[-1,-1,[]],[107,-1,[]],[-1,-1,[]],[-1,[[189,[-1]]],[]],[-1,[[189,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[196,34],[[[49,[],[[45,[-1]],[46,[-2]],[47,[-3]],[48,[-4]]]]],34,25,25,[25,50],[[2,[-1,-2,-3]]]],[[[188,[-1]]],34,49],[[[189,[-1]]],34,49],[[[190,[-1]]],34,49],[196,26],[26,[[193,[-1]]],194],[-2,[[192,[-1]]],197,[[60,[],[[198,[-1]],[185,[]]]]]],[[[192,[-1]]],72,197],[[[193,[-1]],[193,[-1]]],[[72,[195]]],194],[[[188,[-1]],[188,[-1]]],[[72,[195]]],199],[[[189,[-1]],[189,[-1]]],[[72,[195]]],199],[[[190,[-1]],[190,[-1]]],[[72,[195]]],199],[[[191,[-1]],[191,[-1]]],[[72,[195]]],199],0,[68,-1,[]],[[[188,[-1]]],-2,68,[]],[[[189,[-1]]],-2,68,[]],[[[190,[-1]]],-2,68,[]],[[[191,[-1]]],-2,35,[]],[30,-1,[]],[[[188,[-1]]],-2,30,[]],[[[189,[-1]]],-2,30,[]],[[[190,[-1]]],-2,30,[]],[[[191,[-1]]],-2,35,[]],0,[[[187,[],[[186,[-1]]]],-1],[[14,[3,-2]]],25,[]],[[[188,[-1]],-2],[[14,[3]]],187,[]],[[[189,[-1]],-2],[[14,[3]]],187,[]],[[[190,[-1]],-2],[[14,[3]]],187,[]],[[[191,[-1]],[191,[-1]]],[[14,[3,-2]]],[],[]],[[[192,[-1]],[192,[-1]]],[[14,[3,-2]]],25,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,115,[]],[[[193,[-1]],-1],26,194],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,24,[194,11]],[[[49,[],[[45,[-1]],[46,[-2]],[47,[-3]],[48,[-4]]]]],[[14,[-1,[92,[[49,[],[[45,[-1]],[46,[-2]],[47,[-3]],[48,[-4]]]]]]]]],25,25,[25,50],[[2,[-1,-2,-3]]]],[[[188,[-1]]],[[14,[[92,[[188,[-1]]]]]]],49],[[[189,[-1]]],[[14,[[92,[[189,[-1]]]]]]],49],[[[190,[-1]]],[[14,[[92,[[190,[-1]]]]]]],49],[[[191,[-1]]],[[14,[-1,[92,[[191,[-1]]]]]]],35],[[[192,[-1]]],[[14,[-2,[92,[[192,[-1]]]]]]],197,[]],[[-1,26],24,[194,117]],[[30,26],[[14,[-1,[92,[30]]]]],[]],[[[188,[-1]],26],[[14,[-2,[92,[[188,[-1]]]]]]],30,[]],[[[189,[-1]],26],[[14,[-2,[92,[[189,[-1]]]]]]],30,[]],[[[190,[-1]],26],[[14,[-2,[92,[[190,[-1]]]]]]],30,[]],[[[191,[-1]],26],[[14,[[120,[-1]],[92,[[191,[-1]]]]]]],35],[[-1,-2],24,[194,117],[[15,[],[[5,[34]]]]]],[[30,-2],[[14,[-3,[92,[30]]]]],[],[[15,[-1],[[5,[34]]]]],[]],[[[188,[-1]],-3],[[14,[-4,[92,[[188,[-1]]]]]]],30,[],[[15,[-2],[[5,[34]]]]],[]],[[[189,[-1]],-3],[[14,[-4,[92,[[189,[-1]]]]]]],30,[],[[15,[-2],[[5,[34]]]]],[]],[[[190,[-1]],-3],[[14,[-4,[92,[[190,[-1]]]]]]],30,[],[[15,[-2],[[5,[34]]]]],[]],[[[191,[-1]],-3],[[14,[[120,[-1]],[92,[[191,[-1]]]]]]],35,[],[[15,[-2],[[5,[34]]]]]],[[-1,-2],24,[194,117],[[15,[],[[5,[34]]]]]],[[30,-2],[[24,[-3,[92,[30]]]]],[],[[15,[-1],[[5,[34]]]]],[]],[[[188,[-1]],-3],[[24,[-4,[92,[[188,[-1]]]]]]],30,[],[[15,[-2],[[5,[34]]]]],[]],[[[189,[-1]],-3],[[24,[-4,[92,[[189,[-1]]]]]]],30,[],[[15,[-2],[[5,[34]]]]],[]],[[[190,[-1]],-3],[[24,[-4,[92,[[190,[-1]]]]]]],30,[],[[15,[-2],[[5,[34]]]]],[]],[[[191,[-1]],-3],[[24,[-4,[92,[[191,[-1]]]]]]],35,[],[[15,[-2],[[5,[34]]]]],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[200,[-1]]],[[120,[101]]],[]],[[[200,[-1]],26],3,201],[[],202],[[],203],[[[200,[-1]]],[[204,[[120,[101]]]]],201],[[[200,[-1]],38],39,40],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[200,[-1]]],-1,[]],[[[200,[-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[200,[-1]]],-1,[]],[-1,[[200,[-1]]],[]],[[[200,[-1]],[120,[101]]],[[204,[26]]],201],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[[26,-1],[[200,[-1]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[205,[-1]]],-2,68,[]],[[[205,[-1]],[205,[-1]]],34,[49,68,35]],[[[205,[-1]],38],39,[49,68,40]],[-1,-1,[]],[-1,-2,[],[]],[[[205,[-1]]],34,[49,68]],[[-1,26],[[205,[-1]]],[49,68]],[[[205,[-1]]],-2,[49,68],[]],[[[205,[-1]],-2],[[14,[3,-3]]],68,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,91,[]],[[[205,[-1]]],[[14,[[92,[[205,[-1]]]]]]],[49,68]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[206,[-1,-2]]],[[120,[101]]],[],[]],[[],[[206,[-1,-2,-3]]],9,9,9],[[[207,[-1,-2]],38],39,100,100],[[[207,[-1,-2]],38],39,40,40],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[206,[-1,-2,202]]],9,9],[[],[[206,[-1,-2,202]]],9,9],[[],[[206,[-1,-2,203]]],9,9],[[[206,[-1,-2,-3]]],-2,[],[],[]],[-1,115,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[208,[-1,-2]],-3],3,35,35,[]],[[[209,[-1,-2,-3]],-4],3,35,35,[50,25],[]],[[[209,[-1,-2,-3]],[208,[-1,-2]]],3,35,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[210,[-1]]],-2,[187,68],[]],[[[209,[-1,-2,-3]]],3,35,35,[50,25]],[[[211,[-1,-2]]],[[211,[-1,-2]]],25,25],[[[210,[-1]]],[[210,[-1]]],25],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[209,[-1,-2,-3]]],99,[100,40],[100,40],[100,40]],[[[210,[-1]],-2],26,117,[]],[-1,[[208,[-2,-3]]],9,35,35],[-1,[[209,[-2,-3,-1]]],[],[],[]],[-1,[[209,[-2,-3,-1]]],[50,25],35,35],[[],[[208,[-1,-2]]],[],[]],[-1,[[209,[-2,-3,-1]]],[],[],[]],[[[211,[-1,-2]],[211,[-1,-2]]],34,35,35],[[[208,[-1,-2]],[208,[-1,-2]]],34,35,35],[[[209,[-1,-2,-3]],[209,[-1,-2,-3]]],34,35,35,35],[[[210,[-1]],[210,[-1]]],34,35],0,0,[-1,[[208,[-2,-3]]],100,35,35],[-1,[[208,[-2,-1]]],35,35],[99,[[208,[-1,-2]]],35,35],[-1,[[208,[-1,-2]]],35,35],[[[211,[-1,-2]],38],39,40,40],[[[211,[-1,-2]],38],39,100,100],[[[208,[-1,-2]],38],39,40,40],[[[208,[-1,-2]],38],39,100,100],[[[209,[-1,-2,-3]],38],39,40,40,40],[[[209,[-1,-2,-3]],38],39,100,100,100],[[[210,[-1]],38],39,40],[[[120,[[208,[-1,-2]]]],38],39,100,100],[[[98,[-1,-2,-3]]],[[211,[-1,-2]]],[],[],100],[106,[[211,[106,-1]]],[]],[-1,-1,[]],[101,[[211,[101,-1]]],[]],[99,[[211,[-1,-2]]],[],[]],[115,[[211,[-1,-2]]],[],[]],[-1,[[208,[-2,-3]]],[112,113,114],[],[]],[107,-1,[]],[-1,-1,[]],[[[207,[[209,[101,[120,[101]],-1]],-1]]],[[209,[101,[120,[101]],-1]]],[50,25]],[-1,-1,[]],[-1,-1,[]],[107,-1,[]],[-1,[[210,[-1]]],[]],[[-1,-2],[[208,[-3,-4]]],9,[],35,35],[[-1,-2],[[209,[-3,-4,-1]]],[50,25],[],35,35],[[-1,[212,[[208,[-2,-3]]]]],[[209,[-2,-3,-1]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[208,[-1,-2]]],-4,35,35,9,[[2,[-1,-2,-3]]]],[[[208,[-1,-2]]],-3,35,35,[[4,[-1,-2]]]],[[[209,[-1,-2,-3]]],-4,35,35,[50,25],[[2,[-1,-2,-3]]]],[[[208,[-1,-2]]],-5,[],[],[[110,[-1]]],[[110,[-2]]],[[4,[-3,-4]]]],[[[209,[-1,-2,-3]]],-7,[],[],[],[[110,[-1]]],[[110,[-2]]],[[110,[-3]]],[[2,[-4,-5,-6]]]],[[[210,[-1]]],34,[49,68]],[[[208,[-1,-2]]],34,35,35],[[[208,[-1,-2]]],34,35,35],[[[209,[-1,-2,-3]]],34,35,35,[50,25]],[[[209,[-1,-2,-3]],-5],[[209,[-1,-2,-4]]],[],[],[],[],[[77,[-3],[[5,[-4]]]]]],[[[211,[-1,-2]],-4],[[211,[-1,-3]]],[],[],[],[[77,[-2],[[5,[-3]]]]]],[[[208,[-1,-2]],-4],[[208,[-1,-3]]],[],[],[],[[77,[-2],[[5,[-3]]]]]],[[[209,[-1,-2,-3]],-5],[[209,[-1,-4,-3]]],[],[],[],[],[[15,[-2],[[5,[-4]]]]]],[[[211,[-1,-2]],-4],[[211,[-3,-2]]],[],[],[],[[77,[-1],[[5,[-3]]]]]],[[[208,[-1,-2]],-4],[[208,[-3,-2]]],[],[],[],[[77,[-1],[[5,[-3]]]]]],[[[209,[-1,-2,-3]],-5],[[209,[-4,-2,-3]]],[],[],[],[],[[15,[-1],[[5,[-4]]]]]],[[[209,[-1,-2,-3]],[209,[-1,-2,-3]]],[[209,[-1,-2,-3]]],35,35,50],[[[209,[-1,-2,-3]],[209,[-1,-2,-3]]],[[209,[-1,-2,-3]]],35,35,[50,25]],[-1,[[208,[-2,-3]]],100,35,35],[-1,[[208,[-2,-1]]],35,35],[99,[[208,[-1,-2]]],35,35],[-1,[[208,[-1,-2]]],35,35],[[-1,[208,[-2,-3]]],[[209,[-2,-3,-1]]],[],[],[]],[-1,[[208,[-2,-3]]],[112,113,114],35,35],[[[208,[-1,-2]]],-3,35,35,9],[[[209,[-1,-2,-3]]],-3,35,35,[50,25]],[[[210,[-1]]],[],[49,68]],0,0,[[[210,[-1]]],-2,117,[]],[[[210,[-1]],-2],[[14,[3,-3]]],[187,68],[],[]],[[[8,[[208,[-1,-2]]]],-3,-4],3,35,35,[],[[77,[[8,[[208,[-1,-2]]]]]]]],[[[209,[-1,-2,-3]],[211,[-1,-2]]],3,[],[],[]],[[[8,[[209,[-1,-2,-3]]]],-4,-5],3,35,35,[50,25],[],[[77,[[8,[[209,[-1,-2,-3]]]]]]]],[[[208,[-1,-2]],-3],3,35,35,9],[[[209,[-1,-2,-3]],-3],3,35,35,[50,25]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,115,[]],[-1,115,[]],[-1,115,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[[[210,[-1]]],[[14,[-2,[92,[[210,[-1]]]]]]],[49,68],[]],[[[210,[-1]],26],[[14,[-2,[92,[[210,[-1]]]]]]],117,[]],[[[210,[-1]],-3],[[14,[-4,[92,[[210,[-1]]]]]]],117,[],[[15,[-2],[[5,[34]]]]],[]],[[[210,[-1]],-3],[[24,[-4,[92,[[210,[-1]]]]]]],117,[],[[15,[-2],[[5,[34]]]]],[]],[-1,[[208,[-2,-3]]],100,35,35],[-1,[[208,[-2,-1]]],35,35],[99,[[208,[-1,-2]]],35,35],[-1,[[208,[-1,-2]]],35,35],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[213,[],[[47,[-1]],[186,[-2]]]]],-2,[25,50],25],[[[214,[-1,-2]]],-3,187,213,[]],[215,-1,[]],[216,-1,[]],[216,-1,[]],[[[214,[-1,-2]]],[[214,[-1,-2]]],25,25],[215,215],[216,216],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[216,216],195],0,[[],215],[[],216],[[[214,[-1,-2]],-3],26,30,217,[]],[[[214,[-1,-2]],[214,[-1,-2]]],34,35,35],[[215,215],34],[[216,216],34],[[[214,[-1,-2]],38],39,40,40],[[215,38],39],[[216,38],39],[[216,38],39],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[214,[-1,-2]]],34,49,213],0,[-1,[[214,[-1]]],[49,218]],[[],215],[[],216],[26,215],[[216,216],[[72,[195]]]],[[[213,[],[[47,[-1]],[186,[-2]]]]],-1,[25,50],25],[[[214,[-1,-2]]],-3,49,213,[]],[215,26],[216,216],[216,216],0,[[[214,[-1,-2]]],-3,30,217,[]],[[[213,[],[[47,[-1]],[186,[-2]]]],-2],3,[25,50],25],[[[214,[-1,-2]],-3],[[14,[3,-4]]],187,213,[],[]],[[215,-1],3,[]],[[216,-1],3,[]],[[216,-1],3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,115,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[-1,91,[]],[[[214,[-1,-2]]],[[14,[[92,[[214,[-1,-2]]]]]]],49,213],[[[214,[-1,-2]],26],[[14,[[92,[[214,[-1,-2]]]]]]],30,217],[[[214,[-1,-2]],-3],[[14,[[92,[[214,[-1,-2]]]]]]],30,217,[[15,[],[[5,[34]]]]]],[[[214,[-1,-2]],-4],[[24,[-5,[92,[[214,[-1,-2]]]]]]],30,217,[],[[15,[-3],[[5,[34]]]]],[]],[[[213,[],[[47,[-1]],[186,[-2]]]],-3],3,[25,50],25,[]],[[215,-1],3,25],[[216,106],3],[[216,101],3],[[217,-1],3,[]],[[215,-1],3,[25,196]],[[216,99],3],[[-1,-2],[[214,[-1,-2]]],49,213],0,0,0,0,0,[[219,-1],3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,219,9],[[],219],[[219,219],34],[-1,219,100],[-1,219,[]],[-1,219,[]],[[219,38],39],[[219,38],39],[-1,-1,[]],[-1,-1,[]],[[-1,-2],219,9,[]],[-1,-2,[],[]],[-1,-2,[],[]],[219,-4,[],[],9,[[2,[-1,-2,-3]]]],[219,-3,[],[],[[4,[-1,-2]]]],[219,34],[219,34],[-1,219,100],[-1,219,[]],[-1,219,[]],[-1,[[220,[-1]]],201],[[[8,[219]],-1,-2],3,[],[[77,[[8,[219]]]]]],[[219,-1],3,9],[-1,115,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[[[220,[-1]]],[[14,[101,[92,[[220,[-1]]]]]]],201],[-1,219,100],[-1,219,[]],[-1,219,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[221,[-1,-2]]],-3,[187,68],[[2,[139]]],[]],[[[139,[-1]]],[[139,[-1]]],25],[[[221,[-1,-2]]],[[221,[-1,-2]]],25,25],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[139,[-1]],[139,[-1]]],195,50],[[],[[139,[-1]]],9],[[[221,[-1,-2]],-3],26,117,[[2,[139]]],[]],0,[[[139,[-1]],[139,[-1]]],34,35],[[[221,[-1,-2]],[221,[-1,-2]]],34,35,35],[[[139,[-1]],38],39,40],[[[221,[-1,-2]],38],39,40,40],[-1,[[139,[-1]]],25],[107,-1,[]],[-1,-1,[]],[107,-1,[]],[-1,[[221,[-1,-2]]],[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[221,[-1,-2]]],34,[49,68],[[2,[139]]]],[[[139,[-1]],-3],[[139,[-2]]],[],[],[[15,[-1],[[5,[-2]]]]]],[[[139,[-1]],[139,[-1]]],[[72,[195]]],199],[[[221,[-1,-2]]],139,[49,68],[[2,[139]]]],[[[221,[-1,-2]]],-3,117,[[2,[139]]],[]],[[[221,[-1,-2]],-3],[[14,[3,-4]]],[187,68],[[2,[139]]],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,91,[]],[-1,91,[]],[[[221,[-1,-2]]],[[14,[-3,[92,[[221,[-1,-2]]]]]]],[49,68],[[2,[139]]],[]],[[[221,[-1,-2]],26],[[14,[-3,[92,[[221,[-1,-2]]]]]]],117,[[2,[139]]],[]],[[[221,[-1,-2]],-4],[[14,[-5,[92,[[221,[-1,-2]]]]]]],117,[[2,[139]]],[],[[15,[-3],[[5,[34]]]]],[]],[[[221,[-1,-2]],-4],[[24,[-5,[92,[[221,[-1,-2]]]]]]],117,[[2,[139]]],[],[[15,[-3],[[5,[34]]]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[222,[-1,-2]]],-3,187,[],[]],[[[222,[-1,-2]]],[[222,[-1,-2]]],25,25],[[-1,-2],3,[],[]],[[[222,[-1,-2]],[222,[-1,-2]]],195,50,50],[[[222,[-1,-2]],-3],26,30,[],[]],[[[222,[-1,-2]],[222,[-1,-2]]],34,35,35],[[[222,[-1,-2]],38],39,40,40],[-1,-1,[]],[-1,-2,[],[]],[[[222,[-1,-2]]],34,49,[]],[[[222,[-1,-2]],[222,[-1,-2]]],[[72,[195]]],199,199],[[[222,[-1,-2]]],-3,68,[],[]],[[[222,[-1,-2]]],-3,30,[],[]],[[[222,[-1,-2]],-3],[[14,[3,-4]]],187,[],[],[]],0,0,[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,91,[]],[[[222,[-1,-2]]],[[14,[[92,[[222,[-1,-2]]]]]]],49,[]],[[[222,[-1,-2]],26],[[14,[-3,[92,[[222,[-1,-2]]]]]]],30,[],[]],[[[222,[-1,-2]],-4],[[14,[-5,[92,[[222,[-1,-2]]]]]]],30,[],[],[[15,[-3],[[5,[34]]]]],[]],[[[222,[-1,-2]],-4],[[24,[-5,[92,[[222,[-1,-2]]]]]]],30,[],[],[[15,[-3],[[5,[34]]]]],[]]],"c":[],"p":[[17,"StreamError"],[10,"ParseError",0],[1,"tuple"],[10,"StreamError",150],[17,"Output"],[17,"PartialState"],[10,"Parser",0],[5,"Tracked",150],[10,"Default",2555],[10,"ErrorInfo",150],[10,"Stream",0],[5,"AndThen",586],[10,"Into",2556],[6,"Result",2557],[10,"FnMut",2558],[5,"Any",1789],[5,"Try",586],[5,"Between",1317],[5,"Box",2559],[5,"Chainl1",1052],[5,"Chainr1",1052],[5,"Choice",540],[10,"ChoiceParser",540],[6,"ParseResult",0],[10,"Clone",2560],[1,"usize"],[5,"Count",1052],[10,"Extend",2561],[5,"CountMinMax",1052],[10,"RangeStreamOnce",0],[10,"EasyParser",0],[8,"ParseError",2212],[5,"Eof",1789],[1,"bool"],[10,"PartialEq",2562],[5,"Expected",874],[5,"FlatMap",586],[5,"Formatter",2563],[8,"Result",2563],[10,"Debug",2563],[8,"StdParseResult2",150],[5,"FromStr",586],[10,"FromStr",2564],[6,"Commit",150],[17,"Token"],[17,"Range"],[17,"Position"],[17,"Error"],[10,"StreamOnce",0],[10,"Ord",2562],[5,"Iter",1052],[6,"Either",586],[5,"LookAhead",586],[5,"Many",1052],[5,"Many1",1052],[5,"Map",586],[5,"MapInput",586],[5,"Message",874],[5,"NoneOf",1789],[10,"IntoIterator",2561],[5,"NotFollowedBy",586],[5,"OneOf",1789],[5,"Optional",540],[5,"Or",540],[5,"FnParser",928],[8,"StdParseResult",0],[5,"Position",1789],[10,"Positioned",0],[5,"Produce",1789],[5,"Satisfy",1789],[5,"SatisfyMap",1789],[6,"Option",2565],[5,"SepBy",1052],[5,"SepBy1",1052],[5,"SepEndBy",1052],[5,"SepEndBy1",1052],[10,"FnOnce",2558],[5,"Silent",874],[5,"Skip",1317],[5,"SkipCount",1052],[5,"SkipCountMinMax",1052],[5,"SkipMany",1052],[5,"SkipMany1",1052],[5,"Spanned",586],[5,"Then",1317],[5,"ThenPartial",1317],[5,"ThenRef",1317],[5,"Token",1789],[5,"Tokens",1789],[5,"TokensCmp",1789],[5,"TypeId",2566],[8,"StreamErrorFor",1949],[5,"Unexpected",874],[5,"Value",1789],[5,"With",1317],[6,"UnexpectedParse",150],[6,"StringStreamError",150],[6,"Info",150],[1,"str"],[10,"Display",2563],[1,"u8"],[5,"Static",150],[5,"Range",150],[5,"Format",150],[5,"Token",150],[1,"char"],[1,"never"],[17,"Format"],[10,"ParseErrorInto",150],[10,"From",2556],[10,"StreamErrorInto",150],[10,"Error",2567],[10,"Send",2568],[10,"Sync",2568],[5,"String",2569],[5,"TakeUntilByte",435],[10,"RangeStream",0],[5,"TakeUntilByte2",435],[5,"TakeUntilByte3",435],[1,"slice"],[1,"f32"],[1,"f64"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"u16"],[1,"u32"],[1,"u64"],[5,"Digit",513],[5,"NoPartial",586],[5,"AnyPartialStateParser",586],[5,"AnySendPartialStateParser",586],[5,"AnySendSyncPartialStateParser",586],[5,"Recognize",586],[5,"Ignore",586],[5,"Lazy",586],[5,"Factory",586],[5,"Opaque",586],[5,"Span",2482],[17,"InputInner"],[10,"Converter",586],[5,"AnyPartialState",586],[5,"AnySendPartialState",586],[5,"AnySendSyncPartialState",586],[10,"StrLike",586],[5,"InputConverter",586],[5,"EnvParser",928],[5,"Range",954],[5,"Recognize",954],[5,"RecognizeWithValue",954],[6,"TakeRange",954],[5,"Take",954],[5,"TakeFn",954],[5,"TakeUntilRange",954],[5,"TakeWhile",954],[5,"TakeWhile1",954],[5,"Escaped",1052],[5,"SkipUntil",1052],[5,"SkipRepeatUntil",1052],[5,"TakeUntil",1052],[5,"RepeatUntil",1052],[5,"EscapedState",1052],[10,"BorrowMut",2570],[5,"Iterate",1052],[5,"PartialState1",1317],[5,"PartialState2",1317],[5,"PartialState3",1317],[5,"PartialState4",1317],[5,"PartialState5",1317],[5,"PartialState6",1317],[5,"PartialState7",1317],[5,"PartialState8",1317],[5,"PartialState9",1317],[5,"PartialState10",1317],[5,"PartialState11",1317],[5,"PartialState12",1317],[5,"PartialState13",1317],[5,"PartialState14",1317],[5,"PartialState15",1317],[5,"PartialState16",1317],[5,"PartialState17",1317],[5,"PartialState18",1317],[5,"PartialState19",1317],[5,"PartialState20",1317],[17,"Item"],[17,"Checkpoint"],[10,"ResetStream",1949],[5,"PartialStream",1949],[5,"CompleteStream",1949],[5,"MaybePartialStream",1949],[5,"SliceStream",1949],[5,"IteratorStream",1949],[5,"PointerOffset",1949],[10,"Sized",2568],[6,"Ordering",2562],[10,"Range",1949],[10,"Iterator",2571],[17,"IntoIter"],[10,"PartialOrd",2562],[5,"BufReader",2131],[10,"Read",2572],[5,"Buffer",2131],[5,"Bufferless",2131],[8,"Result",2573],[5,"Stream",2167],[5,"Decoder",2183],[6,"Error",2183],[6,"Error",2212],[5,"Errors",2212],[5,"Stream",2212],[6,"Info",2212],[5,"Vec",2574],[10,"Positioner",2349],[5,"Stream",2349],[5,"IndexPositioner",2349],[5,"SourcePosition",2349],[10,"RangePositioner",2349],[10,"DefaultPositioned",2349],[6,"Error",2438],[5,"Stream",2438],[5,"Stream",2482],[5,"Stream",2528],[15,"Io",2210]],"b":[[63,"impl-Into%3CResult%3CCommit%3CT%3E,+Commit%3CTracked%3CE%3E%3E%3E%3E-for-ParseResult%3CT,+E%3E"],[64,"impl-Into%3CResult%3C(O,+Commit%3C()%3E),+Commit%3CTracked%3CE%3E%3E%3E%3E-for-ParseResult%3CO,+E%3E"],[255,"impl-Debug-for-UnexpectedParse"],[256,"impl-Display-for-UnexpectedParse"],[257,"impl-Display-for-StringStreamError"],[258,"impl-Debug-for-StringStreamError"],[264,"impl-From%3C%26str%3E-for-Info%3CT,+R,+F%3E"],[266,"impl-From%3Cu8%3E-for-Info%3Cu8,+R,+F%3E"],[267,"impl-From%3CStatic%3E-for-Info%3CT,+R,+F%3E"],[268,"impl-From%3CRange%3CR%3E%3E-for-Info%3CT,+R%3E"],[269,"impl-From%3CFormat%3CF%3E%3E-for-Info%3CT,+R,+F%3E"],[270,"impl-From%3CToken%3CT%3E%3E-for-Info%3CT,+R%3E"],[271,"impl-From%3Cchar%3E-for-Info%3Cchar,+R,+F%3E"],[300,"impl-ParseError%3CItem,+Range,+Position%3E-for-UnexpectedParse"],[301,"impl-StreamError%3CItem,+Range%3E-for-UnexpectedParse"],[302,"impl-StreamError%3CItem,+Range%3E-for-StringStreamError"],[303,"impl-ParseError%3CItem,+Range,+Position%3E-for-StringStreamError"],[306,"impl-StreamErrorInto%3CItem,+Range%3E-for-UnexpectedParse"],[307,"impl-ParseErrorInto%3CItem,+Range,+Position%3E-for-UnexpectedParse"],[308,"impl-StreamErrorInto%3CItem,+Range%3E-for-StringStreamError"],[309,"impl-ParseErrorInto%3CItem,+Range,+Position%3E-for-StringStreamError"],[317,"impl-StreamError%3CItem,+Range%3E-for-UnexpectedParse"],[318,"impl-ParseError%3CItem,+Range,+Position%3E-for-UnexpectedParse"],[319,"impl-StreamError%3CItem,+Range%3E-for-StringStreamError"],[320,"impl-ParseError%3CItem,+Range,+Position%3E-for-StringStreamError"],[2021,"impl-Display-for-PointerOffset%3CT%3E"],[2022,"impl-Debug-for-PointerOffset%3CT%3E"],[2034,"impl-From%3C%26mut+S%3E-for-%26mut+CompleteStream%3CS%3E"],[2035,"impl-From%3CS%3E-for-CompleteStream%3CS%3E"],[2193,"impl-Display-for-Error%3CE,+P%3E"],[2194,"impl-Debug-for-Error%3CE,+P%3E"],[2245,"impl-Errors%3CT,+R,+P%3E"],[2246,"impl-ParseError%3CItem,+Range,+Position%3E-for-Errors%3CItem,+Range,+Position%3E"],[2259,"impl-Debug-for-Info%3CT,+R%3E"],[2260,"impl-Display-for-Info%3CT,+R%3E"],[2261,"impl-Debug-for-Error%3CT,+R%3E"],[2262,"impl-Display-for-Error%3CT,+R%3E"],[2263,"impl-Debug-for-Errors%3CT,+R,+P%3E"],[2264,"impl-Display-for-Errors%3CT,+R,+P%3E"],[2267,"impl-From%3CInfo%3CT,+R,+F%3E%3E-for-Info%3CT,+R%3E"],[2268,"impl-From%3Cchar%3E-for-Info%3Cchar,+R%3E"],[2270,"impl-From%3Cu8%3E-for-Info%3Cu8,+R%3E"],[2271,"impl-From%3C%26str%3E-for-Info%3CT,+R%3E"],[2272,"impl-From%3CString%3E-for-Info%3CT,+R%3E"],[2288,"impl-ParseError%3CItem,+Range,+Position%3E-for-Error%3CItem,+Range%3E"],[2289,"impl-StreamError%3CItem,+Range%3E-for-Error%3CItem,+Range%3E"],[2294,"impl-StreamError%3CItem,+Range%3E-for-Error%3CItem,+Range%3E"],[2295,"impl-ParseError%3CItem,+Range,+Position%3E-for-Error%3CItem,+Range%3E"],[2304,"impl-Errors%3CT,+R,+P%3E"],[2305,"impl-ParseError%3CItem,+Range,+Position%3E-for-Errors%3CItem,+Range,+Position%3E"],[2320,"impl-Errors%3CT,+R,+P%3E"],[2321,"impl-ParseError%3CItem,+Range,+Position%3E-for-Errors%3CItem,+Range,+Position%3E"],[2367,"impl-Positioner%3Cu8%3E-for-SourcePosition"],[2368,"impl-Positioner%3Cchar%3E-for-SourcePosition"],[2385,"impl-Debug-for-SourcePosition"],[2386,"impl-Display-for-SourcePosition"],[2404,"impl-Positioner%3Cchar%3E-for-SourcePosition"],[2405,"impl-Positioner%3Cu8%3E-for-SourcePosition"],[2411,"impl-Positioner%3Cu8%3E-for-SourcePosition"],[2412,"impl-Positioner%3Cchar%3E-for-SourcePosition"],[2432,"impl-Positioner%3Cchar%3E-for-SourcePosition"],[2433,"impl-Positioner%3Cu8%3E-for-SourcePosition"],[2454,"impl-Debug-for-Error"],[2455,"impl-Display-for-Error"],[2461,"impl-ParseError%3CItem,+Range,+Position%3E-for-Error"],[2462,"impl-StreamError%3CItem,+Range%3E-for-Error"],[2463,"impl-ParseError%3CItem,+Range,+Position%3E-for-Error"],[2464,"impl-StreamError%3CItem,+Range%3E-for-Error"]]}],\
["crc32fast",{"doc":"Fast, SIMD-accelerated CRC32 (IEEE) checksum computation.","t":"FNNNNNNNNNNHNNNNNNNNNNN","n":["Hasher","borrow","borrow_mut","clone","clone_into","combine","default","finalize","finish","fmt","from","hash","into","new","new_with_initial","new_with_initial_len","reset","to_owned","try_from","try_into","type_id","update","write"],"q":[[0,"crc32fast"],[23,"core::fmt"],[24,"core::fmt"],[25,"core::any"]],"d":["Represents an in-progress CRC32 computation.","","","","","Combine the hash state with the hash state for the …","","Finalize the hash state and return the computed CRC32 …","","","Returns the argument unchanged.","Computes the CRC32 hash of a byte slice.","Calls <code>U::from(self)</code>.","Create a new <code>Hasher</code>.","Create a new <code>Hasher</code> with an initial CRC32 state.","Create a new <code>Hasher</code> with an initial CRC32 state.","Reset the hash state.","","","","","Process the given byte slice and update the hash state.",""],"i":[0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[1,1],2],[[],1],[1,3],[1,4],[[1,5],6],[-1,-1,[]],[[[8,[7]]],3],[-1,-2,[],[]],[[],1],[3,1],[[3,4],1],[1,2],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[[1,[8,[7]]],2],[[1,[8,[7]]],2]],"c":[],"p":[[5,"Hasher",0],[1,"tuple"],[1,"u32"],[1,"u64"],[5,"Formatter",23],[8,"Result",23],[1,"u8"],[1,"slice"],[6,"Result",24],[5,"TypeId",25]],"b":[]}],\
["crossbeam_epoch",{"doc":"Epoch-based memory reclamation.","t":"TFFIKFFRFFKKFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNHNNNMNNNNNNNNNMNNNNNNNNNMNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNNNNNNNNNNNNNNNNNNNNMNNNHNNNNNNOONNNHNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNN","n":["ALIGN","Atomic","Collector","CompareAndSetError","CompareAndSetOrdering","CompareExchangeError","Guard","Init","LocalHandle","Owned","Pointable","Pointer","Shared","as_mut","as_raw","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","collector","collector","compare_and_set","compare_and_set_weak","compare_exchange","compare_exchange_weak","current","current","default","default","default","default_collector","defer","defer_destroy","defer_unchecked","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","failure","fetch_and","fetch_or","fetch_update","fetch_xor","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw","from_usize","from_usize","from_usize","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_box","into_owned","into_owned","into_shared","into_usize","into_usize","into_usize","is_null","is_pinned","is_pinned","load","load_consume","new","new","new","new","new","null","null","partial_cmp","pin","pin","register","repin","repin_after","store","success","swap","tag","tag","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_owned","try_into_owned","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unprotected","with_tag","with_tag"],"q":[[0,"crossbeam_epoch"],[203,"core::marker"],[204,"core::option"],[205,"core::clone"],[206,"core::cmp"],[207,"core::result"],[208,"core::sync::atomic"],[209,"core::ops::function"],[210,"core::marker"],[211,"core::fmt"],[212,"core::any"]],"d":["The alignment of pointer.","An atomic pointer that can be safely shared between …","An epoch-based garbage collector.","The error returned on failed compare-and-set operation.","Memory orderings for compare-and-set operations.","The error returned on failed compare-and-swap operation.","A guard that keeps the current thread pinned.","The type for initializers.","A handle to a garbage collector.","An owned heap-allocated object.","Types that are pointed to by a single word.","A trait for either <code>Owned</code> or <code>Shared</code> pointers.","A pointer to an object protected by the epoch GC.","","Converts the pointer to a raw pointer (without the tag).","","Converts the pointer to a reference.","","","","","","","","","","","","","","","","","Returns a copy of the atomic value.","","","Creates another reference to the same garbage collector.","","","","","","Returns the <code>Collector</code> associated with this handle.","Returns the <code>Collector</code> associated with this guard.","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","The value in the atomic pointer at the time of the failed …","The value in the atomic pointer at the time of the failed …","","","","Returns the default global collector.","Stores a function so that it can be executed at some point …","Stores a destructor for an object so that it can be …","Stores a function so that it can be executed at some point …","Dereferences the given pointer.","","","","","Dereferences the pointer.","","","","","Mutably dereferences the given pointer.","","","","","Dereferences the pointer.","","","","","Drops the object pointed to by the given pointer.","","","","","","","","","","","","Checks if both handles point to the same collector.","The ordering of the operation when it fails.","Bitwise “and” with the current tag.","Bitwise “or” with the current tag.","Fetches the pointer, and then applies a function to it …","Bitwise “xor” with the current tag.","Clears up the thread-local cache of deferred functions by …","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns a new atomic pointer pointing to <code>ptr</code>.","Returns a new atomic pointer pointing to <code>owned</code>.","Returns a new atomic pointer pointing to <code>raw</code>.","","","Returns a new owned pointer pointing to <code>b</code>.","Returns the argument unchanged.","","","Returns a new pointer pointing to <code>raw</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a new owned pointer pointing to <code>raw</code>.","Returns a new pointer pointing to the tagged pointer <code>data</code>.","Returns a new pointer pointing to the tagged pointer <code>data</code>.","","Initializes a with the given initializer.","","Allocates <code>value</code> on the heap and returns a new atomic …","","Allocates <code>value</code> on the heap and returns a new owned …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the owned pointer into a <code>Box</code>.","Takes ownership of the pointee.","Takes ownership of the pointee.","Converts the owned pointer into a <code>Shared</code>.","Returns the machine representation of the pointer.","","","Returns <code>true</code> if the pointer is null.","Returns <code>true</code> if the current thread is pinned.","Returns <code>true</code> if the handle is pinned.","Loads a <code>Shared</code> from the atomic pointer.","Loads a <code>Shared</code> from the atomic pointer using a “consume…","Allocates <code>value</code> on the heap and returns a new atomic …","Allocates <code>value</code> on the heap and returns a new owned …","Creates a new collector.","The new value, which the operation failed to store.","The new value, which the operation failed to store.","Returns a new null atomic pointer.","Returns a new null pointer.","","Pins the current thread.","Pins the handle.","Registers a new handle for the collector.","Unpins and then immediately re-pins the thread.","Temporarily unpins the thread, executes the given function …","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer.","The ordering of the operation when it succeeds.","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer, …","Returns the tag stored within the pointer.","Returns the tag stored within the pointer.","","","","","","","","","","","","","","","","","","","Takes ownership of the pointee if it is non-null.","Takes ownership of the pointee if it is not null.","","","","","","","","Returns a reference to a dummy guard that allows …","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …"],"i":[3,0,0,0,0,0,0,3,0,0,0,0,0,1,4,1,4,18,6,1,1,4,8,11,12,18,6,1,1,4,8,11,12,6,1,4,8,6,1,4,8,4,11,12,6,6,6,6,13,18,6,4,8,0,12,12,12,3,18,6,1,1,4,4,8,11,12,3,18,6,1,1,4,4,8,11,12,3,18,6,1,1,4,8,11,11,12,12,4,8,16,6,6,6,6,12,18,6,6,1,4,4,8,11,12,18,6,6,6,6,6,6,6,1,1,1,1,4,4,8,11,12,1,15,1,4,3,18,6,6,1,1,4,8,11,12,18,6,1,4,8,11,12,1,6,4,1,15,1,4,4,0,11,6,6,6,1,8,13,18,6,4,4,0,11,8,12,12,6,16,6,1,4,6,1,4,8,18,6,1,4,8,11,12,18,6,1,4,8,11,12,6,4,18,6,1,4,8,11,12,0,1,4],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[-1]]],-1,[2,3]],[[[4,[-1]]],[],[]],[[[1,[-1]]],-1,[2,3]],[[[4,[-1]]],[[5,[-1]]],[2,3]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],-1,[2,3]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],-1,[2,3]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[6,[-1]]],[2,3]],[[[1,[-1]]],[[1,[-1]]],7],[[[4,[-1]]],[[4,[-1]]],[2,3]],[8,8],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[4,[-1]],[4,[-1]]],10,[2,3]],[11,8],[12,[[5,[8]]]],[[[6,[-1]],[4,[-1]],-2,-3,12],[[14,[[4,[-1]],[13,[-1,-2]]]]],[2,3],[[15,[-1]]],16],[[[6,[-1]],[4,[-1]],-2,-3,12],[[14,[[4,[-1]],[13,[-1,-2]]]]],[2,3],[[15,[-1]]],16],[[[6,[-1]],[4,[-1]],-2,17,17,12],[[14,[[4,[-1]],[18,[-1,-2]]]]],[2,3],[[15,[-1]]]],[[[6,[-1]],[4,[-1]],-2,17,17,12],[[14,[[4,[-1]],[18,[-1,-2]]]]],[2,3],[[15,[-1]]]],0,0,[[],[[6,[-1]]],[2,3]],[[],[[4,[-1]]],[2,3]],[[],8],[[],8],[[12,-2],9,[],[[20,[],[[19,[-1]]]],21]],[[12,[4,[-1]]],9,[]],[[12,-2],9,[],[[20,[],[[19,[-1]]]]]],[22,[[3,[],[[23,[-1]]]]],[]],[22,-1,[]],[22,-1,[]],[[[1,[-1]]],-1,[2,3]],[22,-1,[]],[[[4,[-1]]],-1,[2,3]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,[[3,[],[[23,[-1]]]]],[]],[22,-1,[]],[22,-1,[]],[[[1,[-1]]],-1,[2,3]],[22,-1,[]],[[[4,[-1]]],-1,[2,3]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,-1,[]],[22,9],[22,9],[22,9],[[[1,[-1]]],9,[2,3]],[22,9],[22,9],[22,9],[11,9],[22,9],[12,9],[22,9],[[[4,[-1]],[4,[-1]]],24,[2,3]],[[8,8],24],[16,17],[[[6,[-1]],22,17,12],[[4,[-1]]],[2,3]],[[[6,[-1]],22,17,12],[[4,[-1]]],[2,3]],[[[6,[-1]],17,17,12,-2],[[14,[[4,[-1]],[4,[-1]]]]],[2,3],[[25,[[4,[-1]]],[[19,[[5,[[4,[-1]]]]]]]]]],[[[6,[-1]],22,17,12],[[4,[-1]]],[2,3]],[12,9],[[[18,[-1,-2]],26],27,[],[[15,[-1]],28]],[[[6,[-1]],26],27,[2,3]],[[[6,[-1]],26],27,[2,3]],[[[1,[-1]],26],27,[2,3]],[[[4,[-1]],26],27,[2,3]],[[[4,[-1]],26],27,[2,3]],[[8,26],27],[[11,26],27],[[12,26],27],[-1,-1,[]],[29,-1,[]],[-1,-1,[]],[[[4,[-1]]],[[6,[-1]]],[2,3]],[[[1,[-1]]],[[6,[-1]]],[2,3]],[[],[[6,[-1]]],[]],[[[30,[-1]]],[[6,[-1]]],[]],[-1,[[6,[-1]]],[]],[[[30,[-1]]],[[1,[-1]]],[]],[-1,-1,[]],[29,-1,[]],[-1,[[1,[-1]]],[]],[[],[[4,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[1,[-1]]],[]],[22,15],[22,[[1,[-1]]],[2,3]],[22,[[4,[-1]]],[2,3]],[-1,22,[]],[[],22],[[],[[6,[-1]]],[2,3]],[[],22],[[],[[1,[-1]]],[2,3]],[[],22],[[],22],[[],22],[[],22],[[],22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[30,[-1]]],[]],[[[6,[-1]]],[[1,[-1]]],[2,3]],[[[4,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],12],[[4,[-1]]],[2,3]],[15,22],[[[1,[-1]]],22,[2,3]],[[[4,[-1]]],22,[2,3]],[[[4,[-1]]],24,[2,3]],[[],24],[11,24],[[[6,[-1]],17,12],[[4,[-1]]],[2,3]],[[[6,[-1]],12],[[4,[-1]]],[2,3]],[-1,[[6,[-1]]],[]],[-1,[[1,[-1]]],[]],[[],8],0,0,[[],[[6,[-1]]],[2,3]],[[],[[4,[-1]]],[2,3]],[[[4,[-1]],[4,[-1]]],[[5,[10]]],[2,3]],[[],12],[11,12],[8,11],[12,9],[[12,-2],-1,[],[[20,[],[[19,[-1]]]]]],[[[6,[-1]],-2,17],9,[2,3],[[15,[-1]]]],[16,17],[[[6,[-1]],-2,17,12],[[4,[-1]]],[2,3],[[15,[-1]]]],[[[1,[-1]]],22,[2,3]],[[[4,[-1]]],22,[2,3]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[[[6,[-1]]],[[5,[[1,[-1]]]]],[2,3]],[[[4,[-1]]],[[5,[[1,[-1]]]]],[2,3]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[[],12],[[[1,[-1]],22],[[1,[-1]]],[2,3]],[[[4,[-1]],22],[[4,[-1]]],[2,3]]],"c":[3,4,44,45,90,169],"p":[[5,"Owned",0],[10,"Sized",203],[10,"Pointable",0],[5,"Shared",0],[6,"Option",204],[5,"Atomic",0],[10,"Clone",205],[5,"Collector",0],[1,"tuple"],[6,"Ordering",206],[5,"LocalHandle",0],[5,"Guard",0],[8,"CompareAndSetError",0],[6,"Result",207],[10,"Pointer",0],[10,"CompareAndSetOrdering",0],[6,"Ordering",208],[5,"CompareExchangeError",0],[17,"Output"],[10,"FnOnce",209],[10,"Send",203],[1,"usize"],[17,"Init"],[1,"bool"],[10,"FnMut",209],[5,"Formatter",210],[8,"Result",210],[10,"Debug",210],[1,"never"],[5,"Box",211],[5,"TypeId",212]],"b":[[97,"impl-Pointer-for-Atomic%3CT%3E"],[98,"impl-Debug-for-Atomic%3CT%3E"],[100,"impl-Debug-for-Shared%3C\'_,+T%3E"],[101,"impl-Pointer-for-Shared%3C\'_,+T%3E"],[108,"impl-From%3CShared%3C\'g,+T%3E%3E-for-Atomic%3CT%3E"],[109,"impl-From%3COwned%3CT%3E%3E-for-Atomic%3CT%3E"],[110,"impl-From%3C*const+T%3E-for-Atomic%3CT%3E"],[111,"impl-From%3CBox%3CT%3E%3E-for-Atomic%3CT%3E"],[112,"impl-From%3CT%3E-for-Atomic%3CT%3E"],[113,"impl-From%3CBox%3CT%3E%3E-for-Owned%3CT%3E"],[116,"impl-From%3CT%3E-for-Owned%3CT%3E"]]}],\
["crossbeam_utils",{"doc":"Miscellaneous tools for concurrent programming.","t":"FFCNNNNNNNNNNNNNNNNNNNNNNNNNNNCCNNNNNNNFKRNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNN","n":["Backoff","CachePadded","atomic","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","from","from","from","from","hash","into","into","into_inner","is_completed","new","new","reset","snooze","spin","sync","thread","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","AtomicCell","AtomicConsume","Val","as_ptr","borrow","borrow_mut","compare_and_swap","compare_exchange","default","drop","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_update","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fmt","from","from","from","into","into_inner","is_lock_free","load","load_consume","new","store","swap","take","try_from","try_into","type_id","Parker","ShardedLock","ShardedLockReadGuard","ShardedLockWriteGuard","Unparker","WaitGroup","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","default","deref","deref","deref_mut","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_raw","from_raw","get_mut","into","into","into","into","into","into","into_inner","into_raw","into_raw","is_poisoned","new","new","new","park","park_deadline","park_timeout","read","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_read","try_write","type_id","type_id","type_id","type_id","type_id","type_id","unpark","unparker","wait","write","Scope","ScopedJoinHandle","ScopedThreadBuilder","as_pthread_t","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","fmt","fmt","fmt","from","from","from","into","into","into","into_pthread_t","join","name","scope","spawn","spawn","stack_size","thread","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"crossbeam_utils"],[39,"crossbeam_utils::atomic"],[166,"crossbeam_utils::sync"],[260,"crossbeam_utils::thread"],[297,"core::clone"],[298,"core::default"],[299,"core::cmp"],[300,"core::fmt"],[301,"core::fmt"],[302,"core::hash"],[303,"core::any"],[304,"core::marker"],[305,"core::cmp"],[306,"core::ops::function"],[307,"core::marker"],[308,"std::time"],[309,"core::time"],[310,"alloc::string"],[311,"std::sync::poison"],[312,"std::thread"],[313,"core::ops::function"],[314,"std::thread"]],"d":["Performs exponential backoff in spin loops.","Pads and aligns a value to the length of a cache line.","Atomic types.","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inner value.","Returns <code>true</code> if exponential backoff has completed and …","Creates a new <code>Backoff</code>.","Pads and aligns a value to the length of a cache line.","Resets the <code>Backoff</code>.","Backs off in a blocking loop.","Backs off in a lock-free loop.","Thread synchronization primitives.","Threads that can borrow variables from the stack.","","","","","","","","A thread-safe mutable memory location.","Trait which allows reading from primitive atomic types …","Type returned by <code>load_consume</code>.","Returns a raw pointer to the underlying data in this …","","","If the current value equals <code>current</code>, stores <code>new</code> into the …","If the current value equals <code>current</code>, stores <code>new</code> into the …","","","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies logical “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies logical “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies logical “or” to the current value and returns …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Fetches the value, and applies a function to it that …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies logical “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Consumes the atomic and returns the contained value.","Returns <code>true</code> if operations on values of this type are …","Loads a value from the atomic cell.","Loads a value from the atomic using a “consume” memory …","Creates a new atomic cell initialized with <code>val</code>.","Stores <code>val</code> into the atomic cell.","Stores <code>val</code> into the atomic cell and returns the previous …","Takes the value of the atomic cell, leaving …","","","","A thread parking primitive.","A sharded reader-writer lock.","A guard used to release the shared read access of a …","A guard used to release the exclusive write access of a …","Unparks a thread parked by the associated <code>Parker</code>.","Enables threads to synchronize the beginning or end of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a raw pointer into a <code>Parker</code>.","Converts a raw pointer into an <code>Unparker</code>.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this lock, returning the underlying data.","Converts a <code>Parker</code> into a raw pointer.","Converts an <code>Unparker</code> into a raw pointer.","Returns <code>true</code> if the lock is poisoned.","Creates a new <code>Parker</code>.","Creates a new sharded reader-writer lock.","Creates a new wait group and returns the single reference …","Blocks the current thread until the token is made …","Blocks the current thread until the token is made …","Blocks the current thread until the token is made …","Locks with shared read access, blocking the current thread …","","","","","","","","","","","","","","","","","Attempts to acquire this lock with shared read access.","Attempts to acquire this lock with exclusive write access.","","","","","","","Atomically makes the token available if it is not already.","Returns a reference to an associated <code>Unparker</code>.","Drops this reference and waits until all other references …","Locks with exclusive write access, blocking the current …","A scope for spawning threads.","A handle that can be used to join its scoped thread.","Configures the properties of a new thread.","","","","","","","","Creates a builder that can configure a thread before …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Waits for the thread to finish and returns its result.","Sets the name for the new thread.","Creates a new scope for spawning threads.","Spawns a scoped thread.","Spawns a scoped thread with this configuration.","Sets the size of the stack for the new thread.","Returns a handle to the underlying thread.","","","","","","","","",""],"i":[0,0,0,4,1,4,1,1,1,4,1,1,1,1,4,1,4,1,1,1,1,4,1,1,4,4,1,4,4,4,0,0,1,4,1,4,1,4,1,0,0,35,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,35,16,16,16,16,16,16,16,0,0,0,0,0,0,38,36,39,37,40,42,38,36,39,37,40,42,36,37,36,37,38,39,37,40,42,42,37,42,38,36,39,37,40,40,42,42,38,36,39,39,39,37,40,42,38,36,39,38,36,39,37,40,42,39,38,36,39,38,39,37,38,38,38,39,36,37,40,42,38,36,39,37,40,42,38,36,39,37,40,42,39,39,38,36,39,37,40,42,36,38,37,39,0,0,0,49,51,49,52,51,49,52,51,51,49,52,51,49,52,51,49,52,49,49,52,0,51,52,52,49,51,49,52,51,49,52,51,49,52],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[1,[-1]]],2],[[-1,-2],3,[],[]],[[],4],[[],[[1,[-1]]],5],[[[1,[-1]]],-1,[]],[[[1,[-1]]],-1,[]],[[[1,[-1]],[1,[-1]]],6,7],[[4,8],9],[[[1,[-1]],8],9,10],[-1,-1,[]],[11,-1,[]],[-1,-1,[]],[-1,[[1,[-1]]],[]],[[[1,[-1]],-2],3,12,13],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],-1,[]],[4,6],[[],4],[-1,[[1,[-1]]],[]],[4,3],[4,3],[4,3],0,0,[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],0,0,0,[[[16,[-1]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[-1]],-1,-1],-1,[17,18]],[[[16,[-1]],-1,-1],[[14,[-1,-1]]],[17,18]],[[],[[16,[-1]]],5],[[[16,[-1]]],3,[]],[[[16,[19]],19],19],[[[16,[20]],20],20],[[[16,[21]],21],21],[[[16,[22]],22],22],[[[16,[23]],23],23],[[[16,[24]],24],24],[[[16,[25]],25],25],[[[16,[26]],26],26],[[[16,[27]],27],27],[[[16,[28]],28],28],[[[16,[29]],29],29],[[[16,[30]],30],30],[[[16,[28]],28],28],[[[16,[21]],21],21],[[[16,[24]],24],24],[[[16,[26]],26],26],[[[16,[22]],22],22],[[[16,[30]],30],30],[[[16,[6]],6],6],[[[16,[19]],19],19],[[[16,[29]],29],29],[[[16,[25]],25],25],[[[16,[23]],23],23],[[[16,[20]],20],20],[[[16,[27]],27],27],[[[16,[29]],29],29],[[[16,[27]],27],27],[[[16,[22]],22],22],[[[16,[19]],19],19],[[[16,[25]],25],25],[[[16,[26]],26],26],[[[16,[30]],30],30],[[[16,[28]],28],28],[[[16,[23]],23],23],[[[16,[24]],24],24],[[[16,[21]],21],21],[[[16,[20]],20],20],[[[16,[23]],23],23],[[[16,[29]],29],29],[[[16,[28]],28],28],[[[16,[30]],30],30],[[[16,[26]],26],26],[[[16,[25]],25],25],[[[16,[19]],19],19],[[[16,[22]],22],22],[[[16,[24]],24],24],[[[16,[21]],21],21],[[[16,[20]],20],20],[[[16,[27]],27],27],[[[16,[24]],24],24],[[[16,[29]],29],29],[[[16,[23]],23],23],[[[16,[20]],20],20],[[[16,[6]],6],6],[[[16,[19]],19],19],[[[16,[21]],21],21],[[[16,[26]],26],26],[[[16,[27]],27],27],[[[16,[25]],25],25],[[[16,[22]],22],22],[[[16,[30]],30],30],[[[16,[28]],28],28],[[[16,[20]],20],20],[[[16,[19]],19],19],[[[16,[29]],29],29],[[[16,[24]],24],24],[[[16,[25]],25],25],[[[16,[23]],23],23],[[[16,[21]],21],21],[[[16,[22]],22],22],[[[16,[30]],30],30],[[[16,[27]],27],27],[[[16,[26]],26],26],[[[16,[28]],28],28],[[[16,[6]],6],6],[[[16,[22]],22],22],[[[16,[29]],29],29],[[[16,[24]],24],24],[[[16,[28]],28],28],[[[16,[30]],30],30],[[[16,[27]],27],27],[[[16,[19]],19],19],[[[16,[21]],21],21],[[[16,[26]],26],26],[[[16,[20]],20],20],[[[16,[25]],25],25],[[[16,[23]],23],23],[[[16,[-1]],-2],[[14,[-1,-1]]],[17,18],[[33,[-1],[[31,[[32,[-1]]]]]]]],[[[16,[19]],19],19],[[[16,[28]],28],28],[[[16,[21]],21],21],[[[16,[30]],30],30],[[[16,[29]],29],29],[[[16,[23]],23],23],[[[16,[20]],20],20],[[[16,[25]],25],25],[[[16,[24]],24],24],[[[16,[22]],22],22],[[[16,[6]],6],6],[[[16,[27]],27],27],[[[16,[26]],26],26],[[[16,[-1]],8],9,[17,10]],[-1,[[16,[-1]]],[]],[11,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[[[16,[-1]]],-1,[]],[[],6],[[[16,[-1]]],-1,17],[[[35,[],[[34,[-1]]]]],-1,[]],[-1,[[16,[-1]]],[]],[[[16,[-1]],-1],3,[]],[[[16,[-1]],-1],-1,[]],[[[16,[-1]]],-1,5],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,36],[37,37],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[],38],[[],[[39,[-1]]],5],[[],37],[[[40,[-1]]],-1,41],[[[42,[-1]]],-1,41],[[[42,[-1]]],-1,41],[37,3],[[[42,[-1]]],3,41],[[38,8],9],[[36,8],9],[[[39,[-1]],8],9,[41,10]],[[37,8],9],[[[40,[-1]],8],9,10],[[[40,[-1]],8],9,[41,43]],[[[42,[-1]],8],9,10],[[[42,[-1]],8],9,[41,43]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[11,-1,[]],[-1,[[39,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[3,38],[3,36],[[[39,[-1]]],[[44,[-1]]],41],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[39,[-1]]],[[44,[-1]]],[]],[38,3],[36,3],[[[39,[-1]]],6,41],[[],38],[-1,[[39,[-1]]],[]],[[],37],[38,3],[[38,45],3],[[38,46],3],[[[39,[-1]]],[[44,[[40,[-1]]]]],41],[-1,-2,[],[]],[-1,-2,[],[]],[-1,47,[]],[-1,47,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[[[39,[-1]]],[[48,[[40,[-1]]]]],41],[[[39,[-1]]],[[48,[[42,[-1]]]]],41],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[36,3],[38,36],[37,3],[[[39,[-1]]],[[44,[[42,[-1]]]]],41],0,0,0,[[[49,[-1]]],50,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[51,52],[[51,8],9],[[[49,[-1]],8],9,[]],[[52,8],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[49,[-1]]],50,[]],[[[49,[-1]]],[[53,[-1]]],[]],[[52,47],52],[-2,[[53,[-1]]],[],[[54,[51],[[31,[-1]]]]]],[[51,-2],[[49,[-1]]],55,[[54,[51],[[31,[-1]]]],55]],[[52,-2],[[56,[[49,[-1]]]]],55,[[54,[51],[[31,[-1]]]],55]],[[52,28],52],[[[49,[-1]]],57,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]]],"c":[45],"p":[[5,"CachePadded",0],[10,"Clone",297],[1,"tuple"],[5,"Backoff",0],[10,"Default",298],[1,"bool"],[10,"PartialEq",299],[5,"Formatter",300],[8,"Result",300],[10,"Debug",300],[1,"never"],[10,"Hash",301],[10,"Hasher",301],[6,"Result",302],[5,"TypeId",303],[5,"AtomicCell",39],[10,"Copy",304],[10,"Eq",299],[1,"u8"],[1,"isize"],[1,"u128"],[1,"i128"],[1,"i16"],[1,"i64"],[1,"u64"],[1,"u32"],[1,"i32"],[1,"usize"],[1,"u16"],[1,"i8"],[17,"Output"],[6,"Option",305],[10,"FnMut",306],[17,"Val"],[10,"AtomicConsume",39],[5,"Unparker",166],[5,"WaitGroup",166],[5,"Parker",166],[5,"ShardedLock",166],[5,"ShardedLockReadGuard",166],[10,"Sized",304],[5,"ShardedLockWriteGuard",166],[10,"Display",300],[8,"LockResult",307],[5,"Instant",308],[5,"Duration",309],[5,"String",310],[8,"TryLockResult",307],[5,"ScopedJoinHandle",260],[8,"RawPthread",311],[5,"Scope",260],[5,"ScopedThreadBuilder",260],[8,"Result",312],[10,"FnOnce",306],[10,"Send",304],[8,"Result",313],[5,"Thread",312]],"b":[[49,"impl-AtomicCell%3Cu8%3E"],[50,"impl-AtomicCell%3Cisize%3E"],[51,"impl-AtomicCell%3Cu128%3E"],[52,"impl-AtomicCell%3Ci128%3E"],[53,"impl-AtomicCell%3Ci16%3E"],[54,"impl-AtomicCell%3Ci64%3E"],[55,"impl-AtomicCell%3Cu64%3E"],[56,"impl-AtomicCell%3Cu32%3E"],[57,"impl-AtomicCell%3Ci32%3E"],[58,"impl-AtomicCell%3Cusize%3E"],[59,"impl-AtomicCell%3Cu16%3E"],[60,"impl-AtomicCell%3Ci8%3E"],[61,"impl-AtomicCell%3Cusize%3E"],[62,"impl-AtomicCell%3Cu128%3E"],[63,"impl-AtomicCell%3Ci64%3E"],[64,"impl-AtomicCell%3Cu32%3E"],[65,"impl-AtomicCell%3Ci128%3E"],[66,"impl-AtomicCell%3Ci8%3E"],[67,"impl-AtomicCell%3Cbool%3E"],[68,"impl-AtomicCell%3Cu8%3E"],[69,"impl-AtomicCell%3Cu16%3E"],[70,"impl-AtomicCell%3Cu64%3E"],[71,"impl-AtomicCell%3Ci16%3E"],[72,"impl-AtomicCell%3Cisize%3E"],[73,"impl-AtomicCell%3Ci32%3E"],[74,"impl-AtomicCell%3Cu16%3E"],[75,"impl-AtomicCell%3Ci32%3E"],[76,"impl-AtomicCell%3Ci128%3E"],[77,"impl-AtomicCell%3Cu8%3E"],[78,"impl-AtomicCell%3Cu64%3E"],[79,"impl-AtomicCell%3Cu32%3E"],[80,"impl-AtomicCell%3Ci8%3E"],[81,"impl-AtomicCell%3Cusize%3E"],[82,"impl-AtomicCell%3Ci16%3E"],[83,"impl-AtomicCell%3Ci64%3E"],[84,"impl-AtomicCell%3Cu128%3E"],[85,"impl-AtomicCell%3Cisize%3E"],[86,"impl-AtomicCell%3Ci16%3E"],[87,"impl-AtomicCell%3Cu16%3E"],[88,"impl-AtomicCell%3Cusize%3E"],[89,"impl-AtomicCell%3Ci8%3E"],[90,"impl-AtomicCell%3Cu32%3E"],[91,"impl-AtomicCell%3Cu64%3E"],[92,"impl-AtomicCell%3Cu8%3E"],[93,"impl-AtomicCell%3Ci128%3E"],[94,"impl-AtomicCell%3Ci64%3E"],[95,"impl-AtomicCell%3Cu128%3E"],[96,"impl-AtomicCell%3Cisize%3E"],[97,"impl-AtomicCell%3Ci32%3E"],[98,"impl-AtomicCell%3Ci64%3E"],[99,"impl-AtomicCell%3Cu16%3E"],[100,"impl-AtomicCell%3Ci16%3E"],[101,"impl-AtomicCell%3Cisize%3E"],[102,"impl-AtomicCell%3Cbool%3E"],[103,"impl-AtomicCell%3Cu8%3E"],[104,"impl-AtomicCell%3Cu128%3E"],[105,"impl-AtomicCell%3Cu32%3E"],[106,"impl-AtomicCell%3Ci32%3E"],[107,"impl-AtomicCell%3Cu64%3E"],[108,"impl-AtomicCell%3Ci128%3E"],[109,"impl-AtomicCell%3Ci8%3E"],[110,"impl-AtomicCell%3Cusize%3E"],[111,"impl-AtomicCell%3Cisize%3E"],[112,"impl-AtomicCell%3Cu8%3E"],[113,"impl-AtomicCell%3Cu16%3E"],[114,"impl-AtomicCell%3Ci64%3E"],[115,"impl-AtomicCell%3Cu64%3E"],[116,"impl-AtomicCell%3Ci16%3E"],[117,"impl-AtomicCell%3Cu128%3E"],[118,"impl-AtomicCell%3Ci128%3E"],[119,"impl-AtomicCell%3Ci8%3E"],[120,"impl-AtomicCell%3Ci32%3E"],[121,"impl-AtomicCell%3Cu32%3E"],[122,"impl-AtomicCell%3Cusize%3E"],[123,"impl-AtomicCell%3Cbool%3E"],[124,"impl-AtomicCell%3Ci128%3E"],[125,"impl-AtomicCell%3Cu16%3E"],[126,"impl-AtomicCell%3Ci64%3E"],[127,"impl-AtomicCell%3Cusize%3E"],[128,"impl-AtomicCell%3Ci8%3E"],[129,"impl-AtomicCell%3Ci32%3E"],[130,"impl-AtomicCell%3Cu8%3E"],[131,"impl-AtomicCell%3Cu128%3E"],[132,"impl-AtomicCell%3Cu32%3E"],[133,"impl-AtomicCell%3Cisize%3E"],[134,"impl-AtomicCell%3Cu64%3E"],[135,"impl-AtomicCell%3Ci16%3E"],[137,"impl-AtomicCell%3Cu8%3E"],[138,"impl-AtomicCell%3Cusize%3E"],[139,"impl-AtomicCell%3Cu128%3E"],[140,"impl-AtomicCell%3Ci8%3E"],[141,"impl-AtomicCell%3Cu16%3E"],[142,"impl-AtomicCell%3Ci16%3E"],[143,"impl-AtomicCell%3Cisize%3E"],[144,"impl-AtomicCell%3Cu64%3E"],[145,"impl-AtomicCell%3Ci64%3E"],[146,"impl-AtomicCell%3Ci128%3E"],[147,"impl-AtomicCell%3Cbool%3E"],[148,"impl-AtomicCell%3Ci32%3E"],[149,"impl-AtomicCell%3Cu32%3E"],[200,"impl-Debug-for-ShardedLockReadGuard%3C\'_,+T%3E"],[201,"impl-Display-for-ShardedLockReadGuard%3C\'_,+T%3E"],[202,"impl-Debug-for-ShardedLockWriteGuard%3C\'_,+T%3E"],[203,"impl-Display-for-ShardedLockWriteGuard%3C\'_,+T%3E"]]}],\
["datom",{"doc":"An open-source database inspired by Datomic.","t":"PPPPFFGPPPFGPPFFFGPPIPGFGGPPFPPPPGPPPPPPGPPPPPPPPPGPPKFGFFPPPPGPNNONNONCONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNHNNNNHNNNNNNNCNNNNNCOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNONOHFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNJJIIISSSSSSSSSSSSSSSHHHHHHHHHHHHHHHHHHHHHKIIKMMM","n":["AEVT","AVET","Add","Addition","AttributeIterator","AttributeSchema","AttributeType","Boolean","Boolean","ConcurrencyError","Connection","ConnectionError","ConnectionError","ConnectionError","Database","Datom","DatomIterator","DatomType","Decimal","Decimal","DynamicConnection","EAVT","EID","Entity","EntityResult","Fact","FailedToRetractNonexistentAttribute","FailedToRetractRepeatedAttribute","ID","ID","ID","IOError","Ident","Index","Integer","Integer","InternedIdent","InvalidData","Miscellaneous","NotFound","QueryError","QueryError","Ref","Ref","Repeated","Resolved","Retract","RetractValue","Retraction","Storage","StorageError","String","String","Transactable","Transaction","TransactionError","TransactionRecord","TransactionResult","Unique","UnresolvedEID","UnresolvedEID","VAET","Value","Value","add","add_many","after","append","as_of","attribute","attributes","backends","before","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builtin_idents","byte","byte","bytes","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","code","code","code","code","component","component","connection","data","datom","datom_type","datoms","datoms","datoms_for_attribute_value","datoms_for_entity","datoms_for_entity_attribute","datoms_for_value_attribute","db","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","doc","doc","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","entity","entity","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_byte","from_byte","from_bytes","from_edn","from_edn","from_str","from_u128","get","get_with_options","hash","hash","hash","hash","hash","id","id","ident","ident","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_edn","into_iter","into_iter","is_ref_to","latest_t","many","many","new","new","new","new","new_dynamic_connection","next","next","next_back","null","parse_edn","partial_cmp","partial_cmp","push_fact","resolve","retract","retract_value","reverse_get","serial","set_id","source","source","source","source","storage","t","t","timestamp","to_edn","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","transact","transact_tx","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tx","tx","tx","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unique","unique","unique","url","url","url","url","value","value_type","value_type","version","RedBlackTreeSetStorage","SledStorage","TieredStorage","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","connect","connect_temp","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","id","id","id","init","init","init","insert","insert","insert","into","into","into","new","new","range","range","range","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BUILTIN_ENTITIES","BUILTIN_ENTITIES_BY_IDENT","BuiltinEntities","BuiltinEntitiesByIdent","BuiltinEntity","CARDINALITY","CARDINALITY_MANY","CARDINALITY_ONE","DOC","ID","IDENT","IS_COMPONENT","TYPE_BOOLEAN","TYPE_DECIMAL","TYPE_ID","TYPE_INTEGER","TYPE_REF","TYPE_STRING","UNIQUE","VALUE_TYPE","avet_attribute_value_range","deserialize","deserialize_aevt","deserialize_avet","deserialize_eavt","deserialize_tr","deserialize_unknown","deserialize_vaet","eavt_entity_attribute_range","eavt_entity_range","index_range","range_slice","serialize","serialize_aevt","serialize_avet","serialize_eavt","serialize_tr","serialize_vaet","tr_range","vaet_value_attribute_range","vec_range_slice","DurableStorage","Item","ItemIterator","Storage","id","insert","range"],"q":[[0,"datom"],[527,"datom::backends"],[577,"datom::builtin_idents"],[597,"datom::serial"],[618,"datom::storage"],[625,"std::collections::hash::map"],[626,"core::result"],[627,"alloc::vec"],[628,"core::clone"],[629,"core::cmp"],[630,"core::fmt"],[631,"alloc::boxed"],[632,"core::option"],[633,"alloc::string"],[634,"core::cmp"],[635,"std::io::error"],[636,"sled::transaction"],[637,"core::error"],[638,"num_bigint::bigint"],[639,"datom_bigdecimal"],[640,"edn_rs::edn"],[641,"core::hash"],[642,"core::any"],[643,"core::ops::range"]],"d":["Attribute-Entity-Value-T index","Attribute-Value-Entity-T index","Adding an attribute value to an entity","Adding an attribute value to an entity","An iterator over attributes in a sled-backed database","An imperative way to generate an attribute’s schema","The type of an attribute’s values","A Value::Boolean","A basic boolean","","A persistent connection to a database","Network/disk errors","","","A view of a database at a specific point in time","A <em>datom</em>, or a single fact at a single point in time. Short …","An iterator over Datoms","Whether a datom is showing an addition or a retraction","A Value::Decimal","A basic decimal, of arbitrary length and precision","A connection which uses a dynamically dispatched storage …","Entity-Attribute-Value-T index","An un-resolved entity ID, which can be used to resolve …","An entity in a database","The result of getting an attribute on an entity","A fact which hasn’t yet been converted to a Datom (or …","","","An entity ID","A Value::ID","An entity ID","","Resolve an entity by its ident","The four indices used in the underlying data store. The …","A Value::Integer","A basic integer, of arbitrary length","Resolve an entity by a static ident","","","A value for that attribute wasn’t found on this entity","Errors during a Database query","","A Value::ID referring to an entity","A value for that attribute was found on this entity, and it","Possibly multiple values for that attribute were found on …","A resolved entity ID","Retracting an attribute from an entity, no matter its value","Retracting a specific attribute value from an entity","Removing an attribute value from an entity","","An error in the underlying storage backend","A Value::String","A basic string","A type which can be appended to a transaction","A set of facts which can be transacted into a database …","Errors during a Transaction","The record of a past transaction","The result of running a Transaction on a Connection","Resolve an entity by a unique attribute","","","Value-Attribute-Entity-T index","An attribute value.","A value for that attribute was found on this entity","Add an attribute value to an entity","Add many attribute values to an entity","The Database after the transaction","Append a transactable to this transaction","Fetch the t-value for the latest transaction","The attribute this Datom is setting on the entity","Get the attributes on this entity","Storage backends","The Database before the transaction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","IDs for the built-in attributes and other idents","Map the DatomType to its byte representation","Map the Index to its byte representation","Serialize the Value to a Vec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the attribute as being a component reference","Whether this attribute refers to a component","The Connection the Transaction was run on","The Datoms added to the database in the transaction","Convert this Fact into a Datom, given a Database","Whether this Datom is adding or retracting data","Get all datoms in the given index","Convert the Transaction to a set of Datoms","Get all datoms in the AVET index for the given attribute …","Get all datoms in the EAVT index for the given entity","Get all datoms in the EAVT index for the given entity and …","Get all datoms in the VAET index for the given value and …","Get a database for the current point in time","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the attribute’s docstring","A docstring for this attribute","","","","","","","","","","","","","","","","","","","","","","","Get an entity","The entity this Datom is attached to","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Map byte representation to a DatomType","Map byte representation to an Index","Deserialize the Value from a byte slice","Create a fact from an EDN fact representation","Create a transaction from an EDN list of facts","","A const equivalent to From::from","Get the value of an attribute on this entity","Get the value of an attribute on this entity, with options","","","","","","Get the ID of this entity","The attribute’s ID","Set the attribute’s ident","The attribute’s unique identifier","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the edn representation for this value","","","Check if the result is a reference to a specific ID","Fetch the t-value for the latest transaction","Set the attribute’s cardinality to many","Whether this attribute can store multiple values for an …","Create a new connection from a storage backend","Start generating an attribute’s schema","Generate a new ID from the current time.","Create a new empty Transaction","Create a new connection which uses a dynamically …","","","","Get the null UUID, which is all zeroes.","Parse an EDN string to an Edn object","","","Add a raw Fact","Resolve this EID into its ID according to a Database","Retract an attribute from an entity, ignoring its value","Retract a specific attribute value from an entity","Get the entities with this entity as a value on an …","Serialization/deserialization functions","Set a specific ID for an attribute","","","","","API for storage backends","The t-value of this transaction","The t-value for the transaction which introduced this Datom","When this transaction was transacted","Generate an EDN representation from a fact","","","","","","","","","","","","","","","","","","Transact a transactable on the database","Run a transaction on the database","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a transaction to add this object to the database","","","","","","","","","","","","","","","","","","","","","","","","","Set the attribute as unique","Create an EID to resolve an entity by a unique attribute","Whether there can only be one entity of each value for this","","","","","The value for the attribute","Set the attribute’s value type","What type values should be in this attribute","Get the version of this datom build","A storage backend backed by a RedBlackTreeSetSync","A storage backend backed by a sled database","A storage backend backed by two other storage backends …","","","","","","","Create a connection to a database.","Create a connection to a temporary database. When the …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new empty RedBlackTreeSetStorage","Create a new tiered storage from two other storages","","","","","","","","","","","","","The data behind all built-in entities","The data behind all built-in entities, by ident","The type of the data behind all built-in entities","The type of the data behind all built-in entities, by ident","The data behind a built-in entity","Whether an attribute associates one value or multiple …","A value for the CARDINALITY attribute","A value for the CARDINALITY attribute","A documentation string for an entity","An entity’s ID. This is a virtual attribute, and isn’t …","An entity’s alias, usually used for the attribute schema.","Whether the entity referred to in this TYPE_REF attribute …","A value for the VALUE_TYPE attribute","A value for the VALUE_TYPE attribute","A value for the VALUE_TYPE attribute","A value for the VALUE_TYPE attribute","A value for the VALUE_TYPE attribute","A value for the VALUE_TYPE attribute","Whether there can only be one entity per value for this …","The intended type for an attribute. Note that this is not …","Create a range encompassing every possible datom for a …","Deserialize a datom from a given index","Deserialize a datom in attribute-entity-value-t order","Deserialize a datom in attribute-value-entity-t order","Deserialize a datom in entity-attribute-value-t order","Deserialize a TransactionRecord","Deserialize a datom from any index","Deserialize a datom in value-attribute-entity-t order","Create a range encompassing every possible datom for a …","Create a range encompassing every possible datom for a …","Create a range encompassing an entire index","Convert a range of arrays to a range of slices","Serialize a datom for a given index","Serialize a datom in attribute-entity-value-t order","Serialize a datom in attribute-value-entity-t order","Serialize a datom in entity-attribute-value-t order","Serialize a TransactionRecord","Serialize a datom in value-attribute-entity-t order","Create a range encompassing every transaction result","Create a range encompassing every possible datom for a …","Convert a range of Vecs to a range of slices","A storage backend which persists its state. This may take …","A serialized datom","An iterator over a sorted set of datoms","A std::collections::BTreeSet-like storage backend","Get a unique ID for this instance","Insert many new items into the backend (in one …","Get all items within this range"],"i":[18,18,25,16,0,0,0,20,3,28,0,0,15,32,0,0,0,0,20,3,0,18,0,0,0,0,32,32,0,20,3,28,2,0,20,3,2,10,28,23,0,32,20,23,23,2,25,25,16,10,0,20,3,0,0,0,0,0,2,15,32,18,0,23,1,1,62,1,7,22,13,0,62,14,7,33,72,62,20,21,10,9,16,22,2,23,13,25,26,18,15,28,32,1,3,14,7,33,72,62,20,21,10,9,16,22,2,23,13,25,26,18,15,28,32,1,3,0,16,18,3,20,21,16,22,2,23,13,25,26,18,1,3,20,21,16,22,2,23,13,25,26,18,1,3,26,28,10,15,28,32,21,21,62,62,25,22,9,1,9,9,9,9,7,21,26,1,14,7,33,72,62,20,21,10,9,16,22,2,23,13,25,26,18,15,28,32,1,3,14,7,33,72,62,20,21,10,9,16,22,2,23,13,25,26,18,15,28,32,1,3,21,21,14,7,33,72,62,20,21,10,9,16,22,2,23,13,25,26,18,15,28,32,1,3,9,22,7,16,22,2,23,23,23,23,23,13,26,18,28,3,7,10,10,9,16,22,2,23,13,25,26,18,15,15,28,28,32,32,1,3,14,7,33,72,62,20,21,10,10,9,16,22,2,2,2,2,23,23,23,13,25,26,26,26,26,18,15,15,15,28,28,28,28,28,32,32,32,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,16,18,3,25,1,26,26,13,13,2,23,13,26,3,13,21,21,21,14,7,33,72,62,20,21,10,9,16,22,2,23,13,25,26,18,15,28,32,1,3,14,7,33,72,62,20,21,10,9,16,22,2,23,13,25,26,18,15,28,32,1,3,3,14,33,23,7,21,21,7,21,26,1,0,14,33,33,26,0,26,28,1,2,1,1,13,0,21,10,15,28,32,0,72,22,72,25,20,21,16,22,2,23,13,25,26,18,1,3,10,26,15,28,32,7,7,14,7,33,72,62,20,21,10,9,16,22,2,23,13,25,26,18,15,28,32,1,3,3,3,14,7,33,72,62,20,21,10,9,16,22,2,23,13,25,26,18,15,28,32,1,3,6,21,1,14,7,33,72,62,20,21,10,9,16,22,2,23,13,25,26,18,15,28,32,1,3,21,2,21,10,15,28,32,22,21,21,0,0,0,0,66,67,68,66,67,68,66,66,67,66,67,68,66,67,68,66,67,68,66,67,68,66,67,68,66,67,68,66,67,68,66,67,68,67,68,66,67,68,66,67,68,66,67,68,66,67,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,12],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,2,3],4],[[1,2,[5,[2,3]]],4],0,[[1,-1],4,6],[[[7,[-1]],8],[[11,[[9,[-1]],10]]],12],0,[[[13,[-1]]],[[11,[14,15]]],12],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[16,17],[18,17],[3,[[19,[17]]]],[20,20],[21,21],[16,16],[22,22],[2,2],[[[23,[-1]]],[[23,[-1]]],[24,12]],[[[13,[-1]]],[[13,[-1]]],[24,12]],[25,25],[26,26],[18,18],[1,1],[3,3],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[26,26],27],[[28,28],27],[10,[[31,[[30,[29]]]]]],[15,[[31,[[30,[29]]]]]],[28,[[31,[[30,[29]]]]]],[32,[[31,[[30,[29]]]]]],[21,21],0,0,0,[[25,8,[9,[-1]]],[[11,[22,32]]],12],0,[[[9,[-1]],18],[[11,[33,15]]],12],[[1,8,[9,[-1]]],[[11,[[19,[22]],32]]],12],[[[9,[-1]],26,3],[[11,[33,15]]],12],[[[9,[-1]],26],[[11,[33,15]]],12],[[[9,[-1]],26,26],[[11,[33,15]]],12],[[[9,[-1]],3,26],[[11,[33,15]]],12],[[[7,[-1]]],[[11,[[9,[-1]],10]]],12],[[],21],[[],26],[[],1],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[[21,35],21],0,[34,4],[34,4],[34,4],[34,4],[34,4],[34,4],[34,4],[34,4],[34,4],[34,4],[34,4],[34,4],[34,4],[34,4],[34,4],[34,4],[34,4],[34,4],[34,4],[34,4],[34,4],[34,4],[[[9,[-1]],2],[[11,[[13,[-1]],15]]],12],0,[[[7,[-1]],[7,[-1]]],36,12],[[16,16],36],[[22,22],36],[[2,2],36],[[[23,[-1]],3],36,12],[[[23,[-1]],[23,[-1]]],36,12],[[[23,[-1]],[13,[-1]]],36,[12,37]],[[[23,[-1]],[19,[[23,[-1]]]]],36,[12,37]],[[[23,[-1]],26],36,12],[[[13,[-1]],[13,[-1]]],36,12],[[26,26],36],[[18,18],36],[[28,28],36],[[3,3],36],[[[7,[-1]],38],39,12],[[10,38],39],[[10,38],39],[[[9,[-1]],38],39,[40,12]],[[16,38],39],[[22,38],39],[[2,38],39],[[[23,[-1]],38],39,12],[[[13,[-1]],38],39,[40,12]],[[25,38],39],[[26,38],39],[[18,38],39],[[15,38],39],[[15,38],39],[[28,38],39],[[28,38],39],[[32,38],39],[[32,38],39],[[1,38],39],[[3,38],39],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[28,10],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[35,2],[26,2],[-1,-1,[]],[41,2],[-1,-1,[]],[[[13,[-1]]],[[23,[-1]]],12],[3,[[23,[-1]]],12],[-1,-1,[]],[-1,-1,[]],[[[42,[17]]],26],[20,26],[43,26],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[10,15],[28,15],[44,28],[45,28],[46,28],[-1,-1,[]],[[[30,[47]]],28],[15,32],[-1,-1,[]],[10,32],[-1,-1,[]],[36,3],[48,3],[49,3],[50,3],[26,3],[-1,-1,[]],[51,3],[52,3],[53,3],[17,3],[54,3],[55,3],[43,3],[34,3],[8,3],[56,3],[57,3],[51,3],[35,3],[41,3],[17,16],[17,18],[[[58,[17]]],[[31,[3]]]],[59,[[11,[25,[30,[47]]]]]],[59,[[11,[1,[30,[47]]]]]],[41,[[11,[26,-1]]],[]],[43,26],[[[13,[-1]],2],[[11,[[23,[-1]],15]]],12],[[[13,[-1]],2,36,36],[[11,[[23,[-1]],15]]],12],[[2,-1],4,60],[[[23,[-1]],-2],4,12,60],[[[13,[-1]],-2],4,12,60],[[26,-1],4,60],[[3,-1],4,60],[[[13,[-1]]],26,12],0,[[21,35],21],0,[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,59],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]],26],36,12],[[[7,[-1]]],[[11,[8,10]]],12],[21,21],0,[-1,[[7,[-1]]],12],[[],21],[[],26],[[],1],[-1,61,12],[14,[[31,[-1]]],[]],[33,[[31,[-1]]],[]],[33,[[31,[-1]]],[]],[[],26],[41,[[31,[59]]]],[[26,26],[[31,[27]]]],[[28,28],[[31,[27]]]],[[1,25],4],[[2,[9,[-1]]],[[11,[26,15]]],12],[[1,2,2],4],[[1,2,2,3],4],[[[13,[-1]],2],[[11,[[23,[-1]],15]]],12],0,[[21,26],21],[10,[[31,[47]]]],[15,[[31,[47]]]],[28,[[31,[47]]]],[32,[[31,[47]]]],0,0,0,0,[25,35],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,35,[]],[26,35],[-1,35,[]],[-1,35,[]],[-1,35,[]],[[[7,[-1]],-2],[[11,[[62,[-1]],32]]],12,6],[[[7,[-1]],1],[[11,[[62,[-1]],32]]],12],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[63,[[11,[3,-1]]],[]],[-1,[[11,[-2]]],[],[]],[64,[[11,[3,-1]]],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[6,1],[21,1],[1,1],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[21,21],[[2,3],2],0,[10,[[31,[[30,[29]]]]]],[15,[[31,[[30,[29]]]]]],[28,[[31,[[30,[29]]]]]],[32,[[31,[[30,[29]]]]]],0,[[21,20],21],0,[[],41],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[41,[[11,[66,44]]]],[[],[[11,[66,44]]]],[[],67],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,-1,[]],[34,4],[34,4],[34,4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[66,26],[67,26],[[[68,[-1,-2]]],26,12,12],[[],34],[[],34],[[],34],[[66,[58,[69]]],[[11,[4,28]]]],[[67,[58,[69]]],[[11,[4,28]]]],[[[68,[-1,-2]],[58,[69]]],[[11,[4,28]]],12,12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],67],[[-1,-2],[[68,[-1,-2]]],12,12],[[66,[70,[[58,[17]]]]],[[11,[71,28]]]],[[67,[70,[[58,[17]]]]],[[11,[71,28]]]],[[[68,[-1,-2]],[70,[[58,[17]]]]],[[11,[71,28]]],12,12],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[26,3],[[70,[[19,[17]]]]]],[[[58,[17]],18],[[31,[22]]]],[[[58,[17]]],[[31,[22]]]],[[[58,[17]]],[[31,[22]]]],[[[58,[17]]],[[31,[22]]]],[[[58,[17]]],[[31,[72]]]],[[[58,[17]]],[[31,[[4,[22,18]]]]]],[[[58,[17]]],[[31,[22]]]],[[26,26],[[70,[[42,[17]]]]]],[26,[[70,[[42,[17]]]]]],[18,[[70,[[42,[17]]]]]],[[[70,[[42,[-1]]]]],[[70,[[58,[-1]]]]],[]],[[22,18],[[19,[17]]]],[22,[[19,[17]]]],[22,[[19,[17]]]],[22,[[19,[17]]]],[72,[[19,[17]]]],[22,[[19,[17]]]],[[],[[70,[[19,[17]]]]]],[[3,26],[[70,[[19,[17]]]]]],[[[70,[[19,[-1]]]]],[[70,[[58,[-1]]]]],[]],0,0,0,0,[12,26],[[12,[58,[69]]],[[11,[4,28]]]],[[12,[70,[[58,[17]]]]],[[11,[71,28]]]]],"c":[],"p":[[5,"Transaction",0],[6,"EID",0],[6,"Value",0],[1,"tuple"],[5,"HashMap",625],[10,"Transactable",0],[5,"Connection",0],[1,"u64"],[5,"Database",0],[6,"ConnectionError",0],[6,"Result",626],[10,"Storage",618],[5,"Entity",0],[5,"AttributeIterator",0],[6,"QueryError",0],[6,"DatomType",0],[1,"u8"],[6,"Index",0],[5,"Vec",627],[6,"AttributeType",0],[5,"AttributeSchema",0],[5,"Datom",0],[6,"EntityResult",0],[10,"Clone",628],[6,"Fact",0],[5,"ID",0],[6,"Ordering",629],[6,"StorageError",0],[10,"Display",630],[5,"Box",631],[6,"Option",632],[6,"TransactionError",0],[5,"DatomIterator",0],[1,"usize"],[5,"String",633],[1,"bool"],[10,"PartialEq",629],[5,"Formatter",630],[8,"Result",630],[10,"Debug",630],[1,"str"],[1,"array"],[1,"u128"],[6,"Error",634],[5,"Error",635],[6,"TransactionError",636],[10,"Error",637],[1,"isize"],[1,"i128"],[1,"u32"],[5,"BigInt",638],[1,"i8"],[1,"i32"],[1,"u16"],[1,"i16"],[5,"BigDecimal",639],[1,"i64"],[1,"slice"],[6,"Edn",640],[10,"Hasher",641],[8,"DynamicConnection",0],[5,"TransactionResult",0],[1,"f64"],[1,"f32"],[5,"TypeId",642],[5,"SledStorage",527],[5,"RedBlackTreeSetStorage",527],[5,"TieredStorage",527],[8,"Item",618],[5,"Range",643],[8,"ItemIterator",618],[5,"TransactionRecord",0]],"b":[[241,"impl-PartialEq%3CValue%3E-for-EntityResult%3C\'connection,+S%3E"],[242,"impl-PartialEq-for-EntityResult%3C\'connection,+S%3E"],[243,"impl-PartialEq%3CEntity%3C\'connection,+S%3E%3E-for-EntityResult%3C\'connection,+S%3E"],[244,"impl-PartialEq%3CVec%3CEntityResult%3C\'connection,+S%3E%3E%3E-for-EntityResult%3C\'connection,+S%3E"],[245,"impl-PartialEq%3CID%3E-for-EntityResult%3C\'connection,+S%3E"],[252,"impl-Display-for-ConnectionError"],[253,"impl-Debug-for-ConnectionError"],[263,"impl-Display-for-QueryError"],[264,"impl-Debug-for-QueryError"],[265,"impl-Display-for-StorageError"],[266,"impl-Debug-for-StorageError"],[267,"impl-Display-for-TransactionError"],[268,"impl-Debug-for-TransactionError"],[283,"impl-From%3CString%3E-for-EID"],[284,"impl-From%3CID%3E-for-EID"],[286,"impl-From%3C%26str%3E-for-EID"],[288,"impl-From%3CEntity%3C\'connection,+S%3E%3E-for-EntityResult%3C\'connection,+S%3E"],[289,"impl-From%3CValue%3E-for-EntityResult%3C\'connection,+S%3E"],[292,"impl-From%3C%5Bu8;+16%5D%3E-for-ID"],[293,"impl-From%3CAttributeType%3E-for-ID"],[294,"impl-From%3Cu128%3E-for-ID"],[298,"impl-From%3CConnectionError%3E-for-QueryError"],[299,"impl-From%3CStorageError%3E-for-QueryError"],[300,"impl-From%3CError%3E-for-StorageError"],[301,"impl-From%3CError%3E-for-StorageError"],[302,"impl-From%3CTransactionError%3E-for-StorageError"],[304,"impl-From%3CBox%3Cdyn+Error+%2B+Send+%2B+Sync%3E%3E-for-StorageError"],[305,"impl-From%3CQueryError%3E-for-TransactionError"],[307,"impl-From%3CConnectionError%3E-for-TransactionError"],[309,"impl-From%3Cbool%3E-for-Value"],[310,"impl-From%3Cisize%3E-for-Value"],[311,"impl-From%3Ci128%3E-for-Value"],[312,"impl-From%3Cu32%3E-for-Value"],[313,"impl-From%3CID%3E-for-Value"],[315,"impl-From%3CBigInt%3E-for-Value"],[316,"impl-From%3Ci8%3E-for-Value"],[317,"impl-From%3Ci32%3E-for-Value"],[318,"impl-From%3Cu8%3E-for-Value"],[319,"impl-From%3Cu16%3E-for-Value"],[320,"impl-From%3Ci16%3E-for-Value"],[321,"impl-From%3Cu128%3E-for-Value"],[322,"impl-From%3Cusize%3E-for-Value"],[323,"impl-From%3Cu64%3E-for-Value"],[324,"impl-From%3CBigDecimal%3E-for-Value"],[325,"impl-From%3Ci64%3E-for-Value"],[326,"impl-From%3C%26BigInt%3E-for-Value"],[327,"impl-From%3CString%3E-for-Value"],[328,"impl-From%3C%26str%3E-for-Value"],[466,"impl-TryFrom%3Cf64%3E-for-Value"],[468,"impl-TryFrom%3Cf32%3E-for-Value"]]}],\
["datom_bigdecimal",{"doc":"A Big Decimal","t":"FPKRKKPGPPPKKKMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNMNNNNMNNNNNNNNNNMNNMNMNNNNNNNNNNNNNNNMNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNMNNNNNNNNNNNNNMN","n":["BigDecimal","Empty","FromPrimitive","FromStrRadixErr","Num","One","Other","ParseBigDecimalError","ParseBigInt","ParseDecimal","ParseInt","Signed","ToPrimitive","Zero","abs","abs","abs","abs_sub","abs_sub","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","as_bigint_and_exponent","borrow","borrow","borrow_mut","borrow_mut","cbrt","clone","clone_into","cmp","cube","default","description","digits","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","double","eq","eq","exp","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_f32","from_f32","from_f64","from_f64","from_i128","from_i16","from_i32","from_i64","from_i64","from_i8","from_isize","from_str","from_str_radix","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u64","from_u8","from_usize","half","hash","into","into","into_bigint_and_exponent","inverse","is_integer","is_negative","is_negative","is_one","is_positive","is_positive","is_zero","is_zero","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","neg","neg","new","normalized","one","one","parse_bytes","partial_cmp","rem","rem","rem","rem","round","set_one","set_zero","sign","signum","signum","sqrt","square","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_bigint","to_f32","to_f64","to_f64","to_i128","to_i16","to_i32","to_i64","to_i64","to_i8","to_isize","to_owned","to_string","to_string","to_u128","to_u16","to_u32","to_u64","to_u64","to_u8","to_usize","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","with_prec","with_scale","zero","zero"],"q":[[0,"datom_bigdecimal"],[197,"num_bigint::bigint"],[198,"core::cmp"],[199,"core::fmt"],[200,"core::fmt"],[201,"core::num::dec2flt"],[202,"num_bigint"],[203,"core::option"],[204,"core::result"],[205,"core::hash"],[206,"num_bigint::bigint"],[207,"alloc::string"],[208,"core::any"]],"d":["A big decimal type.","","A generic trait for converting a number to a value.","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","Defines a multiplicative identity element for <code>Self</code>.","","","","","","Useful functions for signed numbers (i.e. numbers that can …","A generic trait for converting a value to a number.","Defines an additive identity element for <code>Self</code>.","Computes the absolute value.","","Compute the absolute value of number","The positive difference of two numbers.","","","","","","","","","","","","","","Return the internal big integer value and an exponent. …","","","","","Take the cube root of the number","","","Complete ordering implementation for BigDecimal","","","","Number of digits in the non-scaled integer representation","","","","","","","","","","","","","","","","","","","","","","Evaluate the natural-exponential function ex","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Converts a <code>f32</code> to return an optional value of this type. …","","Converts a <code>f64</code> to return an optional value of this type. …","","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","","Convert from a string and radix (typically <code>2..=36</code>).","Creates and initializes a BigDecimal.","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Divide this efficiently by 2","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert into the internal big integer value and an …","Compute the reciprical of the number: x-1","Return true if this number has zero fractional part (is …","Returns true if the number is negative and false if the …","","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns true if the number is positive and false if the …","","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","","","","","","","","","","","","","","Creates and initializes a <code>BigDecimal</code>.","","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","","Creates and initializes a <code>BigDecimal</code>.","","","","","","Return number rounded to round_digits precision after the …","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Return the sign of the <code>BigDecimal</code> as <code>num::bigint::Sign</code>.","Returns the sign of the number.","","Take the square root of the number","","","","","","","","","","","","","","","","","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","","","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","","","","","","","","","Return a new BigDecimal object with precision set to new …","Return a new BigDecimal object equivalent to self, with …","Returns the additive identity element of <code>Self</code>, <code>0</code>.",""],"i":[0,7,0,30,0,0,7,0,7,7,7,0,0,0,1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,7,2,7,2,2,2,2,2,2,7,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,7,2,2,2,7,7,2,2,2,2,2,2,2,2,2,2,2,7,7,7,7,24,2,24,2,24,24,24,24,2,24,24,2,30,2,24,24,24,24,2,24,24,2,2,2,7,2,2,2,1,2,34,1,2,35,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,34,2,2,2,2,2,2,2,2,34,35,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,40,40,2,40,40,40,40,2,40,40,2,2,7,40,40,40,40,2,40,40,2,2,2,7,2,7,2,7,2,2,35,2],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[2,2],[2,2],[[1,1],1],[[2,2],2],[[2,2],2],[[2,2],2],[[2,2],2],[[2,3],2],[[2,3],2],[[2,3],2],[[2,3],2],[[2,2],2],[[2,3],4],[[2,3],4],[[2,2],4],[[2,2],4],[2,[[4,[3,5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[2,2],[[-1,-2],4,[],[]],[[2,2],6],[2,2],[[],2],[7,8],[2,9],[[2,10],-1,[]],[[2,2],2],[[2,11],-1,[]],[[2,5],-1,[]],[[2,12],-1,[]],[[2,13],-1,[]],[[2,12],-1,[]],[[2,14],-1,[]],[[2,5],-1,[]],[[2,9],-1,[]],[[2,15],-1,[]],[[2,2],2],[[2,15],-1,[]],[[2,2],2],[[2,16],-1,[]],[[2,2],2],[[2,17],-1,[]],[[2,16],-1,[]],[2,2],[[2,2],18],[[7,7],18],[2,2],[[2,19],20],[[2,19],20],[[7,19],20],[[7,19],20],[13,2],[3,2],[16,2],[15,2],[9,2],[5,2],[[[4,[3,5]]],2],[12,2],[-1,-1,[]],[17,2],[14,2],[21,7],[-1,-1,[]],[22,7],[23,7],[10,[[25,[24]]]],[10,[[25,[2]]]],[11,[[25,[24]]]],[11,[[25,[2]]]],[26,[[25,[24]]]],[12,[[25,[24]]]],[16,[[25,[24]]]],[5,[[25,[24]]]],[5,[[25,[2]]]],[15,[[25,[24]]]],[27,[[25,[24]]]],[8,[[28,[2,7]]]],[[8,14],[[28,[[30,[],[[29,[-1]]]],-1]]],[]],[[8,14],[[28,[2,7]]]],[31,[[25,[24]]]],[13,[[25,[24]]]],[14,[[25,[24]]]],[9,[[25,[24]]]],[9,[[25,[2]]]],[17,[[25,[24]]]],[32,[[25,[24]]]],[2,2],[[2,-1],4,33],[-1,-2,[],[]],[-1,-2,[],[]],[2,[[4,[3,5]]]],[2,2],[2,18],[1,18],[2,18],[34,18],[1,18],[2,18],[35,18],[2,18],[[2,2],2],[[2,3],2],[[2,2],2],[[2,2],2],[[2,3],2],[[2,3],2],[[2,2],2],[[2,3],2],[[2,2],4],[[2,2],4],[2,2],[2,2],[[3,5],2],[2,2],[[],34],[[],2],[[[36,[17]],14],[[25,[2]]]],[[2,2],[[25,[6]]]],[[2,2],2],[[2,2],2],[[2,2],2],[[2,2],2],[[2,5],2],[34,4],[35,4],[2,37],[1,1],[2,2],[2,[[25,[2]]]],[2,2],[[2,3],2],[[2,2],2],[[2,3],2],[[2,3],2],[[2,2],2],[[2,2],2],[[2,3],2],[[2,2],2],[[2,3],4],[[2,2],4],[[2,2],4],[[2,3],4],[-1,2,[[39,[],[[38,[2]]]]]],[-1,2,[[39,[],[[38,[2]]]]]],[2,[[25,[3]]]],[40,[[25,[10]]]],[40,[[25,[11]]]],[2,[[25,[11]]]],[40,[[25,[26]]]],[40,[[25,[12]]]],[40,[[25,[16]]]],[40,[[25,[5]]]],[2,[[25,[5]]]],[40,[[25,[15]]]],[40,[[25,[27]]]],[-1,-2,[],[]],[-1,41,[]],[-1,41,[]],[40,[[25,[31]]]],[40,[[25,[13]]]],[40,[[25,[14]]]],[40,[[25,[9]]]],[2,[[25,[9]]]],[40,[[25,[17]]]],[40,[[25,[32]]]],[10,[[28,[2,-1]]],[]],[11,[[28,[2,-1]]],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,42,[]],[-1,42,[]],[[2,9],2],[[2,5],2],[[],35],[[],2]],"c":[],"p":[[10,"Signed",0],[5,"BigDecimal",0],[5,"BigInt",197],[1,"tuple"],[1,"i64"],[6,"Ordering",198],[6,"ParseBigDecimalError",0],[1,"str"],[1,"u64"],[1,"f32"],[1,"f64"],[1,"i16"],[1,"u16"],[1,"u32"],[1,"i8"],[1,"i32"],[1,"u8"],[1,"bool"],[5,"Formatter",199],[8,"Result",199],[5,"ParseIntError",200],[5,"ParseFloatError",201],[5,"ParseBigIntError",202],[10,"FromPrimitive",0],[6,"Option",203],[1,"i128"],[1,"isize"],[6,"Result",204],[17,"FromStrRadixErr"],[10,"Num",0],[1,"u128"],[1,"usize"],[10,"Hasher",205],[10,"One",0],[10,"Zero",0],[1,"slice"],[6,"Sign",197],[17,"Item"],[10,"Iterator",206],[10,"ToPrimitive",0],[5,"String",207],[5,"TypeId",208]],"b":[[15,"impl-Signed-for-BigDecimal"],[16,"impl-BigDecimal"],[19,"impl-Add%3C%26BigDecimal%3E-for-BigDecimal"],[20,"impl-Add%3C%26BigDecimal%3E-for-%26BigDecimal"],[21,"impl-Add-for-BigDecimal"],[22,"impl-Add%3C%26BigInt%3E-for-%26BigDecimal"],[23,"impl-Add%3CBigInt%3E-for-BigDecimal"],[24,"impl-Add%3C%26BigInt%3E-for-BigDecimal"],[25,"impl-Add%3CBigInt%3E-for-%26BigDecimal"],[26,"impl-Add%3CBigDecimal%3E-for-%26BigDecimal"],[27,"impl-AddAssign%3C%26BigInt%3E-for-BigDecimal"],[28,"impl-AddAssign%3CBigInt%3E-for-BigDecimal"],[29,"impl-AddAssign%3C%26BigDecimal%3E-for-BigDecimal"],[30,"impl-AddAssign-for-BigDecimal"],[44,"impl-Div%3Cf32%3E-for-%26BigDecimal"],[45,"impl-Div%3C%26BigDecimal%3E-for-BigDecimal"],[46,"impl-Div%3Cf64%3E-for-%26BigDecimal"],[47,"impl-Div%3Ci64%3E-for-%26BigDecimal"],[48,"impl-Div%3Ci16%3E-for-BigDecimal"],[49,"impl-Div%3Cu16%3E-for-%26BigDecimal"],[50,"impl-Div%3Ci16%3E-for-%26BigDecimal"],[51,"impl-Div%3Cu32%3E-for-%26BigDecimal"],[52,"impl-Div%3Ci64%3E-for-BigDecimal"],[53,"impl-Div%3Cu64%3E-for-%26BigDecimal"],[54,"impl-Div%3Ci8%3E-for-BigDecimal"],[55,"impl-Div-for-BigDecimal"],[56,"impl-Div%3Ci8%3E-for-%26BigDecimal"],[57,"impl-Div%3CBigDecimal%3E-for-%26BigDecimal"],[58,"impl-Div%3Ci32%3E-for-%26BigDecimal"],[59,"impl-Div%3C%26BigDecimal%3E-for-%26BigDecimal"],[60,"impl-Div%3Cu8%3E-for-%26BigDecimal"],[61,"impl-Div%3Ci32%3E-for-BigDecimal"],[66,"impl-Display-for-BigDecimal"],[67,"impl-Debug-for-BigDecimal"],[68,"impl-Debug-for-ParseBigDecimalError"],[69,"impl-Display-for-ParseBigDecimalError"],[70,"impl-From%3Cu16%3E-for-BigDecimal"],[71,"impl-From%3CBigInt%3E-for-BigDecimal"],[72,"impl-From%3Ci32%3E-for-BigDecimal"],[73,"impl-From%3Ci8%3E-for-BigDecimal"],[74,"impl-From%3Cu64%3E-for-BigDecimal"],[75,"impl-From%3Ci64%3E-for-BigDecimal"],[76,"impl-From%3C(BigInt,+i64)%3E-for-BigDecimal"],[77,"impl-From%3Ci16%3E-for-BigDecimal"],[79,"impl-From%3Cu8%3E-for-BigDecimal"],[80,"impl-From%3Cu32%3E-for-BigDecimal"],[81,"impl-From%3CParseIntError%3E-for-ParseBigDecimalError"],[83,"impl-From%3CParseFloatError%3E-for-ParseBigDecimalError"],[84,"impl-From%3CParseBigIntError%3E-for-ParseBigDecimalError"],[120,"impl-Mul%3C%26BigDecimal%3E-for-BigDecimal"],[121,"impl-Mul%3CBigInt%3E-for-%26BigDecimal"],[122,"impl-Mul%3CBigDecimal%3E-for-%26BigDecimal"],[123,"impl-Mul-for-BigDecimal"],[124,"impl-Mul%3C%26BigInt%3E-for-BigDecimal"],[125,"impl-Mul%3CBigInt%3E-for-BigDecimal"],[126,"impl-Mul%3C%26BigDecimal%3E-for-%26BigDecimal"],[127,"impl-Mul%3C%26BigInt%3E-for-%26BigDecimal"],[128,"impl-MulAssign%3C%26BigDecimal%3E-for-BigDecimal"],[129,"impl-MulAssign-for-BigDecimal"],[130,"impl-Neg-for-BigDecimal"],[131,"impl-Neg-for-%26BigDecimal"],[138,"impl-Rem-for-BigDecimal"],[139,"impl-Rem%3C%26BigDecimal%3E-for-BigDecimal"],[140,"impl-Rem%3CBigDecimal%3E-for-%26BigDecimal"],[141,"impl-Rem%3C%26BigDecimal%3E-for-%26BigDecimal"],[150,"impl-Sub%3C%26BigInt%3E-for-BigDecimal"],[151,"impl-Sub%3C%26BigDecimal%3E-for-%26BigDecimal"],[152,"impl-Sub%3CBigInt%3E-for-%26BigDecimal"],[153,"impl-Sub%3C%26BigInt%3E-for-%26BigDecimal"],[154,"impl-Sub%3CBigDecimal%3E-for-%26BigDecimal"],[155,"impl-Sub%3C%26BigDecimal%3E-for-BigDecimal"],[156,"impl-Sub%3CBigInt%3E-for-BigDecimal"],[157,"impl-Sub-for-BigDecimal"],[158,"impl-SubAssign%3C%26BigInt%3E-for-BigDecimal"],[159,"impl-SubAssign-for-BigDecimal"],[160,"impl-SubAssign%3C%26BigDecimal%3E-for-BigDecimal"],[161,"impl-SubAssign%3CBigInt%3E-for-BigDecimal"],[162,"impl-Sum-for-BigDecimal"],[163,"impl-Sum%3C%26BigDecimal%3E-for-BigDecimal"],[185,"impl-TryFrom%3Cf32%3E-for-BigDecimal"],[186,"impl-TryFrom%3Cf64%3E-for-BigDecimal"]]}],\
["datom_c",{"doc":"","t":"CCHHCCCHHHHHHHHHHPPFFFPFFGFFFFPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["connection","database","datom_free_version","datom_version","misc","sled","structs","datom_as_of","datom_connect","datom_db","datom_disconnect","datom_latest_t","datom_transact","datom_datoms","datom_entity","datom_string","datom_sled_connect","AEVT","AVET","Connection","Database","Datoms","EAVT","Entity","ID","Index","Storage","Str","Transaction","TransactionResult","VAET","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"datom_c"],[7,"datom_c::connection"],[13,"datom_c::database"],[15,"datom_c::misc"],[16,"datom_c::sled"],[17,"datom_c::structs"],[151,"alloc::boxed"],[152,"core::option"],[153,"libc::unix::linux_like::linux::gnu::b64::x86_64"],[154,"alloc::string"],[155,"datom::storage"],[156,"datom::types::connection"],[157,"datom::types::database"],[158,"datom::types::transaction"],[159,"datom::types::transaction_result"],[160,"datom::types::datom_iterator"],[161,"datom::types::index"],[162,"datom::types::entity"],[163,"datom::types::id"],[164,"core::result"],[165,"core::any"]],"d":["","","Safety","","","","","","","","","","","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,0,0,0,11,0,0,0,0,0,0,0,11,16,8,3,5,9,10,12,11,14,13,16,8,3,5,9,10,12,11,14,13,16,8,3,5,9,10,12,11,14,13,16,8,3,5,9,10,12,11,14,13,16,8,3,5,9,10,12,11,14,13,16,16,8,8,3,3,5,5,9,9,10,10,12,12,11,11,14,14,13,13,16,8,3,5,9,10,12,11,14,13,16,8,3,5,9,10,12,11,14,13,16,8,3,5,9,10,12,11,14,13,16,8,3,5,9,10,12,11,14,13,16,8,3,5,9,10,12,11,14,13],"f":[0,0,[1,2],[[],1],0,0,0,[[3,4],[[7,[[6,[5]]]]]],[[[6,[8]]],[[6,[3]]]],[3,[[7,[[6,[5]]]]]],[[[6,[3]]],2],[3,4],[[3,[6,[9]]],[[7,[[6,[10]]]]]],[[5,11],[[7,[[6,[12]]]]]],[[5,[6,[13]]],[[7,[[6,[14]]]]]],[15,[[7,[[6,[16]]]]]],[[[6,[16]]],[[7,[[6,[8]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,2],[17,2],[17,2],[17,2],[17,2],[17,2],[17,2],[17,2],[17,2],[17,2],[-1,-1,[]],[18,16],[-1,-1,[]],[-1,8,19],[20,3],[-1,-1,[]],[-1,-1,[]],[[[21,[[6,[19]]]]],5],[22,9],[-1,-1,[]],[-1,-1,[]],[[[23,[[6,[19]]]]],10],[24,12],[-1,-1,[]],[-1,-1,[]],[25,11],[[[26,[[6,[19]]]]],14],[-1,-1,[]],[27,13],[-1,-1,[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]]],"c":[],"p":[[1,"i8"],[1,"tuple"],[5,"Connection",17],[1,"u64"],[5,"Database",17],[5,"Box",151],[6,"Option",152],[5,"Storage",17],[5,"Transaction",17],[5,"TransactionResult",17],[6,"Index",17],[5,"Datoms",17],[5,"ID",17],[5,"Entity",17],[8,"c_char",153],[5,"Str",17],[1,"usize"],[5,"String",154],[10,"Storage",155],[8,"DynamicConnection",156],[5,"Database",157],[5,"Transaction",158],[5,"TransactionResult",159],[5,"DatomIterator",160],[6,"Index",161],[5,"Entity",162],[5,"ID",163],[6,"Result",164],[5,"TypeId",165]],"b":[]}],\
["datom_java",{"doc":"","t":"CCCCHHHHHHHH","n":["connection","datom","fact","hello_world","Java_engineering_lutris_datom_Connection_00024JNI_create","Java_engineering_lutris_datom_Connection_00024JNI_destroy","Java_engineering_lutris_datom_Connection_00024JNI_latestT","Java_engineering_lutris_datom_Datom_00024JNI_version","Java_engineering_lutris_datom_Fact_00024JNI_destroy","Java_engineering_lutris_datom_Fact_00024JNI_fromEdn","Java_engineering_lutris_datom_Fact_00024JNI_toEdn","Java_engineering_lutris_datom_HelloWorld_00024JNI_hello"],"q":[[0,"datom_java"],[4,"datom_java::connection"],[7,"datom_java::datom"],[8,"datom_java::fact"],[11,"datom_java::hello_world"],[12,"jni::wrapper::jnienv"],[13,"jni::wrapper::objects::jclass"],[14,"jni_sys"],[15,"jni_sys"]],"d":["","","","","","Safety","Safety","","Safety","","Safety",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,[[1,2],3],[[1,2,3],4],[[1,2,3],3],[[1,2],5],[[1,2,3],4],[[1,2,6],3],[[1,2,3],5],[[1,2,6],5]],"c":[],"p":[[5,"JNIEnv",12],[5,"JClass",13],[8,"jlong",14],[1,"tuple"],[8,"jstring",14],[5,"JString",15]],"b":[]}],\
["datom_node",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[],"b":[]}],\
["edn_rs",{"doc":"","t":"KEEEEEEEEMCQHHQQQCQHPPPFPGPGPPPPFPFPPPPPFPPPPPPFPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKM","n":["Deserialize","Double","Edn","EdnError","List","Map","Serialize","Set","Vector","deserialize","edn","edn","from_edn","from_str","hmap","hset","map","serialize","set","to_string","Bool","Char","Deserialize","Double","Double","Edn","Empty","Error","Inst","Int","Iter","Key","List","List","Map","Map","NamespacedMap","Nil","ParseEdn","Rational","Set","Set","Str","Symbol","Tagged","UInt","Uuid","Vector","Vector","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","description","deserialize","empty","empty","empty","empty","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get","get_mut","hash","hash","hash","hash","hash","hash","index","index_mut","into","into","into","into","into","into","into","iter_some","map_iter","new","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_iter","to_bool","to_bool_vec","to_char","to_debug","to_float","to_float_vec","to_int","to_int_vec","to_map","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_set","to_str_inst","to_str_uuid","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_uint","to_uint_vec","to_vec","to_vec","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Serialize","serialize"],"q":[[0,"edn_rs"],[20,"edn_rs::edn"],[203,"edn_rs::serialize"],[205,"core::result"],[206,"alloc::string"],[207,"core::error"],[208,"core::option"],[209,"core::cmp"],[210,"core::fmt"],[211,"core::fmt"],[212,"core::str::error"],[213,"core::num::dec2flt"],[214,"core::hash"],[215,"core::slice::iter"],[216,"alloc::collections::btree::map"],[217,"alloc::vec"],[218,"alloc::collections::btree::set"],[219,"alloc::collections::btree::map"]],"d":["public trait to be used to <code>Deserialize</code> structs.","","","","","","","","","","Edn type implementation","Macro to parse <code>EDN</code> into Rust Spec:","<code>from_edn</code> deserializes an EDN type into a <code>T</code> type that …","<code>from_str</code> deserializes an EDN String into type <code>T</code> that …","Creates a <code>HashMap</code> from a seq of <code>$key =&gt; $value, </code> …","Creates a <code>HashSet</code> from a seq of <code>$x, </code> <code>set!{1, 2, 3, 4}</code>","Creates a <code>BTreeMap</code> from a seq of <code>$key =&gt; $value, </code> …","Serialization module for most possible types. Tuples are …","Creates a <code>BTreeSet</code> from a seq of <code>$x, </code> <code>set!{1, 2, 3, 4}</code>","Function for converting Rust types into EDN Strings. For …","","","","","","<code>EdnType</code> is an Enum with possible values for an EDN type …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Parses a <code>&amp;str</code> that contains an Edn into …","Index into a EDN vector, list, set or map. A string index …","Mutably index into a EDN vector, set, list or map. A …","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>iter_some</code> returns an <code>Option&lt;Iter&lt;Edn&gt;&gt;</code> with <code>Some</code> for types …","<code>map_iter</code> returns am <code>Option&lt;btree_map::Iter&lt;String, Edn&gt;&gt;</code> …","","","","","","","","","","","<code>set_iter</code> returns am <code>Option&lt;btree_set::Iter&lt;Edn&gt;&gt;</code> with <code>Some</code> …","<code>to_bool</code> takes an <code>Edn</code> and returns an <code>Option&lt;bool&gt;</code> with its …","<code>to_bool_vec</code> converts <code>Edn</code> types <code>Vector</code> <code>List</code> and <code>Set</code> into an …","<code>to_char</code> takes an <code>Edn</code> and returns an <code>Option&lt;char&gt;</code> with its …","<strong><code>std::fmt::Debug</code></strong> <code>to_debug</code> is a wrapper of …","<code>to_float</code> takes an <code>Edn</code> and returns an <code>Option&lt;f64&gt;</code> with its …","<code>to_float_vec</code> converts <code>Edn</code> types <code>Vector</code> <code>List</code> and <code>Set</code> into …","<code>to_int</code> takes an <code>Edn</code> and returns an <code>Option&lt;isize&gt;</code> with its …","<code>to_int_vec</code> converts <code>Edn</code> types <code>Vector</code> <code>List</code> and <code>Set</code> into an …","","","","","","","","","<code>to_str_INST</code> returns am <code>Option&lt;String&gt;</code> with <code>Some</code> containing …","<code>to_str_uuid</code> returns am <code>Option&lt;String&gt;</code> with <code>Some</code> containing …","","","","","","","","Similar to <code>to_int</code> but returns an <code>Option&lt;usize&gt;</code>","<code>to_uint_vec</code> converts <code>Edn</code> types <code>Vector</code> <code>List</code> and <code>Set</code> into an …","<code>to_vec</code> converts <code>Edn</code> types <code>Vector</code>, <code>List</code> and <code>Set</code> into an …","","","","","","","","","","","","","","","","","","","","","","","","Trait that allows you to implement Serialization for each …",""],"i":[0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,1,3,0,1,0,1,0,1,1,3,1,0,1,0,1,1,1,3,1,0,1,1,1,1,1,1,0,1,1,10,11,12,13,14,3,1,10,11,12,13,14,3,3,1,10,11,12,13,14,1,10,11,12,13,14,1,10,11,12,13,14,3,14,10,11,12,13,1,10,11,12,13,14,3,1,1,10,10,11,11,12,12,13,13,14,14,3,3,1,10,11,12,13,14,14,3,3,3,3,3,1,1,1,1,10,11,12,13,14,1,1,1,10,11,12,13,14,3,1,1,10,11,12,13,1,10,11,12,13,14,1,1,1,1,1,1,1,1,1,13,1,10,11,12,13,14,12,1,1,1,10,11,12,13,14,3,1,1,1,10,11,1,10,11,12,13,14,3,1,10,11,12,13,14,3,1,10,11,12,13,14,3,0,7],"f":[0,0,0,0,0,0,0,0,0,[1,[[4,[2,3]]]],0,0,[1,[[4,[-1,3]]],2],[5,[[4,[-1,3]]],2],0,0,0,0,0,[-1,6,7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,[[9,[8]]]],[1,1],[10,10],[11,11],[12,12],[13,13],[14,14],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[1,1],16],[[10,10],16],[[11,11],16],[[12,12],16],[[13,13],16],[[14,14],16],[3,5],[1,[[4,[14,3]]]],[[],10],[[],11],[[],12],[[],13],[[1,1],17],[[10,10],17],[[11,11],17],[[12,12],17],[[13,13],17],[[14,14],17],[[3,3],17],[[1,18],19],[[1,18],19],[[10,18],19],[[10,18],19],[[11,18],19],[[11,18],19],[[12,18],19],[[12,18],19],[[13,18],19],[[13,18],19],[[14,18],19],[[14,18],19],[[3,18],19],[[3,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[20,14],[21,3],[22,3],[-1,-1,[]],[6,3],[23,3],[5,[[4,[1,-1]]],[]],[[1,-1],[[9,[1]]],0],[[1,-1],[[9,[1]]],0],[[1,-1],15,24],[[10,-1],15,24],[[11,-1],15,24],[[12,-1],15,24],[[13,-1],15,24],[[14,-1],15,24],[[1,-1],1,0],[[1,-1],1,0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[9,[[25,[1]]]]]],[1,[[9,[[26,[6,1]]]]]],[[[27,[1]]],10],[[[27,[1]]],11],[[[28,[1]]],12],[[[29,[6,1]]],13],[[1,1],[[9,[16]]]],[[10,10],[[9,[16]]]],[[11,11],[[9,[16]]]],[[12,12],[[9,[16]]]],[[13,13],[[9,[16]]]],[[14,14],[[9,[16]]]],[1,[[9,[[30,[1]]]]]],[1,[[9,[17]]]],[1,[[9,[[27,[17]]]]]],[1,[[9,[31]]]],[1,6],[1,[[9,[20]]]],[1,[[9,[[27,[20]]]]]],[1,[[9,[32]]]],[1,[[9,[[27,[32]]]]]],[13,[[29,[6,1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[12,[[28,[1]]]],[1,[[9,[6]]]],[1,[[9,[6]]]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[1,[[9,[33]]]],[1,[[9,[[27,[33]]]]]],[1,[[9,[[27,[6]]]]]],[10,[[27,[1]]]],[11,[[27,[1]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,[7,6]],"c":[],"p":[[6,"Edn",20],[10,"Deserialize",0],[6,"Error",20],[6,"Result",205],[1,"str"],[5,"String",206],[10,"Serialize",203],[10,"Error",207],[6,"Option",208],[5,"Vector",20],[5,"List",20],[5,"Set",20],[5,"Map",20],[5,"Double",20],[1,"tuple"],[6,"Ordering",209],[1,"bool"],[5,"Formatter",210],[8,"Result",210],[1,"f64"],[5,"ParseIntError",211],[5,"ParseBoolError",212],[5,"ParseFloatError",213],[10,"Hasher",214],[5,"Iter",215],[5,"Iter",216],[5,"Vec",217],[5,"BTreeSet",218],[5,"BTreeMap",216],[5,"Iter",218],[1,"char"],[1,"isize"],[1,"usize"],[5,"TypeId",219]],"b":[[95,"impl-Debug-for-Edn"],[96,"impl-Display-for-Edn"],[97,"impl-Debug-for-Vector"],[98,"impl-Display-for-Vector"],[99,"impl-Display-for-List"],[100,"impl-Debug-for-List"],[101,"impl-Display-for-Set"],[102,"impl-Debug-for-Set"],[103,"impl-Display-for-Map"],[104,"impl-Debug-for-Map"],[105,"impl-Debug-for-Double"],[106,"impl-Display-for-Double"],[107,"impl-Debug-for-Error"],[108,"impl-Display-for-Error"],[116,"impl-From%3CParseIntError%3E-for-Error"],[117,"impl-From%3CParseBoolError%3E-for-Error"],[119,"impl-From%3CString%3E-for-Error"],[120,"impl-From%3CParseFloatError%3E-for-Error"]]}],\
["fs2",{"doc":"Extended utilities for working with files and filesystems …","t":"KFMMHNHNNNNNMNNHNNNNHMMHNHNNNMMNM","n":["FileExt","FsStats","allocate","allocated_size","allocation_granularity","allocation_granularity","available_space","available_space","borrow","borrow_mut","clone","clone_into","duplicate","eq","fmt","free_space","free_space","from","hash","into","lock_contended_error","lock_exclusive","lock_shared","statvfs","to_owned","total_space","total_space","try_from","try_into","try_lock_exclusive","try_lock_shared","type_id","unlock"],"q":[[0,"fs2"],[33,"std::io::error"],[34,"std::path"],[35,"core::convert"],[36,"std::fs"],[37,"core::fmt"],[38,"core::fmt"],[39,"std::io::error"],[40,"core::any"]],"d":["Extension trait for <code>std::fs::File</code> which provides …","<code>FsStats</code> contains some common stats about a file system.","Ensures that at least <code>len</code> bytes of disk space are …","Returns the amount of physical space allocated for a file.","Returns the filesystem’s disk space allocation …","Returns the filesystem’s disk space allocation …","Returns the available space in bytes to non-priveleged …","Returns the available space in bytes to non-priveleged …","","","","","Returns a duplicate instance of the file.","","","Returns the number of free bytes in the file system …","Returns the number of free bytes in the file system …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the error that a call to a try lock method on a …","Locks the file for exclusive usage, blocking if the file …","Locks the file for shared usage, blocking if the file is …","Get the stats of the file system containing the provided …","","Returns the total space in bytes in the file system …","Returns the total space in bytes in the file system …","","","Locks the file for shared usage, or returns a an error if …","Locks the file for shared usage, or returns a an error if …","","Unlocks the file."],"i":[0,0,1,1,0,7,0,7,7,7,7,7,1,7,7,0,7,7,7,7,0,1,1,0,7,0,7,7,7,1,1,7,1],"f":[0,0,[[1,2],[[4,[3]]]],[1,[[4,[2]]]],[-1,[[4,[2]]],[[6,[5]]]],[7,2],[-1,[[4,[2]]],[[6,[5]]]],[7,2],[-1,-2,[],[]],[-1,-2,[],[]],[7,7],[[-1,-2],3,[],[]],[1,[[4,[8]]]],[[7,7],9],[[7,10],11],[-1,[[4,[2]]],[[6,[5]]]],[7,2],[-1,-1,[]],[[7,-1],3,12],[-1,-2,[],[]],[[],13],[1,[[4,[3]]]],[1,[[4,[3]]]],[-1,[[4,[7]]],[[6,[5]]]],[-1,-2,[],[]],[-1,[[4,[2]]],[[6,[5]]]],[7,2],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[1,[[4,[3]]]],[1,[[4,[3]]]],[-1,15,[]],[1,[[4,[3]]]]],"c":[],"p":[[10,"FileExt",0],[1,"u64"],[1,"tuple"],[8,"Result",33],[5,"Path",34],[10,"AsRef",35],[5,"FsStats",0],[5,"File",36],[1,"bool"],[5,"Formatter",37],[8,"Result",37],[10,"Hasher",38],[5,"Error",33],[6,"Result",39],[5,"TypeId",40]],"b":[]}],\
["fxhash",{"doc":"Fx Hash","t":"IIIFFFNNNNNNNNNNNNNNNNNNNNNNNNHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["FxBuildHasher","FxHashMap","FxHashSet","FxHasher","FxHasher32","FxHasher64","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","finish","finish","finish","fmt","fmt","fmt","from","from","from","hash","hash32","hash64","into","into","into","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write","write","write_u16","write_u16","write_u16","write_u32","write_u32","write_u32","write_u64","write_u64","write_u64","write_u8","write_u8","write_u8","write_usize","write_usize","write_usize"],"q":[[0,"fxhash"],[66,"core::fmt"],[67,"core::fmt"],[68,"core::marker"],[69,"core::result"],[70,"core::any"]],"d":["A builder for default Fx hashers.","A <code>HashMap</code> using a default Fx hasher.","A <code>HashSet</code> using a default Fx hasher.","This hashing algorithm was extracted from the Rustc …","This hashing algorithm was extracted from the Rustc …","This hashing algorithm was extracted from the Rustc …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","A convenience function for when you need a quick usize …","A convenience function for when you need a quick 32-bit …","A convenience function for when you need a quick 64-bit …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3],"f":[0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],1],[[],2],[[],3],[1,5],[2,5],[3,5],[[1,6],7],[[2,6],7],[[3,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,8,[9,10]],[-1,11,[9,10]],[-1,5,[9,10]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[[1,[15,[14]]],4],[[2,[15,[14]]],4],[[3,[15,[14]]],4],[[1,16],4],[[2,16],4],[[3,16],4],[[1,11],4],[[2,11],4],[[3,11],4],[[1,5],4],[[2,5],4],[[3,5],4],[[1,14],4],[[2,14],4],[[3,14],4],[[1,8],4],[[2,8],4],[[3,8],4]],"c":[],"p":[[5,"FxHasher",0],[5,"FxHasher64",0],[5,"FxHasher32",0],[1,"tuple"],[1,"u64"],[5,"Formatter",66],[8,"Result",66],[1,"usize"],[10,"Hash",67],[10,"Sized",68],[1,"u32"],[6,"Result",69],[5,"TypeId",70],[1,"u8"],[1,"slice"],[1,"u16"]],"b":[]}],\
["getrandom",{"doc":"Interface to the operating system’s random number …","t":"TTFTTTTTTTTTTTTNNNNNNNNNHHNNNNN","n":["CUSTOM_START","ERRNO_NOT_POSITIVE","Error","FAILED_RDRAND","INTERNAL_START","IOS_SEC_RANDOM","NODE_CRYPTO","NODE_ES_MODULE","NODE_RANDOM_FILL_SYNC","NO_RDRAND","UNSUPPORTED","VXWORKS_RAND_SECURE","WEB_CRYPTO","WEB_GET_RANDOM_VALUES","WINDOWS_RTL_GEN_RANDOM","borrow","borrow_mut","clone","code","eq","fmt","fmt","from","from","getrandom","getrandom_uninit","into","raw_os_error","try_from","try_into","type_id"],"q":[[0,"getrandom"],[31,"core::num::nonzero"],[32,"core::fmt"],[33,"core::fmt"],[34,"core::mem::maybe_uninit"],[35,"core::option"],[36,"core::any"]],"d":["Codes at or above this point can be used by users to …","The platform-specific <code>errno</code> returned a non-positive value.","A small and <code>no_std</code> compatible error type","RDRAND instruction failed due to a hardware issue.","Codes below this point represent OS Errors (i.e. positive …","Call to iOS <code>SecRandomCopyBytes</code> failed.","Node.js does not have the <code>crypto</code> CommonJS module.","Called from an ES module on Node.js. This is unsupported, …","Calling Node.js function <code>crypto.randomFillSync</code> failed.","RDRAND instruction unsupported on this target.","This target/platform is not supported by <code>getrandom</code>.","On VxWorks, call to <code>randSecure</code> failed (random number …","The environment does not support the Web Crypto API.","Calling Web Crypto API <code>crypto.getRandomValues</code> failed.","Call to Windows <code>RtlGenRandom</code> failed.","","","","Extract the bare error code.","","","","","Returns the argument unchanged.","Fill <code>dest</code> with random bytes from the system’s preferred …","Version of the <code>getrandom</code> function which fills <code>dest</code> with …","Calls <code>U::from(self)</code>.","Extract the raw OS error code (if this error came from the …","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[1,2],[[1,1],3],[[1,4],5],[[1,4],5],[2,1],[-1,-1,[]],[[[7,[6]]],[[9,[8,1]]]],[[[7,[[10,[6]]]]],[[9,[[7,[6]],1]]]],[-1,-2,[],[]],[1,[[12,[11]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,13,[]]],"c":[],"p":[[5,"Error",0],[5,"NonZeroU32",31],[1,"bool"],[5,"Formatter",32],[8,"Result",32],[1,"u8"],[1,"slice"],[1,"tuple"],[6,"Result",33],[20,"MaybeUninit",34],[1,"i32"],[6,"Option",35],[5,"TypeId",36]],"b":[[20,"impl-Display-for-Error"],[21,"impl-Debug-for-Error"]]}],\
["iana_time_zone",{"doc":"get the IANA time zone for the current system","t":"PGPPNNNNNNHNNNNNN","n":["FailedParsingString","GetTimezoneError","IoError","OsError","borrow","borrow_mut","fmt","fmt","from","from","get_timezone","into","source","to_string","try_from","try_into","type_id"],"q":[[0,"iana_time_zone"],[17,"core::fmt"],[18,"core::fmt"],[19,"core::fmt"],[20,"alloc::string"],[21,"core::error"],[22,"core::option"],[23,"core::any"]],"d":["Failed to parse","Error types","Wrapped IO error","Platform-specific error from the operating system","","","","","Returns the argument unchanged.","","Get the current IANA time zone as a string.","Calls <code>U::from(self)</code>.","","","","",""],"i":[1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1],"f":[0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[1,2],[[5,[3,4]]]],[[1,2],6],[-1,-1,[]],[7,1],[[],[[5,[8,1]]]],[-1,-2,[],[]],[1,[[10,[9]]]],[-1,8,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,11,[]]],"c":[],"p":[[6,"GetTimezoneError",0],[5,"Formatter",17],[1,"tuple"],[5,"Error",17],[6,"Result",18],[8,"Result",17],[5,"Error",19],[5,"String",20],[10,"Error",21],[6,"Option",22],[5,"TypeId",23]],"b":[[6,"impl-Display-for-GetTimezoneError"],[7,"impl-Debug-for-GetTimezoneError"]]}],\
["instant",{"doc":"","t":"FITTTTTITNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNN","n":["Duration","Instant","MAX","MICROSECOND","MILLISECOND","NANOSECOND","SECOND","SystemTime","ZERO","abs_diff","add","add_assign","as_micros","as_millis","as_nanos","as_secs","as_secs_f32","as_secs_f64","borrow","borrow_mut","checked_add","checked_div","checked_mul","checked_sub","clone","clone_into","cmp","default","div","div_assign","div_duration_f32","div_duration_f64","div_f32","div_f64","eq","fmt","from","from_micros","from_millis","from_nanos","from_secs","from_secs_f32","from_secs_f64","hash","into","is_zero","mul","mul_assign","mul_f32","mul_f64","new","now","partial_cmp","saturating_add","saturating_mul","saturating_sub","sub","sub_assign","subsec_micros","subsec_millis","subsec_nanos","sum","sum","to_owned","try_from","try_from_secs_f32","try_from_secs_f64","try_into","type_id"],"q":[[0,"instant"],[69,"core::option"],[70,"core::cmp"],[71,"core::fmt"],[72,"core::fmt"],[73,"core::hash"],[74,"core::iter::traits::iterator"],[75,"core::time"],[76,"core::any"]],"d":["A <code>Duration</code> type to represent a span of time, typically …","","The maximum duration.","The duration of one microsecond.","The duration of one millisecond.","The duration of one nanosecond.","The duration of one second.","","A duration of zero time.","Computes the absolute difference between <code>self</code> and <code>other</code>.","","","Returns the total number of whole microseconds contained …","Returns the total number of whole milliseconds contained …","Returns the total number of nanoseconds contained by this …","Returns the number of <em>whole</em> seconds contained by this …","Returns the number of seconds contained by this <code>Duration</code> …","Returns the number of seconds contained by this <code>Duration</code> …","","","Checked <code>Duration</code> addition. Computes <code>self + other</code>, …","Checked <code>Duration</code> division. Computes <code>self / other</code>, …","Checked <code>Duration</code> multiplication. Computes <code>self * other</code>, …","Checked <code>Duration</code> subtraction. Computes <code>self - other</code>, …","","","","","","","Divide <code>Duration</code> by <code>Duration</code> and return <code>f32</code>.","Divide <code>Duration</code> by <code>Duration</code> and return <code>f64</code>.","Divide <code>Duration</code> by <code>f32</code>.","Divide <code>Duration</code> by <code>f64</code>.","","","Returns the argument unchanged.","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of whole …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","","Calls <code>U::from(self)</code>.","Returns true if this <code>Duration</code> spans no time.","","","Multiplies <code>Duration</code> by <code>f32</code>.","Multiplies <code>Duration</code> by <code>f64</code>.","Creates a new <code>Duration</code> from the specified number of whole …","The current time, expressed in milliseconds since the Unix …","","Saturating <code>Duration</code> addition. Computes <code>self + other</code>, …","Saturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …","Saturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …","","","Returns the fractional part of this <code>Duration</code>, in whole …","Returns the fractional part of this <code>Duration</code>, in whole …","Returns the fractional part of this <code>Duration</code>, in …","","","","","The checked version of <code>from_secs_f32</code>.","The checked version of <code>from_secs_f64</code>.","",""],"i":[0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,[[1,1],1],[[1,1],1],[[1,1],2],[1,3],[1,3],[1,3],[1,4],[1,5],[1,6],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],[[7,[1]]]],[[1,8],[[7,[1]]]],[[1,8],[[7,[1]]]],[[1,1],[[7,[1]]]],[1,1],[[-1,-2],2,[],[]],[[1,1],9],[[],1],[[1,8],1],[[1,8],2],[[1,1],5],[[1,1],6],[[1,5],1],[[1,6],1],[[1,1],10],[[1,11],[[13,[2,12]]]],[-1,-1,[]],[4,1],[4,1],[4,1],[4,1],[5,1],[6,1],[[1,-1],2,14],[-1,-2,[],[]],[1,10],[[1,8],1],[[1,8],2],[[1,5],1],[[1,6],1],[[4,8],1],[[],6],[[1,1],[[7,[9]]]],[[1,1],1],[[1,8],1],[[1,1],1],[[1,1],1],[[1,1],2],[1,8],[1,8],[1,8],[-1,1,[[16,[],[[15,[1]]]]]],[-1,1,[[16,[],[[15,[1]]]]]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[5,[[13,[1,17]]]],[6,[[13,[1,17]]]],[-1,[[13,[-2]]],[],[]],[-1,18,[]]],"c":[],"p":[[5,"Duration",0],[1,"tuple"],[1,"u128"],[1,"u64"],[1,"f32"],[1,"f64"],[6,"Option",69],[1,"u32"],[6,"Ordering",70],[1,"bool"],[5,"Formatter",71],[5,"Error",71],[6,"Result",72],[10,"Hasher",73],[17,"Item"],[10,"Iterator",74],[5,"TryFromFloatSecsError",75],[5,"TypeId",76]],"b":[[61,"impl-Sum%3C%26Duration%3E-for-Duration"],[62,"impl-Sum-for-Duration"]]}],\
["jni",{"doc":"Safe JNI Bindings in Rust","t":"FSFPFGFFFPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNCNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNOCCCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKMPPGFPPPPPPPPPGPPPPPPPIPPKPPPPNNNNNNONNNNNNNNNNNHNNNNONMNNNNNNNNNNNOOOOFFFPPPPPPFPFFFFFFFFFFFFFGPPPGPKPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPGPPPPGPPGPFPONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOIFPPFPFFPSSHSSSSSSSHHSSSSSSSIFFFOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOGGGONNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNNNNONNNNNNNNOOONNNNNNNNNNNNOIIIIIIIIIIIIIIIIIIIIGIIIIIUIONNNNNNNNNNNNOOOOONNNNNNNNOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIOOO","n":["AttachGuard","DEFAULT_LOCAL_FRAME_CAPACITY","Executor","Invalid","JNIEnv","JNIVersion","JavaVM","MonitorGuard","NativeMethod","V1","V2","V4","V6","V8","alloc_object","attach_current_thread","attach_current_thread_as_daemon","attach_current_thread_permanently","auto_local","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_array_from_slice","call_method","call_method_unchecked","call_static_method","call_static_method_unchecked","clone","clone","clone","clone_into","clone_into","clone_into","convert_byte_array","define_class","define_unnamed_class","delete_local_ref","deref","descriptors","drop","drop","ensure_local_capacity","errors","exception_check","exception_clear","exception_describe","exception_occurred","fatal_error","find_class","fmt","fmt","fn_ptr","from","from","from","from","from","from","from","from","from_raw","from_raw","get_array_elements","get_array_length","get_boolean_array_elements","get_boolean_array_region","get_byte_array_elements","get_byte_array_region","get_char_array_elements","get_char_array_region","get_direct_buffer_address","get_direct_buffer_capacity","get_double_array_elements","get_double_array_region","get_env","get_field","get_field_id","get_field_unchecked","get_float_array_elements","get_float_array_region","get_int_array_elements","get_int_array_region","get_java_vm","get_java_vm_pointer","get_list","get_long_array_elements","get_long_array_region","get_map","get_method_id","get_native_interface","get_object_array_element","get_object_class","get_primitive_array_critical","get_rust_field","get_short_array_elements","get_short_array_region","get_static_field","get_static_field_id","get_static_field_unchecked","get_static_method_id","get_string","get_string_utf_chars","get_superclass","get_version","into","into","into","into","into","into","into","is_assignable_from","is_instance_of","is_same_object","lock_obj","lookup","lookup","lookup","lookup","lookup","lookup","lookup","name","new","new_boolean_array","new_byte_array","new_char_array","new_direct_byte_buffer","new_double_array","new_float_array","new_global_ref","new_int_array","new_local_ref","new_long_array","new_object","new_object_array","new_object_unchecked","new_short_array","new_string","objects","pop_local_frame","push_local_frame","register_native_methods","release_string_utf_chars","set_boolean_array_region","set_byte_array_region","set_char_array_region","set_double_array_region","set_field","set_field_unchecked","set_float_array_region","set_int_array_region","set_long_array_region","set_object_array_element","set_rust_field","set_short_array_region","set_static_field","sig","signature","strings","sys","take_rust_field","threads_attached","throw","throw_new","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unregister_native_methods","with_attached","with_attached_capacity","with_local_frame","Desc","lookup","AlreadyCreated","Err","Error","Exception","FieldAlreadySet","FieldNotFound","InvalidArgList","InvalidArguments","InvalidCtorReturn","JNIEnvMethodNotFound","JavaException","JavaVMMethodNotFound","JniCall","JniError","MethodNotFound","NoMemory","NullDeref","NullPtr","Ok","Other","ParseFailed","Result","ThreadDetached","ThrowFailed","ToException","TryLock","Unknown","WrongJValueType","WrongVersion","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","class","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","jni_error_code_to_result","lookup","lookup","lookup","lookup","msg","source","to_exception","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","name","name","sig","sig","AutoArray","AutoLocal","AutoPrimitiveArray","Bool","Byte","Char","CopyBack","Double","Float","GlobalRef","Int","JByteBuffer","JClass","JFieldID","JList","JListIter","JMap","JMapIter","JMethodID","JObject","JStaticFieldID","JStaticMethodID","JString","JThrowable","JValue","Long","NoCopyBack","Object","ReleaseMode","Short","TypeArray","Void","add","as_obj","as_obj","as_ptr","as_ptr","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","commit","d","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","discard","discard","drop","drop","drop","f","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forget","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_env","from_env","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","get","get","get","i","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_raw","into_raw","into_raw","into_raw","into_raw","into_raw","into_raw","into_raw","into_raw","is_copy","is_copy","iter","iter","j","l","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","new","next","next","null","pop","primitive_type","put","release","remove","remove","s","size","size","size","to_jni","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","v","z","Array","Array","Boolean","Byte","Char","Double","Float","Int","JavaType","Long","Method","Object","Object","Primitive","Primitive","Primitive","ReturnType","Short","TypeSignature","Void","args","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_str","from_str","from_str","into","into","into","into","lookup","lookup","lookup","lookup","ret","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","JNIStr","JNIString","JavaStr","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrowed","deref","deref","deref","drop","from","from","from","from","from_env","from_ptr","get_raw","into","into","lookup","lookup","lookup","lookup","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","type_id","AllocObject","AttachCurrentThread","AttachCurrentThreadAsDaemon","CallBooleanMethod","CallBooleanMethodA","CallBooleanMethodV","CallByteMethod","CallByteMethodA","CallByteMethodV","CallCharMethod","CallCharMethodA","CallCharMethodV","CallDoubleMethod","CallDoubleMethodA","CallDoubleMethodV","CallFloatMethod","CallFloatMethodA","CallFloatMethodV","CallIntMethod","CallIntMethodA","CallIntMethodV","CallLongMethod","CallLongMethodA","CallLongMethodV","CallNonvirtualBooleanMethod","CallNonvirtualBooleanMethodA","CallNonvirtualBooleanMethodV","CallNonvirtualByteMethod","CallNonvirtualByteMethodA","CallNonvirtualByteMethodV","CallNonvirtualCharMethod","CallNonvirtualCharMethodA","CallNonvirtualCharMethodV","CallNonvirtualDoubleMethod","CallNonvirtualDoubleMethodA","CallNonvirtualDoubleMethodV","CallNonvirtualFloatMethod","CallNonvirtualFloatMethodA","CallNonvirtualFloatMethodV","CallNonvirtualIntMethod","CallNonvirtualIntMethodA","CallNonvirtualIntMethodV","CallNonvirtualLongMethod","CallNonvirtualLongMethodA","CallNonvirtualLongMethodV","CallNonvirtualObjectMethod","CallNonvirtualObjectMethodA","CallNonvirtualObjectMethodV","CallNonvirtualShortMethod","CallNonvirtualShortMethodA","CallNonvirtualShortMethodV","CallNonvirtualVoidMethod","CallNonvirtualVoidMethodA","CallNonvirtualVoidMethodV","CallObjectMethod","CallObjectMethodA","CallObjectMethodV","CallShortMethod","CallShortMethodA","CallShortMethodV","CallStaticBooleanMethod","CallStaticBooleanMethodA","CallStaticBooleanMethodV","CallStaticByteMethod","CallStaticByteMethodA","CallStaticByteMethodV","CallStaticCharMethod","CallStaticCharMethodA","CallStaticCharMethodV","CallStaticDoubleMethod","CallStaticDoubleMethodA","CallStaticDoubleMethodV","CallStaticFloatMethod","CallStaticFloatMethodA","CallStaticFloatMethodV","CallStaticIntMethod","CallStaticIntMethodA","CallStaticIntMethodV","CallStaticLongMethod","CallStaticLongMethodA","CallStaticLongMethodV","CallStaticObjectMethod","CallStaticObjectMethodA","CallStaticObjectMethodV","CallStaticShortMethod","CallStaticShortMethodA","CallStaticShortMethodV","CallStaticVoidMethod","CallStaticVoidMethodA","CallStaticVoidMethodV","CallVoidMethod","CallVoidMethodA","CallVoidMethodV","DefineClass","DeleteGlobalRef","DeleteLocalRef","DeleteWeakGlobalRef","DestroyJavaVM","DetachCurrentThread","EnsureLocalCapacity","ExceptionCheck","ExceptionClear","ExceptionDescribe","ExceptionOccurred","FatalError","FindClass","FromReflectedField","FromReflectedMethod","GetArrayLength","GetBooleanArrayElements","GetBooleanArrayRegion","GetBooleanField","GetByteArrayElements","GetByteArrayRegion","GetByteField","GetCharArrayElements","GetCharArrayRegion","GetCharField","GetDirectBufferAddress","GetDirectBufferCapacity","GetDoubleArrayElements","GetDoubleArrayRegion","GetDoubleField","GetEnv","GetFieldID","GetFloatArrayElements","GetFloatArrayRegion","GetFloatField","GetIntArrayElements","GetIntArrayRegion","GetIntField","GetJavaVM","GetLongArrayElements","GetLongArrayRegion","GetLongField","GetMethodID","GetObjectArrayElement","GetObjectClass","GetObjectField","GetObjectRefType","GetPrimitiveArrayCritical","GetShortArrayElements","GetShortArrayRegion","GetShortField","GetStaticBooleanField","GetStaticByteField","GetStaticCharField","GetStaticDoubleField","GetStaticFieldID","GetStaticFloatField","GetStaticIntField","GetStaticLongField","GetStaticMethodID","GetStaticObjectField","GetStaticShortField","GetStringChars","GetStringCritical","GetStringLength","GetStringRegion","GetStringUTFChars","GetStringUTFLength","GetStringUTFRegion","GetSuperclass","GetVersion","IsAssignableFrom","IsInstanceOf","IsSameObject","JNIEnv","JNIEnv_","JNIGlobalRefType","JNIInvalidRefType","JNIInvokeInterface_","JNILocalRefType","JNINativeInterface_","JNINativeMethod","JNIWeakGlobalRefType","JNI_ABORT","JNI_COMMIT","JNI_CreateJavaVM","JNI_EDETACHED","JNI_EEXIST","JNI_EINVAL","JNI_ENOMEM","JNI_ERR","JNI_EVERSION","JNI_FALSE","JNI_GetCreatedJavaVMs","JNI_GetDefaultJavaVMInitArgs","JNI_OK","JNI_TRUE","JNI_VERSION_1_1","JNI_VERSION_1_2","JNI_VERSION_1_4","JNI_VERSION_1_6","JNI_VERSION_1_8","JavaVM","JavaVMAttachArgs","JavaVMInitArgs","JavaVMOption","MonitorEnter","MonitorExit","NewBooleanArray","NewByteArray","NewCharArray","NewDirectByteBuffer","NewDoubleArray","NewFloatArray","NewGlobalRef","NewIntArray","NewLocalRef","NewLongArray","NewObject","NewObjectA","NewObjectArray","NewObjectV","NewShortArray","NewString","NewStringUTF","NewWeakGlobalRef","PopLocalFrame","PushLocalFrame","RegisterNatives","ReleaseBooleanArrayElements","ReleaseByteArrayElements","ReleaseCharArrayElements","ReleaseDoubleArrayElements","ReleaseFloatArrayElements","ReleaseIntArrayElements","ReleaseLongArrayElements","ReleasePrimitiveArrayCritical","ReleaseShortArrayElements","ReleaseStringChars","ReleaseStringCritical","ReleaseStringUTFChars","SetBooleanArrayRegion","SetBooleanField","SetByteArrayRegion","SetByteField","SetCharArrayRegion","SetCharField","SetDoubleArrayRegion","SetDoubleField","SetFloatArrayRegion","SetFloatField","SetIntArrayRegion","SetIntField","SetLongArrayRegion","SetLongField","SetObjectArrayElement","SetObjectField","SetShortArrayRegion","SetShortField","SetStaticBooleanField","SetStaticByteField","SetStaticCharField","SetStaticDoubleField","SetStaticFloatField","SetStaticIntField","SetStaticLongField","SetStaticObjectField","SetStaticShortField","Throw","ThrowNew","ToReflectedField","ToReflectedMethod","UnregisterNatives","_jfieldID","_jmethodID","_jobject","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","d","extraInfo","f","fnPtr","from","from","from","from","from","from","from","from","from","from","from","from","from","functions","get","get","get","get","get","get","get","get","group","i","ignoreUnrecognized","into","into","into","into","into","into","into","into","into","into","into","into","j","jarray","jboolean","jbooleanArray","jbyte","jbyteArray","jchar","jcharArray","jclass","jdouble","jdoubleArray","jfieldID","jfloat","jfloatArray","jint","jintArray","jlong","jlongArray","jmethodID","jobject","jobjectArray","jobjectRefType","jshort","jshortArray","jsize","jstring","jthrowable","jvalue","jweak","l","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","nOptions","name","name","optionString","options","release","release","release","release","release","release","release","release","reserved0","reserved0","reserved1","reserved1","reserved2","reserved2","reserved3","s","signature","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","va_list","version","version","z"],"q":[[0,"jni"],[204,"jni::descriptors"],[206,"jni::errors"],[272,"jni::errors::Error"],[276,"jni::objects"],[611,"jni::signature"],[696,"jni::strings"],[732,"jni::sys"],[1207,"core::convert"],[1208,"core::convert"],[1209,"core::fmt"],[1210,"core::fmt"],[1211,"core::marker"],[1212,"std::os::raw"],[1213,"core::result"],[1214,"alloc::sync"],[1215,"core::any"],[1216,"core::ops::function"],[1217,"std::sync::poison"],[1218,"core::error"],[1219,"core::option"],[1220,"alloc::string"],[1221,"std::os::raw"],[1222,"core::ffi"]],"d":["A RAII implementation of scoped guard which detaches the …","The capacity of local frames, allocated for attached …","Thread attachment manager. It allows to execute closures …","","FFI-compatible JNIEnv struct. You can safely use this as …","JNI Version","The Java VM, providing Invocation API support.","Guard for a lock on a java object. This gets returned from …","Native method descriptor.","","","","","","Allocates a new object from a class descriptor without …","Attaches the current thread to the Java VM. The returned …","Attaches the current thread to the Java VM as a <em>daemon</em>. …","Attaches the current thread to the JVM. Calling this for a …","Creates a new auto-deleted local reference.","","","","","","","","","","","","","","","Create a new java byte array from a rust byte slice.","Calls an object method safely. This comes with a number of …","Call an object method in an unsafe manner. This does …","Calls a static method safely. This comes with a number of …","Call a static method in an unsafe manner. This does …","","","","","","","Converts a java byte array to a rust vector of bytes.","Load a class from a buffer of raw class data. The name of …","Load a class from a buffer of raw class data. The name of …","Deletes the local reference.","","Descriptors for classes and method IDs.","","","Ensures that at least a given number of local references …","Errors. Do you really need more explanation?","Check to see if an exception is being thrown. This only …","Clear an exception in the process of being thrown. If this …","Print exception information to the console.","Check whether or not an exception is currently in the …","Abort the JVM with an error message.","Look up a class by name.","","","Pointer to native function with signature …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a JNIEnv from a raw pointer.","Create a JavaVM from a raw pointer.","Return an AutoArray of the given Java array.","Get the length of a java array","See also <code>get_array_elements</code>","Copy elements of the java boolean array from the <code>start</code> …","See also <code>get_array_elements</code>","Copy elements of the java byte array from the <code>start</code> index …","See also <code>get_array_elements</code>","Copy elements of the java char array from the <code>start</code> index …","Returns the starting address of the memory of the direct …","Returns the capacity (length) of the direct …","See also <code>get_array_elements</code>","Copy elements of the java double array from the <code>start</code> …","Get the <code>JNIEnv</code> associated with the current thread, or …","Get a field. Requires an object class lookup and a field …","Look up the field ID for a class/name/type combination.","Get a field without checking the provided type against the …","See also <code>get_array_elements</code>","Copy elements of the java float array from the <code>start</code> index …","See also <code>get_array_elements</code>","Copy elements of the java int array from the <code>start</code> index …","Returns the Java VM interface.","Returns underlying <code>sys::JavaVM</code> interface.","Cast a JObject to a <code>JList</code>. This won’t throw exceptions …","See also <code>get_array_elements</code>","Copy elements of the java long array from the <code>start</code> index …","Cast a JObject to a JMap. This won’t throw exceptions or …","Look up a method by class descriptor, name, and signature.","Returns underlying <code>sys::JNIEnv</code> interface.","Returns an element of the <code>jobjectArray</code> array.","Get the class for an object.","Return an AutoPrimitiveArray of the given Java primitive …","Gets a lock on a Rust value that’s been given to a Java …","See also <code>get_array_elements</code>","Copy elements of the java short array from the <code>start</code> index …","Get a static field. Requires a class lookup and a field id …","Look up the static field ID for a class/name/type …","Get a static field without checking the provided type …","Look up a static method by class descriptor, name, and …","Get a JavaStr from a JString. This allows conversions from …","Get a pointer to the character array beneath a JString.","Returns the superclass for a particular class OR …","Get the java version that we’re being executed from.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Tests whether class1 is assignable from class2.","Returns true if the object reference can be cast to the …","Returns true if ref1 and ref2 refer to the same Java …","Lock a Java object. The MonitorGuard that this returns is …","","","","","","","","Name of method.","Creates new Executor with specified JVM.","Create a new java boolean array of supplied length.","Create a new java byte array of supplied length.","Create a new java char array of supplied length.","Create a new instance of a direct java.nio.ByteBuffer","Create a new java double array of supplied length.","Create a new java float array of supplied length.","Turns an object into a global ref. This has the benefit of …","Create a new java int array of supplied length.","Create a new local reference to an object.","Create a new java long array of supplied length.","Create a new object using a constructor. This is done …","Construct a new array holding objects in class …","Create a new object using a constructor. Arguments aren’…","Create a new java short array of supplied length.","Create a new java string object from a rust string. This …","Wrappers for object pointers returned from the JVM.","Pops off the current local reference frame, frees all the …","Creates a new local reference frame, in which at least a …","Bind function pointers to native methods of class …","Unpin the array returned by <code>get_string_utf_chars</code>.","Copy the contents of the <code>buf</code> slice to the java boolean …","Copy the contents of the <code>buf</code> slice to the java byte array …","Copy the contents of the <code>buf</code> slice to the java char array …","Copy the contents of the <code>buf</code> slice to the java double …","Set a field. Does the same lookups as <code>get_field</code> and …","Set a field without any type checking.","Copy the contents of the <code>buf</code> slice to the java float array …","Copy the contents of the <code>buf</code> slice to the java int array …","Copy the contents of the <code>buf</code> slice to the java long array …","Sets an element of the <code>jobjectArray</code> array.","Surrenders ownership of a Rust value to Java.","Copy the contents of the <code>buf</code> slice to the java short array …","Set a static field. Requires a class lookup and a field id …","Method signature.","Parser for java type signatures.","String types for going to/from java strings.","<code>jni-sys</code> re-exports","Take a Rust field back from Java.","Returns the current number of threads attached to the JVM.","Raise an exception from an existing object. This will …","Create and throw a new exception from a class descriptor …","","","","","","","","","","","","","","","","","","","","","","","","","Unbind all native methods of class.","Executes a provided closure, making sure that the current …","Executes a provided closure, making sure that the current …","Executes the given function in a new local reference …","Trait for things that can be looked up through the JNI via …","Look up the concrete type from the JVM.","","Contains the error value","","","","","","","","","","","","","","","","","Contains the success value","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Auto-release wrapper for pointer-based generic arrays.","Auto-delete wrapper for local refs.","Auto-release wrapper for pointer-based primitive arrays.","","","","Copy back the content and free the elems buffer. For …","","","A global JVM reference. These are “pinned” by the …","","Lifetime’d representation of a <code>jobject</code> that is an …","Lifetime’d representation of a <code>jclass</code>. Just a <code>JObject</code> …","Wrapper around <code>jfieldID</code> that implements <code>Send</code> + <code>Sync</code> since …","Wrapper for JObjects that implement <code>java/util/List</code>. …","An iterator over the keys and values in a map.","Wrapper for JObjects that implement <code>java/util/Map</code>. …","An iterator over the keys and values in a map.","Wrapper around <code>jmethodID</code> that implements <code>Send</code> + <code>Sync</code> since …","Wrapper around <code>sys::jobject</code> that adds a lifetime. This …","Wrapper around <code>jfieldID</code> that implements <code>Send</code> + <code>Sync</code> since …","Wrapper around <code>jmethodID</code> that implements <code>Send</code> + <code>Sync</code> since …","Lifetime’d representation of a <code>jstring</code>. Just a <code>JObject</code> …","Lifetime’d representation of a <code>jthrowable</code>. Just a <code>JObject</code>…","Rusty version of the JNI C <code>jvalue</code> enum. Used in Java …","","Free the buffer without copying back the possible changes.","","ReleaseMode","","Trait to define type array access/release","","Append an element to the list","Get a reference to the wrapped object","Get the object from the global ref","Get a reference to the wrapped pointer","Get a reference to the wrapped pointer","Try to unwrap to a byte.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Try to unwrap to a char.","","","","","","","","","","","","","","","","","","","","","","","","","Commits the changes to the array, if it is a copy","Try to unwrap to a double.","","","","","","","","","","","","","Don’t commit the changes to the array on release (if it …","Don’t copy the changes to the array on release (if it is …","","","","Try to unwrap to a float.","","","","","","","","","","Forget the wrapper, returning the original object.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Create a map from the environment and an object. This …","Create a map from the environment and an object. This …","Creates a <code>JMethodID</code> that wraps the given <code>raw</code> <code>jmethodID</code>","Creates a <code>JStaticMethodID</code> that wraps the given <code>raw</code> …","Creates a <code>JFieldID</code> that wraps the given <code>raw</code> <code>jfieldID</code>","Creates a <code>JStaticFieldID</code> that wraps the given <code>raw</code> <code>jfieldID</code>","Creates a <code>JObject</code> that wraps the given <code>raw</code> <code>jobject</code>","Creates a <code>JThrowable</code> that wraps the given <code>raw</code> <code>jthrowable</code>","Creates a <code>JClass</code> that wraps the given <code>raw</code> <code>jclass</code>","Creates a <code>JString</code> that wraps the given <code>raw</code> <code>jstring</code>","Creates a <code>JByteBuffer</code> that wraps the given <code>raw</code> <code>jobject</code>","getter","Look up the value for a key. Returns <code>Some</code> if it’s found …","Look up the value for a key. Returns <code>Some</code> if it’s found …","Try to unwrap to an int.","Insert an element at a specific index","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Unwrap to the internal jni type.","Unwrap to the internal jni type.","Unwrap to the internal jni type.","Unwrap to the internal jni type.","Unwrap to the internal jni type.","Unwrap to the raw jni type.","Unwrap to the raw jni type.","Unwrap to the raw jni type.","Unwrap to the raw jni type.","Indicates if the array is a copy or not","Indicates if the array is a copy or not","Get key/value iterator for the map. This is done by …","Get key/value iterator for the map. This is done by …","Try to unwrap to a long.","Try to unwrap to an Object.","","","","","","","","","","","","","","","","","","","","","","","Creates a new auto-delete wrapper for a local ref.","","","Creates a new null object","Pop the last element from the list","Get the primitive type for the enum variant. If it’s not …","Look up the value for a key. Returns <code>Some</code> with the old …","releaser","Remove a value from the map. Returns <code>Some</code> with the removed …","Remove an element from the list by index","Try to unwrap to a short.","Get the size of the list","Returns the array size","Returns the array size","Convert the enum to its jni-compatible equivalent.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the type name for the enum variant.","Try to unwrap to a void.","Try to unwrap to a boolean.","","","","","","","","","Enum representing any java type in addition to method …","","","","","A primitive java type. These are the things that can be …","","","Enum representing any java type that may be used as a …","","A method type signature. This is the structure …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Parse a signature string into a TypeSignature enum.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper for <code>std::ffi::CStr</code> that also takes care of …","Wrapper for <code>std::ffi::CString</code> that also takes care of …","Reference to a string in the JVM. Holds a pointer to the …","","","","","","","","Get the borrowed version of the JNIString. Equivalent to …","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Build a <code>JavaStr</code> from an object and a reference to the …","Construct a reference to a <code>JNIStr</code> from a pointer. …","Extract the raw C string pointer from the JavaStr. This …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Get Java $jni_type array","Get Java $jni_type array","Get Java $jni_type array","Get Java $jni_type array","Get Java $jni_type array","Get Java $jni_type array","Get Java $jni_type array","Get Java $jni_type array","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Release Java $jni_type array","Release Java $jni_type array","Release Java $jni_type array","Release Java $jni_type array","Release Java $jni_type array","Release Java $jni_type array","Release Java $jni_type array","Release Java $jni_type array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,21,0,0,0,0,0,21,21,21,21,21,1,6,6,6,1,72,25,7,21,1,6,22,72,25,7,21,1,6,22,1,1,1,1,1,21,1,22,21,1,22,1,1,1,1,7,0,25,7,1,0,1,1,1,1,1,1,21,6,72,72,25,7,21,21,1,6,22,1,6,1,1,1,1,1,1,1,1,1,1,1,1,6,1,1,1,1,1,1,1,1,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,72,25,7,21,1,6,22,1,1,1,1,72,25,7,21,1,6,22,72,22,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,72,0,0,0,1,6,1,1,21,1,22,72,25,7,21,1,6,22,72,25,7,21,1,6,22,72,25,7,21,1,6,22,1,22,22,1,0,5,76,3,0,0,68,68,68,76,68,68,68,68,68,0,68,76,68,68,3,76,68,0,76,68,0,68,76,68,76,78,68,76,78,68,76,78,68,68,76,76,78,68,68,76,78,68,76,0,78,78,68,76,78,68,81,68,76,78,68,76,78,68,76,78,68,76,105,106,105,106,0,0,0,13,13,13,36,13,13,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,36,13,0,13,0,13,53,8,71,37,58,13,56,90,53,91,8,37,58,13,19,20,49,63,2,28,4,65,45,71,36,56,90,53,91,8,37,58,13,19,20,49,63,2,28,4,65,45,71,36,13,13,19,20,49,63,2,28,4,65,45,71,36,13,19,20,49,63,2,28,4,65,45,71,36,37,13,2,28,4,65,45,56,53,2,28,4,65,45,37,58,8,37,58,13,13,19,20,63,2,4,45,71,36,8,56,90,53,91,8,37,58,13,13,13,13,13,13,13,13,13,13,13,13,19,20,49,63,2,2,2,2,2,2,2,2,2,28,28,4,4,65,65,45,45,71,36,56,53,19,20,49,63,2,28,4,65,45,38,56,53,13,53,56,90,53,91,8,37,58,13,19,20,49,63,2,28,4,65,45,71,36,90,91,19,20,49,63,2,28,4,65,45,37,58,56,53,13,13,56,90,53,91,8,8,37,58,13,19,20,49,63,2,2,28,4,65,45,71,71,36,8,90,91,2,53,13,56,38,56,53,13,53,37,58,13,13,19,20,49,63,2,28,4,65,45,71,36,56,90,53,91,8,37,58,13,19,20,49,63,2,2,28,4,65,45,71,36,56,90,53,91,8,37,58,13,19,20,49,63,2,28,4,65,45,71,36,56,90,53,91,8,37,58,13,19,20,49,63,2,28,4,65,45,71,36,13,13,13,64,17,92,92,92,92,92,92,0,92,64,64,17,0,64,17,0,92,0,92,94,92,64,17,94,92,64,17,94,92,64,17,94,92,64,17,94,92,64,17,94,92,92,64,64,17,17,94,94,92,64,17,94,64,17,94,92,64,17,94,92,64,17,94,94,92,64,17,94,92,64,17,94,92,64,17,94,92,64,17,94,92,64,17,94,0,0,0,14,14,95,66,14,95,66,14,14,95,66,66,14,14,95,66,66,95,66,14,66,14,14,14,66,95,14,66,14,66,14,95,66,100,96,96,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,96,96,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,96,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,0,0,98,98,0,98,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,0,0,0,18,107,108,109,18,98,99,100,101,102,103,104,96,107,108,109,18,98,99,100,101,102,103,104,96,18,18,98,99,100,101,102,103,104,96,18,98,99,100,101,102,103,104,96,18,102,18,99,107,108,109,18,18,98,99,100,101,102,103,104,96,101,26,55,42,41,44,62,51,48,104,18,103,107,108,109,18,98,99,100,101,102,103,104,96,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,107,108,109,18,98,99,100,101,102,103,104,96,103,99,104,102,103,26,55,42,41,44,62,51,48,100,96,100,96,100,96,100,18,99,18,98,99,100,101,102,103,104,96,26,55,42,41,44,62,51,48,107,108,109,18,98,99,100,101,102,103,104,96,107,108,109,18,98,99,100,101,102,103,104,96,107,108,109,18,98,99,100,101,102,103,104,96,0,103,104,18],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,-1],[[3,[2]]],[[5,[4]]]],[6,[[3,[7]]]],[6,[[3,[1]]]],[6,[[3,[1]]]],[[1,-1],8,[[9,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,[11,[10]]],[[3,[12]]]],[[1,-1,-2,-3,[11,[13]]],[[3,[13]]],[[9,[2]]],[[9,[14]]],[[9,[14]],[16,[15]]]],[[1,-1,-2,17,[11,[18]]],[[3,[13]]],[[9,[2]]],[[5,[19]]]],[[1,-1,-2,-3,[11,[13]]],[[3,[13]]],[[5,[4]]],[[9,[14]]],[[9,[14]],[16,[15]]]],[[1,-1,-2,17,[11,[18]]],[[3,[13]]],[[5,[4]]],[[5,[20]]]],[21,21],[1,1],[22,22],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[1,12],[[3,[[24,[10]]]]]],[[1,-1,2,[11,[10]]],[[3,[4]]],[[9,[14]]]],[[1,2,[11,[10]]],[[3,[4]]]],[[1,2],[[3,[23]]]],[7,-1,[]],0,[25,23],[7,23],[[1,26],[[3,[23]]]],0,[1,[[3,[27]]]],[1,[[3,[23]]]],[1,[[3,[23]]]],[1,[[3,[28]]]],[[1,-1],29,[[9,[14]]]],[[1,-1],[[3,[4]]],[[9,[14]]]],[[21,30],31],[[6,30],31],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[32,21],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[33,[[3,[1]]]],[34,[[3,[6]]]],[[1,35,36],[[3,[[37,[-1]]]]],38],[[1,35],[[3,[39]]]],[[1,40,36],[[3,[[37,[41]]]]]],[[1,40,39,[11,[41]]],[[3,[23]]]],[[1,12,36],[[3,[[37,[42]]]]]],[[1,12,39,[11,[42]]],[[3,[23]]]],[[1,43,36],[[3,[[37,[44]]]]]],[[1,43,39,[11,[44]]],[[3,[23]]]],[[1,45],[[3,[10]]]],[[1,45],[[3,[46]]]],[[1,47,36],[[3,[[37,[48]]]]]],[[1,47,39,[11,[48]]],[[3,[23]]]],[6,[[3,[1]]]],[[1,-1,-2,-3],[[3,[13]]],[[9,[2]]],[[9,[14]]],[[9,[14]],[16,[15]]]],[[1,-1,-2,-3],[[3,[49]]],[[5,[4]]],[[9,[14]]],[[9,[14]]]],[[1,-1,-2,17],[[3,[13]]],[[9,[2]]],[[5,[49]]]],[[1,50,36],[[3,[[37,[51]]]]]],[[1,50,39,[11,[51]]],[[3,[23]]]],[[1,52,36],[[3,[[37,[26]]]]]],[[1,52,39,[11,[26]]],[[3,[23]]]],[1,[[3,[6]]]],[6,34],[[1,2],[[3,[53]]]],[[1,54,36],[[3,[[37,[55]]]]]],[[1,54,39,[11,[55]]],[[3,[23]]]],[[1,2],[[3,[56]]]],[[1,-1,-2,-3],[[3,[19]]],[[5,[4]]],[[9,[14]]],[[9,[14]]]],[1,33],[[1,57,39],[[3,[2]]]],[[1,-1],[[3,[4]]],[[9,[2]]]],[[1,35,36],[[3,[58]]]],[[1,-1,-2],[[3,[[59,[-3]]]]],[[9,[2]]],[[9,[14]]],60],[[1,61,36],[[3,[[37,[62]]]]]],[[1,61,39,[11,[62]]],[[3,[23]]]],[[1,-1,-2,-3],[[3,[13]]],[[5,[4]]],[[9,[14]]],[[9,[14]],[16,[15]]]],[[1,-1,-2,-3],[[3,[63]]],[[5,[4]]],[[9,[14]]],[[9,[14]]]],[[1,-1,-2,64],[[3,[13]]],[[5,[4]]],[[5,[63]]]],[[1,-1,-2,-3],[[3,[20]]],[[5,[4]]],[[9,[14]]],[[9,[14]]]],[[1,65],[[3,[66]]]],[[1,65],[[3,[67]]]],[[1,-1],[[3,[4]]],[[5,[4]]]],[1,[[3,[21]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,-1,-2],[[3,[27]]],[[5,[4]]],[[5,[4]]]],[[1,-1,-2],[[3,[27]]],[[9,[2]]],[[5,[4]]]],[[1,-1,-2],[[3,[27]]],[[9,[2]]],[[9,[2]]]],[[1,-1],[[3,[25]]],[[9,[2]]]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],0,[[[70,[6]]],22],[[1,39],[[3,[40]]]],[[1,39],[[3,[12]]]],[[1,39],[[3,[43]]]],[[1,10,46],[[3,[45]]]],[[1,39],[[3,[47]]]],[[1,39],[[3,[50]]]],[[1,-1],[[3,[71]]],[[9,[2]]]],[[1,39],[[3,[52]]]],[[1,-1],[[3,[2]]],[[9,[2]]]],[[1,39],[[3,[54]]]],[[1,-1,-2,[11,[13]]],[[3,[2]]],[[5,[4]]],[[9,[14]],[16,[15]]]],[[1,39,-1,-2],[[3,[57]]],[[5,[4]]],[[9,[2]]]],[[1,-1,19,[11,[13]]],[[3,[2]]],[[5,[4]]]],[[1,39],[[3,[61]]]],[[1,-1],[[3,[65]]],[[9,[14]]]],0,[[1,2],[[3,[2]]]],[[1,32],[[3,[23]]]],[[1,-1,[11,[72]]],[[3,[23]]],[[5,[4]]]],[[1,65,67],[[3,[23]]]],[[1,40,39,[11,[41]]],[[3,[23]]]],[[1,12,39,[11,[42]]],[[3,[23]]]],[[1,43,39,[11,[44]]],[[3,[23]]]],[[1,47,39,[11,[48]]],[[3,[23]]]],[[1,-1,-2,-3,13],[[3,[23]]],[[9,[2]]],[[9,[14]]],[[9,[14]],[16,[15]]]],[[1,-1,-2,13],[[3,[23]]],[[9,[2]]],[[5,[49]]]],[[1,50,39,[11,[51]]],[[3,[23]]]],[[1,52,39,[11,[26]]],[[3,[23]]]],[[1,54,39,[11,[55]]],[[3,[23]]]],[[1,57,39,-1],[[3,[23]]],[[9,[2]]]],[[1,-1,-2,-3],[[3,[23]]],[[9,[2]]],[[16,[15]]],60],[[1,61,39,[11,[62]]],[[3,[23]]]],[[1,-1,-2,13],[[3,[23]]],[[5,[4]]],[[5,[63]]]],0,0,0,0,[[1,-1,-2],[[3,[-3]]],[[9,[2]]],[[16,[15]]],60],[6,46],[[1,-1],[[3,[23]]],[[5,[28]]]],[[1,-1,-2],[[3,[23]]],[[5,[4]]],[[9,[14]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[[1,-1],[[3,[23]]],[[5,[4]]]],[[22,-2],[[3,[-1]]],[],[[75,[1],[[74,[[3,[-1]]]]]]]],[[22,32,-2],[[3,[-1]]],[],[[75,[1],[[74,[[3,[-1]]]]]]]],[[1,32,-1],[[3,[2]]],[[75,[],[[74,[[3,[2]]]]]]]],0,[[5,1],[[3,[-1]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[68,30],31],[[68,30],31],[[76,30],31],[[76,30],31],[-1,-1,[]],[[[77,[-1]]],68,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[26,[[3,[23]]]],[[-1,1],[[69,[-2,68]]],[],[]],[[78,1],[[3,[28]]]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],0,[68,[[80,[79]]]],[81,78],[-1,82,[]],[-1,82,[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[53,2],[[3,[23]]]],[8,2],[71,2],[[[37,[-1]]],[],38],[58,83],[13,[[3,[42]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,[[3,[44]]]],[13,13],[19,19],[20,20],[49,49],[63,63],[2,2],[28,28],[4,4],[65,65],[45,45],[71,71],[36,36],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[[37,[-1]]],[[3,[23]]],38],[13,[[3,[48]]]],[[],2],[[],28],[[],4],[[],65],[[],45],[56,-1,[]],[53,-1,[]],[2,-1,[]],[28,-1,[]],[4,-1,[]],[65,-1,[]],[45,-1,[]],[[[37,[-1]]],23,38],[58,23],[8,23],[[[37,[-1]]],23,38],[58,23],[13,[[3,[51]]]],[[13,30],31],[[19,30],31],[[20,30],31],[[63,30],31],[[2,30],31],[[4,30],31],[[45,30],31],[[71,30],31],[[36,30],31],[8,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[23,13],[62,13],[26,13],[44,13],[41,13],[-1,-1,[]],[55,13],[-1,13,[[9,[2]]]],[42,13],[51,13],[27,13],[48,13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[53,2],[45,2],[8,2],[65,2],[4,2],[28,2],[56,2],[71,2],[-1,-1,[]],[-1,-1,[]],[2,28],[2,4],[-1,-1,[]],[-1,-1,[]],[2,65],[-1,-1,[]],[2,45],[-1,-1,[]],[-1,-1,[]],[[1,2],[[3,[56]]]],[[1,2],[[3,[53]]]],[84,19],[84,20],[85,49],[85,63],[86,2],[87,28],[88,4],[89,65],[86,45],[[1,2,41],3],[[56,2],[[3,[[80,[2]]]]]],[[53,26],[[3,[[80,[2]]]]]],[13,[[3,[26]]]],[[53,26,2],[[3,[23]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,84],[20,84],[49,85],[63,85],[2,86],[28,87],[4,88],[65,89],[45,86],[[[37,[-1]]],27,38],[58,27],[56,[[3,[90]]]],[53,[[3,[91]]]],[13,[[3,[55]]]],[13,[[3,[2]]]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[8,1],[[3,[4]]]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[2,1],[[3,[4]]]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[71,1],[[3,[4]]]],[[-1,1],[[69,[-2,68]]],[],[]],[[1,2],8],[90,[[80,[-1]]],[]],[91,[[80,[-1]]],[]],[[],2],[53,[[3,[[80,[2]]]]]],[13,[[80,[92]]]],[[56,2,2],[[3,[[80,[2]]]]]],[[1,2,[93,[38]],32],[[3,[23]]]],[[56,2],[[3,[[80,[2]]]]]],[[53,26],[[3,[[80,[2]]]]]],[13,[[3,[62]]]],[53,[[3,[26]]]],[[[37,[-1]]],[[3,[39]]],38],[58,[[3,[39]]]],[13,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[13,[[3,[2]]]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[13,15],[13,[[3,[23]]]],[13,[[3,[27]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[92,92],[64,64],[17,17],[94,94],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[92,92],27],[[64,64],27],[[17,17],27],[[94,94],27],[[92,30],31],[[92,30],31],[[64,30],31],[[64,30],31],[[17,30],31],[[17,30],31],[[94,30],31],[[94,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[15,[[69,[64,-1]]],[]],[15,[[69,[17,-1]]],[]],[-1,[[3,[94]]],[[16,[15]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,82,[]],[-1,82,[]],[-1,82,[]],[-1,82,[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],0,0,0,[14,95],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,95],[14,-1,[]],[95,-1,[]],[66,-1,[]],[66,23],[-1,14,[[16,[15]]]],[-1,-1,[]],[66,95],[-1,-1,[]],[[1,65],[[3,[66]]]],[67,95],[66,67],[-1,-2,[],[]],[-1,-2,[],[]],[[14,1],[[3,[28]]]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[4,68]]],[]],[[-1,1],[[69,[-2,68]]],[],[]],[95,14],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[96,97,97],32],0,0,0,0,0,0,0,[[96,32,32],32],[97,32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[18,18],[98,98],[99,99],[100,100],[101,101],[102,102],[103,103],[104,104],[96,96],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],0,0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[13,18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[1,2,41],3],[[1,2,41],3],[[1,2,41],3],[[1,2,41],3],[[1,2,41],3],[[1,2,41],3],[[1,2,41],3],[[1,2,41],3],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],[[-1,1],[[69,[-2,68]]],[],[]],0,0,0,0,0,[[1,2,[93,[26]],32],[[3,[23]]]],[[1,2,[93,[55]],32],[[3,[23]]]],[[1,2,[93,[42]],32],[[3,[23]]]],[[1,2,[93,[41]],32],[[3,[23]]]],[[1,2,[93,[44]],32],[[3,[23]]]],[[1,2,[93,[62]],32],[[3,[23]]]],[[1,2,[93,[51]],32],[[3,[23]]]],[[1,2,[93,[48]],32],[[3,[23]]]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,[[3,[26]]]],[13,[[3,[55]]]],[13,[[3,[42]]]],[13,[[3,[41]]]],[13,[[3,[44]]]],[13,[[3,[62]]]],[13,[[3,[51]]]],[13,[[3,[48]]]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],0,0,0,0],"c":[],"p":[[5,"JNIEnv",0],[5,"JObject",276],[8,"Result",206],[5,"JClass",276],[10,"Desc",204],[5,"JavaVM",0],[5,"AttachGuard",0],[5,"AutoLocal",276],[10,"Into",1207],[1,"u8"],[1,"slice"],[8,"jbyteArray",732],[6,"JValue",276],[5,"JNIString",696],[1,"str"],[10,"AsRef",1207],[6,"ReturnType",611],[20,"jvalue",732],[5,"JMethodID",276],[5,"JStaticMethodID",276],[6,"JNIVersion",0],[5,"Executor",0],[1,"tuple"],[5,"Vec",1208],[5,"MonitorGuard",0],[8,"jint",732],[1,"bool"],[5,"JThrowable",276],[1,"never"],[5,"Formatter",1209],[8,"Result",1209],[1,"i32"],[8,"JNIEnv",732],[8,"JavaVM",732],[8,"jarray",732],[6,"ReleaseMode",276],[5,"AutoArray",276],[10,"TypeArray",276],[8,"jsize",732],[8,"jbooleanArray",732],[8,"jboolean",732],[8,"jbyte",732],[8,"jcharArray",732],[8,"jchar",732],[5,"JByteBuffer",276],[1,"usize"],[8,"jdoubleArray",732],[8,"jdouble",732],[5,"JFieldID",276],[8,"jfloatArray",732],[8,"jfloat",732],[8,"jintArray",732],[5,"JList",276],[8,"jlongArray",732],[8,"jlong",732],[5,"JMap",276],[8,"jobjectArray",732],[5,"AutoPrimitiveArray",276],[5,"MutexGuard",1210],[10,"Send",1211],[8,"jshortArray",732],[8,"jshort",732],[5,"JStaticFieldID",276],[6,"JavaType",611],[5,"JString",276],[5,"JavaStr",696],[8,"c_char",1212],[6,"Error",206],[6,"Result",1213],[5,"Arc",1214],[5,"GlobalRef",276],[5,"NativeMethod",0],[5,"TypeId",1215],[17,"Output"],[10,"FnOnce",1216],[6,"JniError",206],[6,"TryLockError",1217],[5,"Exception",206],[10,"Error",1218],[6,"Option",1219],[10,"ToException",206],[5,"String",1220],[8,"c_void",1212],[8,"jmethodID",732],[8,"jfieldID",732],[8,"jobject",732],[8,"jthrowable",732],[8,"jclass",732],[8,"jstring",732],[5,"JMapIter",276],[5,"JListIter",276],[6,"Primitive",611],[5,"NonNull",1221],[5,"TypeSignature",611],[5,"JNIStr",696],[5,"JNIInvokeInterface_",732],[6,"c_void",1222],[6,"jobjectRefType",732],[5,"JNINativeMethod",732],[5,"JNINativeInterface_",732],[5,"JNIEnv_",732],[5,"JavaVMOption",732],[5,"JavaVMInitArgs",732],[5,"JavaVMAttachArgs",732],[15,"MethodNotFound",272],[15,"FieldNotFound",272],[6,"_jobject",732],[6,"_jfieldID",732],[6,"_jmethodID",732]],"b":[[242,"impl-Debug-for-Error"],[243,"impl-Display-for-Error"],[244,"impl-Display-for-JniError"],[245,"impl-Debug-for-JniError"],[414,"impl-From%3C()%3E-for-JValue%3C\'a%3E"],[415,"impl-From%3Ci16%3E-for-JValue%3C\'a%3E"],[416,"impl-From%3Ci32%3E-for-JValue%3C\'a%3E"],[417,"impl-From%3Cu16%3E-for-JValue%3C\'a%3E"],[418,"impl-From%3Cu8%3E-for-JValue%3C\'a%3E"],[420,"impl-From%3Ci64%3E-for-JValue%3C\'a%3E"],[421,"impl-From%3CT%3E-for-JValue%3C\'a%3E"],[422,"impl-From%3Ci8%3E-for-JValue%3C\'a%3E"],[423,"impl-From%3Cf32%3E-for-JValue%3C\'a%3E"],[424,"impl-From%3Cbool%3E-for-JValue%3C\'a%3E"],[425,"impl-From%3Cf64%3E-for-JValue%3C\'a%3E"],[430,"impl-From%3CJList%3C\'a,+\'b%3E%3E-for-JObject%3C\'a%3E"],[431,"impl-From%3CJByteBuffer%3C\'a%3E%3E-for-JObject%3C\'a%3E"],[432,"impl-From%3C%26AutoLocal%3C\'a,+\'_%3E%3E-for-JObject%3C\'a%3E"],[433,"impl-From%3CJString%3C\'a%3E%3E-for-JObject%3C\'a%3E"],[434,"impl-From%3CJClass%3C\'a%3E%3E-for-JObject%3C\'a%3E"],[435,"impl-From%3CJThrowable%3C\'a%3E%3E-for-JObject%3C\'a%3E"],[436,"impl-From%3CJMap%3C\'a,+\'b%3E%3E-for-JObject%3C\'a%3E"],[437,"impl-From%3C%26GlobalRef%3E-for-JObject%3C\'a%3E"],[652,"impl-Display-for-Primitive"],[653,"impl-Debug-for-Primitive"],[654,"impl-Debug-for-JavaType"],[655,"impl-Display-for-JavaType"],[656,"impl-Display-for-ReturnType"],[657,"impl-Debug-for-ReturnType"],[658,"impl-Display-for-TypeSignature"],[659,"impl-Debug-for-TypeSignature"]]}],\
["jni_sys",{"doc":"","t":"OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOIFPPFPFFPSSHSSSSSSSHHSSSSSSSIFFFOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOGGGONNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNNNOOOONNNNNNNNNNNNOIIIIIIIIIIIIIIIIIIIIGIIIIIUIOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIOOO","n":["AllocObject","AttachCurrentThread","AttachCurrentThreadAsDaemon","CallBooleanMethod","CallBooleanMethodA","CallBooleanMethodV","CallByteMethod","CallByteMethodA","CallByteMethodV","CallCharMethod","CallCharMethodA","CallCharMethodV","CallDoubleMethod","CallDoubleMethodA","CallDoubleMethodV","CallFloatMethod","CallFloatMethodA","CallFloatMethodV","CallIntMethod","CallIntMethodA","CallIntMethodV","CallLongMethod","CallLongMethodA","CallLongMethodV","CallNonvirtualBooleanMethod","CallNonvirtualBooleanMethodA","CallNonvirtualBooleanMethodV","CallNonvirtualByteMethod","CallNonvirtualByteMethodA","CallNonvirtualByteMethodV","CallNonvirtualCharMethod","CallNonvirtualCharMethodA","CallNonvirtualCharMethodV","CallNonvirtualDoubleMethod","CallNonvirtualDoubleMethodA","CallNonvirtualDoubleMethodV","CallNonvirtualFloatMethod","CallNonvirtualFloatMethodA","CallNonvirtualFloatMethodV","CallNonvirtualIntMethod","CallNonvirtualIntMethodA","CallNonvirtualIntMethodV","CallNonvirtualLongMethod","CallNonvirtualLongMethodA","CallNonvirtualLongMethodV","CallNonvirtualObjectMethod","CallNonvirtualObjectMethodA","CallNonvirtualObjectMethodV","CallNonvirtualShortMethod","CallNonvirtualShortMethodA","CallNonvirtualShortMethodV","CallNonvirtualVoidMethod","CallNonvirtualVoidMethodA","CallNonvirtualVoidMethodV","CallObjectMethod","CallObjectMethodA","CallObjectMethodV","CallShortMethod","CallShortMethodA","CallShortMethodV","CallStaticBooleanMethod","CallStaticBooleanMethodA","CallStaticBooleanMethodV","CallStaticByteMethod","CallStaticByteMethodA","CallStaticByteMethodV","CallStaticCharMethod","CallStaticCharMethodA","CallStaticCharMethodV","CallStaticDoubleMethod","CallStaticDoubleMethodA","CallStaticDoubleMethodV","CallStaticFloatMethod","CallStaticFloatMethodA","CallStaticFloatMethodV","CallStaticIntMethod","CallStaticIntMethodA","CallStaticIntMethodV","CallStaticLongMethod","CallStaticLongMethodA","CallStaticLongMethodV","CallStaticObjectMethod","CallStaticObjectMethodA","CallStaticObjectMethodV","CallStaticShortMethod","CallStaticShortMethodA","CallStaticShortMethodV","CallStaticVoidMethod","CallStaticVoidMethodA","CallStaticVoidMethodV","CallVoidMethod","CallVoidMethodA","CallVoidMethodV","DefineClass","DeleteGlobalRef","DeleteLocalRef","DeleteWeakGlobalRef","DestroyJavaVM","DetachCurrentThread","EnsureLocalCapacity","ExceptionCheck","ExceptionClear","ExceptionDescribe","ExceptionOccurred","FatalError","FindClass","FromReflectedField","FromReflectedMethod","GetArrayLength","GetBooleanArrayElements","GetBooleanArrayRegion","GetBooleanField","GetByteArrayElements","GetByteArrayRegion","GetByteField","GetCharArrayElements","GetCharArrayRegion","GetCharField","GetDirectBufferAddress","GetDirectBufferCapacity","GetDoubleArrayElements","GetDoubleArrayRegion","GetDoubleField","GetEnv","GetFieldID","GetFloatArrayElements","GetFloatArrayRegion","GetFloatField","GetIntArrayElements","GetIntArrayRegion","GetIntField","GetJavaVM","GetLongArrayElements","GetLongArrayRegion","GetLongField","GetMethodID","GetObjectArrayElement","GetObjectClass","GetObjectField","GetObjectRefType","GetPrimitiveArrayCritical","GetShortArrayElements","GetShortArrayRegion","GetShortField","GetStaticBooleanField","GetStaticByteField","GetStaticCharField","GetStaticDoubleField","GetStaticFieldID","GetStaticFloatField","GetStaticIntField","GetStaticLongField","GetStaticMethodID","GetStaticObjectField","GetStaticShortField","GetStringChars","GetStringCritical","GetStringLength","GetStringRegion","GetStringUTFChars","GetStringUTFLength","GetStringUTFRegion","GetSuperclass","GetVersion","IsAssignableFrom","IsInstanceOf","IsSameObject","JNIEnv","JNIEnv_","JNIGlobalRefType","JNIInvalidRefType","JNIInvokeInterface_","JNILocalRefType","JNINativeInterface_","JNINativeMethod","JNIWeakGlobalRefType","JNI_ABORT","JNI_COMMIT","JNI_CreateJavaVM","JNI_EDETACHED","JNI_EEXIST","JNI_EINVAL","JNI_ENOMEM","JNI_ERR","JNI_EVERSION","JNI_FALSE","JNI_GetCreatedJavaVMs","JNI_GetDefaultJavaVMInitArgs","JNI_OK","JNI_TRUE","JNI_VERSION_1_1","JNI_VERSION_1_2","JNI_VERSION_1_4","JNI_VERSION_1_6","JNI_VERSION_1_8","JavaVM","JavaVMAttachArgs","JavaVMInitArgs","JavaVMOption","MonitorEnter","MonitorExit","NewBooleanArray","NewByteArray","NewCharArray","NewDirectByteBuffer","NewDoubleArray","NewFloatArray","NewGlobalRef","NewIntArray","NewLocalRef","NewLongArray","NewObject","NewObjectA","NewObjectArray","NewObjectV","NewShortArray","NewString","NewStringUTF","NewWeakGlobalRef","PopLocalFrame","PushLocalFrame","RegisterNatives","ReleaseBooleanArrayElements","ReleaseByteArrayElements","ReleaseCharArrayElements","ReleaseDoubleArrayElements","ReleaseFloatArrayElements","ReleaseIntArrayElements","ReleaseLongArrayElements","ReleasePrimitiveArrayCritical","ReleaseShortArrayElements","ReleaseStringChars","ReleaseStringCritical","ReleaseStringUTFChars","SetBooleanArrayRegion","SetBooleanField","SetByteArrayRegion","SetByteField","SetCharArrayRegion","SetCharField","SetDoubleArrayRegion","SetDoubleField","SetFloatArrayRegion","SetFloatField","SetIntArrayRegion","SetIntField","SetLongArrayRegion","SetLongField","SetObjectArrayElement","SetObjectField","SetShortArrayRegion","SetShortField","SetStaticBooleanField","SetStaticByteField","SetStaticCharField","SetStaticDoubleField","SetStaticFloatField","SetStaticIntField","SetStaticLongField","SetStaticObjectField","SetStaticShortField","Throw","ThrowNew","ToReflectedField","ToReflectedMethod","UnregisterNatives","_jfieldID","_jmethodID","_jobject","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","d","extraInfo","f","fnPtr","from","from","from","from","from","from","from","from","from","from","from","from","functions","group","i","ignoreUnrecognized","into","into","into","into","into","into","into","into","into","into","into","into","j","jarray","jboolean","jbooleanArray","jbyte","jbyteArray","jchar","jcharArray","jclass","jdouble","jdoubleArray","jfieldID","jfloat","jfloatArray","jint","jintArray","jlong","jlongArray","jmethodID","jobject","jobjectArray","jobjectRefType","jshort","jshortArray","jsize","jstring","jthrowable","jvalue","jweak","l","nOptions","name","name","optionString","options","reserved0","reserved0","reserved1","reserved1","reserved2","reserved2","reserved3","s","signature","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","va_list","version","version","z"],"q":[[0,"jni_sys"],[438,"core::result"],[439,"core::any"]],"deturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[4,9,9,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,9,9,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,9,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,2,2,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,1,13,14,15,1,2,3,4,5,6,7,8,9,13,14,15,1,2,3,4,5,6,7,8,9,1,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,6,1,3,13,14,15,1,2,3,4,5,6,7,8,9,5,8,1,7,13,14,15,1,2,3,4,5,6,7,8,9,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,7,3,8,6,7,4,9,4,9,4,9,4,1,3,1,2,3,4,5,6,7,8,9,13,14,15,1,2,3,4,5,6,7,8,9,13,14,15,1,2,3,4,5,6,7,8,9,13,14,15,1,2,3,4,5,6,7,8,9,0,7,8,1],"fc":[],"p":[[20,"jvalue",0],[6,"jobjectRefType",0],[5,"JNINativeMethod",0],[5,"JNINativeInterface_",0],[5,"JNIEnv_",0],[5,"JavaVMOption",0],[5,"JavaVMInitArgs",0],[5,"JavaVMAttachArgs",0],[5,"JNIInvokeInterface_",0],[1,"tuple"],[6,"Result",438],[5,"TypeId",439],[6,"_jobject",0],[6,"_jfieldID",0],[6,"_jmethodID",0]],"b":[]}],\
["libc",{"doc":"libc - Raw FFI bindings to platforms’ system libraries","t":"","n":["ABDAY_1","ABDAY_2","ABDAY_3","ABDAY_4","ABDAY_5","ABDAY_6","ABDAY_7","ABMON_1","ABMON_10","ABMON_11","ABMON_12","ABMON_2","ABMON_3","ABMON_4","ABMON_5","ABMON_6","ABMON_7","ABMON_8","ABMON_9","ABS_CNT","ABS_MAX","ACCOUNTING","ADDR_COMPAT_LAYOUT","ADDR_LIMIT_32BIT","ADDR_LIMIT_3GB","ADDR_NO_RANDOMIZE","ADFS_SUPER_MAGIC","ADJ_ESTERROR","ADJ_FREQUENCY","ADJ_MAXERROR","ADJ_MICRO","ADJ_NANO","ADJ_OFFSET","ADJ_OFFSET_SINGLESHOT","ADJ_OFFSET_SS_READ","ADJ_SETOFFSET","ADJ_STATUS","ADJ_TAI","ADJ_TICK","ADJ_TIMECONST","AFFS_SUPER_MAGIC","AFS_SUPER_MAGIC","AF_ALG","AF_APPLETALK","AF_ASH","AF_ATMPVC","AF_ATMSVC","AF_AX25","AF_BLUETOOTH","AF_BRIDGE","AF_CAIF","AF_CAN","AF_DECnet","AF_ECONET","AF_IB","AF_IEEE802154","AF_INET","AF_INET6","AF_IPX","AF_IRDA","AF_ISDN","AF_IUCV","AF_KEY","AF_LLC","AF_LOCAL","AF_MPLS","AF_NETBEUI","AF_NETLINK","AF_NETROM","AF_NFC","AF_PACKET","AF_PHONET","AF_PPPOX","AF_RDS","AF_ROSE","AF_ROUTE","AF_RXRPC","AF_SECURITY","AF_SNA","AF_TIPC","AF_UNIX","AF_UNSPEC","AF_VSOCK","AF_WANPIPE","AF_X25","AF_XDP","AIO_ALLDONE","AIO_CANCELED","AIO_NOTCANCELED","AI_ADDRCONFIG","AI_ALL","AI_CANONNAME","AI_NUMERICHOST","AI_NUMERICSERV","AI_PASSIVE","AI_V4MAPPED","ALG_OP_DECRYPT","ALG_OP_ENCRYPT","ALG_SET_AEAD_ASSOCLEN","ALG_SET_AEAD_AUTHSIZE","ALG_SET_DRBG_ENTROPY","ALG_SET_IV","ALG_SET_KEY","ALG_SET_KEY_BY_KEY_SERIAL","ALG_SET_OP","ALT_DIGITS","AM_STR","ARPD_FLUSH","ARPD_LOOKUP","ARPD_UPDATE","ARPHRD_ADAPT","ARPHRD_APPLETLK","ARPHRD_ARCNET","ARPHRD_ASH","ARPHRD_ATM","ARPHRD_AX25","ARPHRD_BIF","ARPHRD_CAN","ARPHRD_CHAOS","ARPHRD_CISCO","ARPHRD_CSLIP","ARPHRD_CSLIP6","ARPHRD_DDCMP","ARPHRD_DLCI","ARPHRD_ECONET","ARPHRD_EETHER","ARPHRD_ETHER","ARPHRD_EUI64","ARPHRD_FCAL","ARPHRD_FCFABRIC","ARPHRD_FCPL","ARPHRD_FCPP","ARPHRD_FDDI","ARPHRD_FRAD","ARPHRD_HDLC","ARPHRD_HIPPI","ARPHRD_HWX25","ARPHRD_IEEE1394","ARPHRD_IEEE802","ARPHRD_IEEE80211","ARPHRD_IEEE80211_PRISM","ARPHRD_IEEE80211_RADIOTAP","ARPHRD_IEEE802154","ARPHRD_IEEE802_TR","ARPHRD_INFINIBAND","ARPHRD_IPDDP","ARPHRD_IPGRE","ARPHRD_IRDA","ARPHRD_LAPB","ARPHRD_LOCALTLK","ARPHRD_LOOPBACK","ARPHRD_METRICOM","ARPHRD_NETROM","ARPHRD_NONE","ARPHRD_PIMREG","ARPHRD_PPP","ARPHRD_PRONET","ARPHRD_RAWHDLC","ARPHRD_ROSE","ARPHRD_RSRVD","ARPHRD_SIT","ARPHRD_SKIP","ARPHRD_SLIP","ARPHRD_SLIP6","ARPHRD_TUNNEL","ARPHRD_TUNNEL6","ARPHRD_VOID","ARPHRD_X25","ARPOP_InREPLY","ARPOP_InREQUEST","ARPOP_NAK","ARPOP_REPLY","ARPOP_REQUEST","ARPOP_RREPLY","ARPOP_RREQUEST","ATF_COM","ATF_DONTPUB","ATF_MAGIC","ATF_NETMASK","ATF_PERM","ATF_PUBL","ATF_USETRAILERS","AT_BASE","AT_BASE_PLATFORM","AT_CLKTCK","AT_EACCESS","AT_EGID","AT_EMPTY_PATH","AT_ENTRY","AT_EUID","AT_EXECFD","AT_EXECFN","AT_FDCWD","AT_FLAGS","AT_GID","AT_HWCAP","AT_HWCAP2","AT_IGNORE","AT_NOTELF","AT_NO_AUTOMOUNT","AT_NULL","AT_PAGESZ","AT_PHDR","AT_PHENT","AT_PHNUM","AT_PLATFORM","AT_RANDOM","AT_RECURSIVE","AT_REMOVEDIR","AT_SECURE","AT_STATX_DONT_SYNC","AT_STATX_FORCE_SYNC","AT_STATX_SYNC_AS_STAT","AT_STATX_SYNC_TYPE","AT_SYMLINK_FOLLOW","AT_SYMLINK_NOFOLLOW","AT_SYSINFO_EHDR","AT_UID","AUTOFS_SUPER_MAGIC","B0","B1000000","B110","B115200","B1152000","B1200","B134","B150","B1500000","B1800","B19200","B200","B2000000","B230400","B2400","B2500000","B300","B3000000","B3500000","B38400","B4000000","B460800","B4800","B50","B500000","B57600","B576000","B600","B75","B921600","B9600","BINDERFS_SUPER_MAGIC","BLKIOMIN","BLKIOOPT","BLKPBSZGET","BLKSSZGET","BOOT_TIME","BOTHER","BPF_ABS","BPF_ADD","BPF_ALU","BPF_AND","BPF_B","BPF_DIV","BPF_FS_MAGIC","BPF_H","BPF_IMM","BPF_IND","BPF_JA","BPF_JEQ","BPF_JGE","BPF_JGT","BPF_JMP","BPF_JSET","BPF_JUMP","BPF_K","BPF_LD","BPF_LDX","BPF_LEN","BPF_LL_OFF","BPF_LSH","BPF_MAXINSNS","BPF_MEM","BPF_MEMWORDS","BPF_MISC","BPF_MISCOP","BPF_MOD","BPF_MSH","BPF_MUL","BPF_NEG","BPF_NET_OFF","BPF_OR","BPF_RET","BPF_RSH","BPF_RVAL","BPF_ST","BPF_STMT","BPF_STX","BPF_SUB","BPF_W","BPF_X","BPF_XOR","BRKINT","BS0","BS1","BSDLY","BTRFS_SUPER_MAGIC","BUFSIZ","BUS_ADRALN","BUS_ADRERR","BUS_MCEERR_AO","BUS_MCEERR_AR","BUS_OBJERR","CANFD_BRS","CANFD_ESI","CANFD_MAX_DLC","CANFD_MAX_DLEN","CANFD_MTU","CANXL_HDR_SIZE","CANXL_MAX_DLC","CANXL_MAX_DLC_MASK","CANXL_MAX_DLEN","CANXL_MAX_MTU","CANXL_MIN_DLC","CANXL_MIN_DLEN","CANXL_MIN_MTU","CANXL_MTU","CANXL_PRIO_BITS","CANXL_PRIO_MASK","CANXL_SEC","CANXL_XLF","CAN_BCM","CAN_EFF_FLAG","CAN_EFF_ID_BITS","CAN_EFF_MASK","CAN_ERR_FLAG","CAN_ERR_MASK","CAN_INV_FILTER","CAN_ISOTP","CAN_J1939","CAN_MAX_DLC","CAN_MAX_DLEN","CAN_MCNET","CAN_MTU","CAN_NPROTO","CAN_RAW","CAN_RAW_ERR_FILTER","CAN_RAW_FD_FRAMES","CAN_RAW_FILTER","CAN_RAW_FILTER_MAX","CAN_RAW_JOIN_FILTERS","CAN_RAW_LOOPBACK","CAN_RAW_RECV_OWN_MSGS","CAN_RAW_XL_FRAMES","CAN_RTR_FLAG","CAN_SFF_ID_BITS","CAN_SFF_MASK","CAN_TP16","CAN_TP20","CBAUD","CBAUDEX","CGROUP2_SUPER_MAGIC","CGROUP_SUPER_MAGIC","CIBAUD","CLD_CONTINUED","CLD_DUMPED","CLD_EXITED","CLD_KILLED","CLD_STOPPED","CLD_TRAPPED","CLOCAL","CLOCK_BOOTTIME","CLOCK_BOOTTIME_ALARM","CLOCK_MONOTONIC","CLOCK_MONOTONIC_COARSE","CLOCK_MONOTONIC_RAW","CLOCK_PROCESS_CPUTIME_ID","CLOCK_REALTIME","CLOCK_REALTIME_ALARM","CLOCK_REALTIME_COARSE","CLOCK_TAI","CLOCK_THREAD_CPUTIME_ID","CLONE_CHILD_CLEARTID","CLONE_CHILD_SETTID","CLONE_CLEAR_SIGHAND","CLONE_DETACHED","CLONE_FILES","CLONE_FS","CLONE_INTO_CGROUP","CLONE_IO","CLONE_NEWCGROUP","CLONE_NEWIPC","CLONE_NEWNET","CLONE_NEWNS","CLONE_NEWPID","CLONE_NEWTIME","CLONE_NEWUSER","CLONE_NEWUTS","CLONE_PARENT","CLONE_PARENT_SETTID","CLONE_PIDFD","CLONE_PTRACE","CLONE_SETTLS","CLONE_SIGHAND","CLONE_SYSVSEM","CLONE_THREAD","CLONE_UNTRACED","CLONE_VFORK","CLONE_VM","CLOSE_RANGE_CLOEXEC","CLOSE_RANGE_UNSHARE","CMSG_DATA","CMSG_FIRSTHDR","CMSG_LEN","CMSG_NXTHDR","CMSG_SPACE","CMSPAR","CODA_SUPER_MAGIC","CODESET","CPU_ALLOC_SIZE","CPU_CLR","CPU_COUNT","CPU_COUNT_S","CPU_EQUAL","CPU_ISSET","CPU_SET","CPU_SETSIZE","CPU_ZERO","CR0","CR1","CR2","CR3","CRAMFS_MAGIC","CRDLY","CREAD","CRNCYSTR","CRTSCTS","CS","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","CTL_ABI","CTL_BUS","CTL_BUS_ISA","CTL_CPU","CTL_DEBUG","CTL_DEV","CTL_FS","CTL_KERN","CTL_NET","CTL_VM","CTRL_ATTR_FAMILY_ID","CTRL_ATTR_FAMILY_NAME","CTRL_ATTR_HDRSIZE","CTRL_ATTR_MAXATTR","CTRL_ATTR_MCAST_GROUPS","CTRL_ATTR_MCAST_GRP_ID","CTRL_ATTR_MCAST_GRP_NAME","CTRL_ATTR_MCAST_GRP_UNSPEC","CTRL_ATTR_OPS","CTRL_ATTR_OP_FLAGS","CTRL_ATTR_OP_ID","CTRL_ATTR_OP_UNSPEC","CTRL_ATTR_UNSPEC","CTRL_ATTR_VERSION","CTRL_CMD_DELFAMILY","CTRL_CMD_DELMCAST_GRP","CTRL_CMD_DELOPS","CTRL_CMD_GETFAMILY","CTRL_CMD_GETMCAST_GRP","CTRL_CMD_GETOPS","CTRL_CMD_NEWFAMILY","CTRL_CMD_NEWMCAST_GRP","CTRL_CMD_NEWOPS","CTRL_CMD_UNSPEC","DAY_1","DAY_2","DAY_3","DAY_4","DAY_5","DAY_6","DAY_7","DCCP_SERVICE_LIST_MAX_LEN","DCCP_SOCKOPT_AVAILABLE_CCIDS","DCCP_SOCKOPT_CCID","DCCP_SOCKOPT_CCID_RX_INFO","DCCP_SOCKOPT_CCID_TX_INFO","DCCP_SOCKOPT_CHANGE_L","DCCP_SOCKOPT_CHANGE_R","DCCP_SOCKOPT_GET_CUR_MPS","DCCP_SOCKOPT_PACKET_SIZE","DCCP_SOCKOPT_QPOLICY_ID","DCCP_SOCKOPT_QPOLICY_TXQLEN","DCCP_SOCKOPT_RECV_CSCOV","DCCP_SOCKOPT_RX_CCID","DCCP_SOCKOPT_SEND_CSCOV","DCCP_SOCKOPT_SERVER_TIMEWAIT","DCCP_SOCKOPT_SERVICE","DCCP_SOCKOPT_TX_CCID","DEAD_PROCESS","DEBUGFS_MAGIC","DEVPTS_SUPER_MAGIC","DIR","DS","DT_BLK","DT_CHR","DT_DIR","DT_FIFO","DT_LNK","DT_REG","DT_SOCK","DT_UNKNOWN","D_FMT","D_T_FMT","Dl_info","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EADV","EAFNOSUPPORT","EAGAIN","EAI_AGAIN","EAI_BADFLAGS","EAI_FAIL","EAI_FAMILY","EAI_MEMORY","EAI_NODATA","EAI_NONAME","EAI_OVERFLOW","EAI_SERVICE","EAI_SOCKTYPE","EAI_SYSTEM","EALREADY","EBADE","EBADF","EBADFD","EBADMSG","EBADR","EBADRQC","EBADSLT","EBFONT","EBUSY","ECANCELED","ECHILD","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","ECHRNG","ECOMM","ECONNABORTED","ECONNREFUSED","ECONNRESET","ECRYPTFS_SUPER_MAGIC","EDEADLK","EDEADLOCK","EDESTADDRREQ","EDOM","EDOTDOT","EDQUOT","EEXIST","EFAULT","EFBIG","EFD_CLOEXEC","EFD_NONBLOCK","EFD_SEMAPHORE","EFLAGS","EFS_SUPER_MAGIC","EHOSTDOWN","EHOSTUNREACH","EHWPOISON","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","EISNAM","EI_ABIVERSION","EI_CLASS","EI_DATA","EI_MAG0","EI_MAG1","EI_MAG2","EI_MAG3","EI_NIDENT","EI_OSABI","EI_PAD","EI_VERSION","EKEYEXPIRED","EKEYREJECTED","EKEYREVOKED","EL2HLT","EL2NSYNC","EL3HLT","EL3RST","ELFCLASS32","ELFCLASS64","ELFCLASSNONE","ELFCLASSNUM","ELFDATA2LSB","ELFDATA2MSB","ELFDATANONE","ELFDATANUM","ELFMAG0","ELFMAG1","ELFMAG2","ELFMAG3","ELFOSABI_AIX","ELFOSABI_ARM","ELFOSABI_ARM_AEABI","ELFOSABI_FREEBSD","ELFOSABI_GNU","ELFOSABI_HPUX","ELFOSABI_IRIX","ELFOSABI_LINUX","ELFOSABI_MODESTO","ELFOSABI_NETBSD","ELFOSABI_NONE","ELFOSABI_OPENBSD","ELFOSABI_SOLARIS","ELFOSABI_STANDALONE","ELFOSABI_SYSV","ELFOSABI_TRU64","ELIBACC","ELIBBAD","ELIBEXEC","ELIBMAX","ELIBSCN","ELNRNG","ELOOP","EMEDIUMTYPE","EMFILE","EMLINK","EMPTY","EMSGSIZE","EMULTIHOP","EM_386","EM_68HC05","EM_68HC08","EM_68HC11","EM_68HC12","EM_68HC16","EM_68K","EM_860","EM_88K","EM_960","EM_AARCH64","EM_ALPHA","EM_ARC","EM_ARC_A5","EM_ARM","EM_AVR","EM_COLDFIRE","EM_CRIS","EM_D10V","EM_D30V","EM_FAKE_ALPHA","EM_FIREPATH","EM_FR20","EM_FR30","EM_FX66","EM_H8S","EM_H8_300","EM_H8_300H","EM_H8_500","EM_HUANY","EM_IA_64","EM_JAVELIN","EM_M32","EM_M32R","EM_ME16","EM_MIPS","EM_MIPS_RS3_LE","EM_MIPS_X","EM_MMA","EM_MMIX","EM_MN10200","EM_MN10300","EM_NCPU","EM_NDR1","EM_NONE","EM_OPENRISC","EM_PARISC","EM_PCP","EM_PDSP","EM_PJ","EM_PPC","EM_PPC64","EM_PRISM","EM_RCE","EM_RH32","EM_S370","EM_S390","EM_SH","EM_SPARC","EM_SPARC32PLUS","EM_SPARCV9","EM_ST100","EM_ST19","EM_ST7","EM_ST9PLUS","EM_STARCORE","EM_SVX","EM_TILEGX","EM_TILEPRO","EM_TINYJ","EM_TRICORE","EM_V800","EM_V850","EM_VAX","EM_VPP500","EM_X86_64","EM_XTENSA","EM_ZSP","ENAMETOOLONG","ENAVAIL","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOANO","ENOATTR","ENOBUFS","ENOCSI","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOKEY","ENOLCK","ENOLINK","ENOMEDIUM","ENOMEM","ENOMSG","ENONET","ENOPKG","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTNAM","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENOTUNIQ","ENXIO","EOF","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPOLLERR","EPOLLET","EPOLLEXCLUSIVE","EPOLLHUP","EPOLLIN","EPOLLMSG","EPOLLONESHOT","EPOLLOUT","EPOLLPRI","EPOLLRDBAND","EPOLLRDHUP","EPOLLRDNORM","EPOLLWAKEUP","EPOLLWRBAND","EPOLLWRNORM","EPOLL_CLOEXEC","EPOLL_CTL_ADD","EPOLL_CTL_DEL","EPOLL_CTL_MOD","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","ERA","ERANGE","ERA_D_FMT","ERA_D_T_FMT","ERA_T_FMT","EREMCHG","EREMOTE","EREMOTEIO","ERESTART","ERFKILL","EROFS","ES","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESRMNT","ESTALE","ESTRPIPE","ETH_ALEN","ETH_DATA_LEN","ETH_FCS_LEN","ETH_FRAME_LEN","ETH_HLEN","ETH_P_1588","ETH_P_8021AD","ETH_P_8021AH","ETH_P_8021Q","ETH_P_80221","ETH_P_802_2","ETH_P_802_3","ETH_P_802_3_MIN","ETH_P_802_EX1","ETH_P_AARP","ETH_P_AF_IUCV","ETH_P_ALL","ETH_P_AOE","ETH_P_ARCNET","ETH_P_ARP","ETH_P_ATALK","ETH_P_ATMFATE","ETH_P_ATMMPOA","ETH_P_AX25","ETH_P_BATMAN","ETH_P_BPQ","ETH_P_CAIF","ETH_P_CANFD","ETH_P_CONTROL","ETH_P_CUST","ETH_P_DDCMP","ETH_P_DEC","ETH_P_DIAG","ETH_P_DNA_DL","ETH_P_DNA_RC","ETH_P_DNA_RT","ETH_P_DSA","ETH_P_ECONET","ETH_P_EDSA","ETH_P_FCOE","ETH_P_FIP","ETH_P_HDLC","ETH_P_IEEE802154","ETH_P_IEEEPUP","ETH_P_IEEEPUPAT","ETH_P_IP","ETH_P_IPV6","ETH_P_IPX","ETH_P_IRDA","ETH_P_LAT","ETH_P_LINK_CTL","ETH_P_LOCALTALK","ETH_P_LOOP","ETH_P_LOOPBACK","ETH_P_MACSEC","ETH_P_MOBITEX","ETH_P_MPLS_MC","ETH_P_MPLS_UC","ETH_P_MVRP","ETH_P_PAE","ETH_P_PAUSE","ETH_P_PHONET","ETH_P_PPPTALK","ETH_P_PPP_DISC","ETH_P_PPP_MP","ETH_P_PPP_SES","ETH_P_PRP","ETH_P_PUP","ETH_P_PUPAT","ETH_P_QINQ1","ETH_P_QINQ2","ETH_P_QINQ3","ETH_P_RARP","ETH_P_SCA","ETH_P_SLOW","ETH_P_SNAP","ETH_P_TDLS","ETH_P_TEB","ETH_P_TIPC","ETH_P_TRAILER","ETH_P_TR_802_2","ETH_P_WAN_PPP","ETH_P_WCCP","ETH_P_X25","ETH_ZLEN","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","ET_CORE","ET_DYN","ET_EXEC","ET_HIOS","ET_HIPROC","ET_LOOS","ET_LOPROC","ET_NONE","ET_NUM","ET_REL","EUCLEAN","EUNATCH","EUSERS","EV_CNT","EV_CURRENT","EV_MAX","EV_NONE","EV_NUM","EWOULDBLOCK","EXDEV","EXFULL","EXIT_FAILURE","EXIT_SUCCESS","EXT2_SUPER_MAGIC","EXT3_SUPER_MAGIC","EXT4_SUPER_MAGIC","EXTA","EXTB","EXTPROC","Elf32_Addr","Elf32_Chdr","Elf32_Ehdr","Elf32_Half","Elf32_Off","Elf32_Phdr","Elf32_Section","Elf32_Shdr","Elf32_Sym","Elf32_Word","Elf64_Addr","Elf64_Chdr","Elf64_Ehdr","Elf64_Half","Elf64_Off","Elf64_Phdr","Elf64_Section","Elf64_Shdr","Elf64_Sxword","Elf64_Sym","Elf64_Word","Elf64_Xword","F2FS_SUPER_MAGIC","FALLOC_FL_COLLAPSE_RANGE","FALLOC_FL_INSERT_RANGE","FALLOC_FL_KEEP_SIZE","FALLOC_FL_PUNCH_HOLE","FALLOC_FL_UNSHARE_RANGE","FALLOC_FL_ZERO_RANGE","FANOTIFY_METADATA_VERSION","FAN_ACCESS","FAN_ACCESS_PERM","FAN_ALLOW","FAN_ATTRIB","FAN_AUDIT","FAN_CLASS_CONTENT","FAN_CLASS_NOTIF","FAN_CLASS_PRE_CONTENT","FAN_CLOEXEC","FAN_CLOSE","FAN_CLOSE_NOWRITE","FAN_CLOSE_WRITE","FAN_CREATE","FAN_DELETE","FAN_DELETE_SELF","FAN_DENY","FAN_ENABLE_AUDIT","FAN_EPIDFD","FAN_EVENT_INFO_TYPE_DFID","FAN_EVENT_INFO_TYPE_DFID_NAME","FAN_EVENT_INFO_TYPE_ERROR","FAN_EVENT_INFO_TYPE_FID","FAN_EVENT_INFO_TYPE_NEW_DFID_NAME","FAN_EVENT_INFO_TYPE_OLD_DFID_NAME","FAN_EVENT_INFO_TYPE_PIDFD","FAN_EVENT_ON_CHILD","FAN_FS_ERROR","FAN_INFO","FAN_MARK_ADD","FAN_MARK_DONT_FOLLOW","FAN_MARK_EVICTABLE","FAN_MARK_FILESYSTEM","FAN_MARK_FLUSH","FAN_MARK_IGNORE","FAN_MARK_IGNORED_MASK","FAN_MARK_IGNORED_SURV_MODIFY","FAN_MARK_IGNORE_SURV","FAN_MARK_INODE","FAN_MARK_MOUNT","FAN_MARK_ONLYDIR","FAN_MARK_REMOVE","FAN_MODIFY","FAN_MOVE","FAN_MOVED_FROM","FAN_MOVED_TO","FAN_MOVE_SELF","FAN_NOFD","FAN_NONBLOCK","FAN_NOPIDFD","FAN_ONDIR","FAN_OPEN","FAN_OPEN_EXEC","FAN_OPEN_EXEC_PERM","FAN_OPEN_PERM","FAN_Q_OVERFLOW","FAN_RENAME","FAN_REPORT_DFID_NAME","FAN_REPORT_DFID_NAME_TARGET","FAN_REPORT_DIR_FID","FAN_REPORT_FID","FAN_REPORT_NAME","FAN_REPORT_PIDFD","FAN_REPORT_TARGET_FID","FAN_REPORT_TID","FAN_RESPONSE_INFO_AUDIT_RULE","FAN_RESPONSE_INFO_NONE","FAN_UNLIMITED_MARKS","FAN_UNLIMITED_QUEUE","FDPIC_FUNCPTRS","FD_CLOEXEC","FD_CLR","FD_ISSET","FD_SET","FD_SETSIZE","FD_ZERO","FF0","FF1","FFDLY","FF_CNT","FF_MAX","FICLONE","FICLONERANGE","FILE","FILENAME_MAX","FIOASYNC","FIOCLEX","FIONBIO","FIONCLEX","FIONREAD","FIOQSIZE","FLUSHO","FOPEN_MAX","FS","FS_BASE","FS_IOC32_GETFLAGS","FS_IOC32_GETVERSION","FS_IOC32_SETFLAGS","FS_IOC32_SETVERSION","FS_IOC_GETFLAGS","FS_IOC_GETVERSION","FS_IOC_SETFLAGS","FS_IOC_SETVERSION","FUSE_SUPER_MAGIC","FUTEXFS_SUPER_MAGIC","FUTEX_BITSET_MATCH_ANY","FUTEX_CLOCK_REALTIME","FUTEX_CMD_MASK","FUTEX_CMP_REQUEUE","FUTEX_CMP_REQUEUE_PI","FUTEX_FD","FUTEX_LOCK_PI","FUTEX_LOCK_PI2","FUTEX_OP","FUTEX_OP_ADD","FUTEX_OP_ANDN","FUTEX_OP_CMP_EQ","FUTEX_OP_CMP_GE","FUTEX_OP_CMP_GT","FUTEX_OP_CMP_LE","FUTEX_OP_CMP_LT","FUTEX_OP_CMP_NE","FUTEX_OP_OPARG_SHIFT","FUTEX_OP_OR","FUTEX_OP_SET","FUTEX_OP_XOR","FUTEX_PRIVATE_FLAG","FUTEX_REQUEUE","FUTEX_TRYLOCK_PI","FUTEX_UNLOCK_PI","FUTEX_WAIT","FUTEX_WAIT_BITSET","FUTEX_WAIT_REQUEUE_PI","FUTEX_WAKE","FUTEX_WAKE_BITSET","FUTEX_WAKE_OP","F_ADD_SEALS","F_CANCELLK","F_DUPFD","F_DUPFD_CLOEXEC","F_GETFD","F_GETFL","F_GETLEASE","F_GETLK","F_GETOWN","F_GETPIPE_SZ","F_GET_SEALS","F_LOCK","F_NOTIFY","F_OFD_GETLK","F_OFD_SETLK","F_OFD_SETLKW","F_OK","F_RDLCK","F_SEAL_FUTURE_WRITE","F_SEAL_GROW","F_SEAL_SEAL","F_SEAL_SHRINK","F_SEAL_WRITE","F_SETFD","F_SETFL","F_SETLEASE","F_SETLK","F_SETLKW","F_SETOWN","F_SETPIPE_SZ","F_TEST","F_TLOCK","F_ULOCK","F_UNLCK","F_WRLCK","GENL_ADMIN_PERM","GENL_CMD_CAP_DO","GENL_CMD_CAP_DUMP","GENL_CMD_CAP_HASPOL","GENL_ID_CTRL","GENL_ID_PMCRAID","GENL_ID_VFS_DQUOT","GENL_MAX_ID","GENL_MIN_ID","GENL_NAMSIZ","GENL_UNS_ADMIN_PERM","GLOB_ABORTED","GLOB_ALTDIRFUNC","GLOB_APPEND","GLOB_BRACE","GLOB_DOOFFS","GLOB_ERR","GLOB_MARK","GLOB_NOCHECK","GLOB_NOESCAPE","GLOB_NOMAGIC","GLOB_NOMATCH","GLOB_NOSORT","GLOB_NOSPACE","GLOB_ONLYDIR","GLOB_PERIOD","GLOB_TILDE","GLOB_TILDE_CHECK","GRND_INSECURE","GRND_NONBLOCK","GRND_RANDOM","GRPQUOTA","GS","GS_BASE","HOSTFS_SUPER_MAGIC","HPFS_SUPER_MAGIC","HUGETLBFS_MAGIC","HUGETLB_FLAG_ENCODE_16GB","HUGETLB_FLAG_ENCODE_16MB","HUGETLB_FLAG_ENCODE_1GB","HUGETLB_FLAG_ENCODE_1MB","HUGETLB_FLAG_ENCODE_256MB","HUGETLB_FLAG_ENCODE_2GB","HUGETLB_FLAG_ENCODE_2MB","HUGETLB_FLAG_ENCODE_32MB","HUGETLB_FLAG_ENCODE_512KB","HUGETLB_FLAG_ENCODE_512MB","HUGETLB_FLAG_ENCODE_64KB","HUGETLB_FLAG_ENCODE_8MB","HUGETLB_FLAG_ENCODE_MASK","HUGETLB_FLAG_ENCODE_SHIFT","HUPCL","HWTSTAMP_FILTER_ALL","HWTSTAMP_FILTER_NONE","HWTSTAMP_FILTER_NTP_ALL","HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ","HWTSTAMP_FILTER_PTP_V1_L4_EVENT","HWTSTAMP_FILTER_PTP_V1_L4_SYNC","HWTSTAMP_FILTER_PTP_V2_DELAY_REQ","HWTSTAMP_FILTER_PTP_V2_EVENT","HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ","HWTSTAMP_FILTER_PTP_V2_L2_EVENT","HWTSTAMP_FILTER_PTP_V2_L2_SYNC","HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ","HWTSTAMP_FILTER_PTP_V2_L4_EVENT","HWTSTAMP_FILTER_PTP_V2_L4_SYNC","HWTSTAMP_FILTER_PTP_V2_SYNC","HWTSTAMP_FILTER_SOME","HWTSTAMP_TX_OFF","HWTSTAMP_TX_ON","HWTSTAMP_TX_ONESTEP_P2P","HWTSTAMP_TX_ONESTEP_SYNC","IBSHIFT","ICANON","ICRNL","IEXTEN","IFA_ADDRESS","IFA_ANYCAST","IFA_BROADCAST","IFA_CACHEINFO","IFA_FLAGS","IFA_F_DADFAILED","IFA_F_DEPRECATED","IFA_F_HOMEADDRESS","IFA_F_MANAGETEMPADDR","IFA_F_MCAUTOJOIN","IFA_F_NODAD","IFA_F_NOPREFIXROUTE","IFA_F_OPTIMISTIC","IFA_F_PERMANENT","IFA_F_SECONDARY","IFA_F_STABLE_PRIVACY","IFA_F_TEMPORARY","IFA_F_TENTATIVE","IFA_LABEL","IFA_LOCAL","IFA_MULTICAST","IFA_UNSPEC","IFF_ALLMULTI","IFF_ATTACH_QUEUE","IFF_AUTOMEDIA","IFF_BROADCAST","IFF_DEBUG","IFF_DETACH_QUEUE","IFF_DORMANT","IFF_DYNAMIC","IFF_ECHO","IFF_LOOPBACK","IFF_LOWER_UP","IFF_MASTER","IFF_MULTICAST","IFF_MULTI_QUEUE","IFF_NAPI","IFF_NAPI_FRAGS","IFF_NOARP","IFF_NOFILTER","IFF_NOTRAILERS","IFF_NO_CARRIER","IFF_NO_PI","IFF_ONE_QUEUE","IFF_PERSIST","IFF_POINTOPOINT","IFF_PORTSEL","IFF_PROMISC","IFF_RUNNING","IFF_SLAVE","IFF_TAP","IFF_TUN","IFF_TUN_EXCL","IFF_UP","IFF_VNET_HDR","IFLA_ADDRESS","IFLA_AF_SPEC","IFLA_ALLMULTI","IFLA_ALT_IFNAME","IFLA_BROADCAST","IFLA_CARRIER","IFLA_CARRIER_CHANGES","IFLA_CARRIER_DOWN_COUNT","IFLA_CARRIER_UP_COUNT","IFLA_COST","IFLA_EVENT","IFLA_EXT_MASK","IFLA_GROUP","IFLA_GRO_MAX_SIZE","IFLA_GSO_MAX_SEGS","IFLA_GSO_MAX_SIZE","IFLA_IFALIAS","IFLA_IFNAME","IFLA_IF_NETNSID","IFLA_INFO_DATA","IFLA_INFO_KIND","IFLA_INFO_SLAVE_DATA","IFLA_INFO_SLAVE_KIND","IFLA_INFO_UNSPEC","IFLA_INFO_XSTATS","IFLA_LINK","IFLA_LINKINFO","IFLA_LINKMODE","IFLA_LINK_NETNSID","IFLA_MAP","IFLA_MASTER","IFLA_MAX_MTU","IFLA_MIN_MTU","IFLA_MTU","IFLA_NET_NS_FD","IFLA_NET_NS_PID","IFLA_NEW_IFINDEX","IFLA_NEW_NETNSID","IFLA_NUM_RX_QUEUES","IFLA_NUM_TX_QUEUES","IFLA_NUM_VF","IFLA_OPERSTATE","IFLA_PAD","IFLA_PARENT_DEV_BUS_NAME","IFLA_PARENT_DEV_NAME","IFLA_PERM_ADDRESS","IFLA_PHYS_PORT_ID","IFLA_PHYS_PORT_NAME","IFLA_PHYS_SWITCH_ID","IFLA_PORT_SELF","IFLA_PRIORITY","IFLA_PROMISCUITY","IFLA_PROP_LIST","IFLA_PROTINFO","IFLA_PROTO_DOWN","IFLA_PROTO_DOWN_REASON","IFLA_QDISC","IFLA_STATS","IFLA_STATS64","IFLA_TARGET_NETNSID","IFLA_TSO_MAX_SEGS","IFLA_TSO_MAX_SIZE","IFLA_TXQLEN","IFLA_UNSPEC","IFLA_VFINFO_LIST","IFLA_VF_PORTS","IFLA_WEIGHT","IFLA_WIRELESS","IFLA_XDP","IFNAMSIZ","IF_LINK_MODE_DEFAULT","IF_LINK_MODE_DORMANT","IF_LINK_MODE_TESTING","IF_NAMESIZE","IF_OPER_DORMANT","IF_OPER_DOWN","IF_OPER_LOWERLAYERDOWN","IF_OPER_NOTPRESENT","IF_OPER_TESTING","IF_OPER_UNKNOWN","IF_OPER_UP","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INADDR_ANY","INADDR_BROADCAST","INADDR_LOOPBACK","INADDR_NONE","INIT_PROCESS","INLCR","INOTIFY_MAX_QUEUED_EVENTS","INOTIFY_MAX_USER_INSTANCES","INOTIFY_MAX_USER_WATCHES","INPCK","INPUT_PROP_CNT","INPUT_PROP_MAX","INT_MAX","INT_MIN","IN_ACCESS","IN_ALL_EVENTS","IN_ATTRIB","IN_CLOEXEC","IN_CLOSE","IN_CLOSE_NOWRITE","IN_CLOSE_WRITE","IN_CREATE","IN_DELETE","IN_DELETE_SELF","IN_DONT_FOLLOW","IN_EXCL_UNLINK","IN_IGNORED","IN_ISDIR","IN_MASK_ADD","IN_MASK_CREATE","IN_MODIFY","IN_MOVE","IN_MOVED_FROM","IN_MOVED_TO","IN_MOVE_SELF","IN_NONBLOCK","IN_ONESHOT","IN_ONLYDIR","IN_OPEN","IN_Q_OVERFLOW","IN_UNMOUNT","IP6T_SO_ORIGINAL_DST","IPC_CREAT","IPC_EXCL","IPC_INFO","IPC_NOWAIT","IPC_PRIVATE","IPC_RMID","IPC_SET","IPC_STAT","IPDEFTTL","IPOPT_CLASS","IPOPT_CLASS_MASK","IPOPT_CONTROL","IPOPT_COPIED","IPOPT_COPY","IPOPT_END","IPOPT_EOL","IPOPT_LSRR","IPOPT_MEASUREMENT","IPOPT_MINOFF","IPOPT_NOOP","IPOPT_NOP","IPOPT_NUMBER","IPOPT_NUMBER_MASK","IPOPT_OFFSET","IPOPT_OLEN","IPOPT_OPTVAL","IPOPT_RA","IPOPT_RESERVED1","IPOPT_RESERVED2","IPOPT_RR","IPOPT_SEC","IPOPT_SID","IPOPT_SSRR","IPOPT_TIMESTAMP","IPOPT_TS","IPOPT_TS_PRESPEC","IPOPT_TS_TSANDADDR","IPOPT_TS_TSONLY","IPPROTO_AH","IPPROTO_BEETPH","IPPROTO_COMP","IPPROTO_DCCP","IPPROTO_DSTOPTS","IPPROTO_EGP","IPPROTO_ENCAP","IPPROTO_ESP","IPPROTO_ETHERNET","IPPROTO_FRAGMENT","IPPROTO_GRE","IPPROTO_HOPOPTS","IPPROTO_ICMP","IPPROTO_ICMPV6","IPPROTO_IDP","IPPROTO_IGMP","IPPROTO_IP","IPPROTO_IPIP","IPPROTO_IPV6","IPPROTO_MAX","IPPROTO_MH","IPPROTO_MPLS","IPPROTO_MPTCP","IPPROTO_MTP","IPPROTO_NONE","IPPROTO_PIM","IPPROTO_PUP","IPPROTO_RAW","IPPROTO_ROUTING","IPPROTO_RSVP","IPPROTO_SCTP","IPPROTO_TCP","IPPROTO_TP","IPPROTO_UDP","IPPROTO_UDPLITE","IPTOS_ECN","IPTOS_ECN_CE","IPTOS_ECN_ECT0","IPTOS_ECN_ECT1","IPTOS_ECN_MASK","IPTOS_ECN_NOT_ECT","IPTOS_LOWDELAY","IPTOS_MINCOST","IPTOS_PREC","IPTOS_PREC_CRITIC_ECP","IPTOS_PREC_FLASH","IPTOS_PREC_FLASHOVERRIDE","IPTOS_PREC_IMMEDIATE","IPTOS_PREC_INTERNETCONTROL","IPTOS_PREC_MASK","IPTOS_PREC_NETCONTROL","IPTOS_PREC_PRIORITY","IPTOS_PREC_ROUTINE","IPTOS_RELIABILITY","IPTOS_THROUGHPUT","IPTOS_TOS","IPTOS_TOS_MASK","IPV6_2292DSTOPTS","IPV6_2292HOPLIMIT","IPV6_2292HOPOPTS","IPV6_2292PKTINFO","IPV6_2292PKTOPTIONS","IPV6_2292RTHDR","IPV6_ADDRFORM","IPV6_ADDR_PREFERENCES","IPV6_ADD_MEMBERSHIP","IPV6_AUTHHDR","IPV6_AUTOFLOWLABEL","IPV6_CHECKSUM","IPV6_DONTFRAG","IPV6_DROP_MEMBERSHIP","IPV6_DSTOPTS","IPV6_FLOWINFO","IPV6_FLOWINFO_FLOWLABEL","IPV6_FLOWINFO_PRIORITY","IPV6_FLOWINFO_SEND","IPV6_FLOWLABEL_MGR","IPV6_FREEBIND","IPV6_HDRINCL","IPV6_HOPLIMIT","IPV6_HOPOPTS","IPV6_IPSEC_POLICY","IPV6_JOIN_ANYCAST","IPV6_LEAVE_ANYCAST","IPV6_MINHOPCOUNT","IPV6_MTU","IPV6_MTU_DISCOVER","IPV6_MULTICAST_ALL","IPV6_MULTICAST_HOPS","IPV6_MULTICAST_IF","IPV6_MULTICAST_LOOP","IPV6_NEXTHOP","IPV6_ORIGDSTADDR","IPV6_PATHMTU","IPV6_PKTINFO","IPV6_PMTUDISC_DO","IPV6_PMTUDISC_DONT","IPV6_PMTUDISC_INTERFACE","IPV6_PMTUDISC_OMIT","IPV6_PMTUDISC_PROBE","IPV6_PMTUDISC_WANT","IPV6_PREFER_SRC_CGA","IPV6_PREFER_SRC_COA","IPV6_PREFER_SRC_HOME","IPV6_PREFER_SRC_NONCGA","IPV6_PREFER_SRC_PUBLIC","IPV6_PREFER_SRC_PUBTMP_DEFAULT","IPV6_PREFER_SRC_TMP","IPV6_RECVDSTOPTS","IPV6_RECVERR","IPV6_RECVFRAGSIZE","IPV6_RECVHOPLIMIT","IPV6_RECVHOPOPTS","IPV6_RECVORIGDSTADDR","IPV6_RECVPATHMTU","IPV6_RECVPKTINFO","IPV6_RECVRTHDR","IPV6_RECVTCLASS","IPV6_ROUTER_ALERT","IPV6_ROUTER_ALERT_ISOLATE","IPV6_RTHDR","IPV6_RTHDRDSTOPTS","IPV6_RTHDR_LOOSE","IPV6_RTHDR_STRICT","IPV6_TCLASS","IPV6_TRANSPARENT","IPV6_UNICAST_HOPS","IPV6_UNICAST_IF","IPV6_V6ONLY","IPV6_XFRM_POLICY","IPVERSION","IP_ADD_MEMBERSHIP","IP_ADD_SOURCE_MEMBERSHIP","IP_BIND_ADDRESS_NO_PORT","IP_BLOCK_SOURCE","IP_CHECKSUM","IP_DEFAULT_MULTICAST_LOOP","IP_DEFAULT_MULTICAST_TTL","IP_DROP_MEMBERSHIP","IP_DROP_SOURCE_MEMBERSHIP","IP_FREEBIND","IP_HDRINCL","IP_IPSEC_POLICY","IP_MINTTL","IP_MSFILTER","IP_MTU","IP_MTU_DISCOVER","IP_MULTICAST_ALL","IP_MULTICAST_IF","IP_MULTICAST_LOOP","IP_MULTICAST_TTL","IP_NODEFRAG","IP_OPTIONS","IP_ORIGDSTADDR","IP_PASSSEC","IP_PKTINFO","IP_PKTOPTIONS","IP_PMTUDISC_DO","IP_PMTUDISC_DONT","IP_PMTUDISC_INTERFACE","IP_PMTUDISC_OMIT","IP_PMTUDISC_PROBE","IP_PMTUDISC_WANT","IP_RECVERR","IP_RECVFRAGSIZE","IP_RECVOPTS","IP_RECVORIGDSTADDR","IP_RECVTOS","IP_RECVTTL","IP_RETOPTS","IP_ROUTER_ALERT","IP_TOS","IP_TRANSPARENT","IP_TTL","IP_UNBLOCK_SOURCE","IP_UNICAST_IF","IP_XFRM_POLICY","ISIG","ISOFS_SUPER_MAGIC","ISTRIP","ITIMER_PROF","ITIMER_REAL","ITIMER_VIRTUAL","IUTF8","IWEVASSOCREQIE","IWEVASSOCRESPIE","IWEVCUSTOM","IWEVEXPIRED","IWEVFIRST","IWEVGENIE","IWEVMICHAELMICFAILURE","IWEVPMKIDCAND","IWEVQUAL","IWEVREGISTERED","IWEVTXDROP","IW_AUTH_80211_AUTH_ALG","IW_AUTH_ALG_LEAP","IW_AUTH_ALG_OPEN_SYSTEM","IW_AUTH_ALG_SHARED_KEY","IW_AUTH_CIPHER_AES_CMAC","IW_AUTH_CIPHER_CCMP","IW_AUTH_CIPHER_GROUP","IW_AUTH_CIPHER_GROUP_MGMT","IW_AUTH_CIPHER_NONE","IW_AUTH_CIPHER_PAIRWISE","IW_AUTH_CIPHER_TKIP","IW_AUTH_CIPHER_WEP104","IW_AUTH_CIPHER_WEP40","IW_AUTH_DROP_UNENCRYPTED","IW_AUTH_FLAGS","IW_AUTH_INDEX","IW_AUTH_KEY_MGMT","IW_AUTH_KEY_MGMT_802_1X","IW_AUTH_KEY_MGMT_PSK","IW_AUTH_MFP","IW_AUTH_MFP_DISABLED","IW_AUTH_MFP_OPTIONAL","IW_AUTH_MFP_REQUIRED","IW_AUTH_PRIVACY_INVOKED","IW_AUTH_ROAMING_CONTROL","IW_AUTH_ROAMING_DISABLE","IW_AUTH_ROAMING_ENABLE","IW_AUTH_RX_UNENCRYPTED_EAPOL","IW_AUTH_TKIP_COUNTERMEASURES","IW_AUTH_WPA_ENABLED","IW_AUTH_WPA_VERSION","IW_AUTH_WPA_VERSION_DISABLED","IW_AUTH_WPA_VERSION_WPA","IW_AUTH_WPA_VERSION_WPA2","IW_CUSTOM_MAX","IW_ENCODE_ALG_AES_CMAC","IW_ENCODE_ALG_CCMP","IW_ENCODE_ALG_NONE","IW_ENCODE_ALG_PMK","IW_ENCODE_ALG_TKIP","IW_ENCODE_ALG_WEP","IW_ENCODE_DISABLED","IW_ENCODE_ENABLED","IW_ENCODE_EXT_GROUP_KEY","IW_ENCODE_EXT_RX_SEQ_VALID","IW_ENCODE_EXT_SET_TX_KEY","IW_ENCODE_EXT_TX_SEQ_VALID","IW_ENCODE_FLAGS","IW_ENCODE_INDEX","IW_ENCODE_MODE","IW_ENCODE_NOKEY","IW_ENCODE_OPEN","IW_ENCODE_RESTRICTED","IW_ENCODE_SEQ_MAX_SIZE","IW_ENCODE_TEMP","IW_ENCODING_TOKEN_MAX","IW_ENC_CAPA_4WAY_HANDSHAKE","IW_ENC_CAPA_CIPHER_CCMP","IW_ENC_CAPA_CIPHER_TKIP","IW_ENC_CAPA_WPA","IW_ENC_CAPA_WPA2","IW_ESSID_MAX_SIZE","IW_EV_CHAR_PK_LEN","IW_EV_LCP_PK_LEN","IW_EV_POINT_PK_LEN","IW_FREQ_AUTO","IW_FREQ_FIXED","IW_GENERIC_IE_MAX","IW_MAX_AP","IW_MAX_BITRATES","IW_MAX_ENCODING_SIZES","IW_MAX_FREQUENCIES","IW_MAX_SPY","IW_MAX_TXPOWER","IW_MICFAILURE_COUNT","IW_MICFAILURE_GROUP","IW_MICFAILURE_KEY_ID","IW_MICFAILURE_PAIRWISE","IW_MICFAILURE_STAKEY","IW_MLME_ASSOC","IW_MLME_AUTH","IW_MLME_DEAUTH","IW_MLME_DISASSOC","IW_MODE_ADHOC","IW_MODE_AUTO","IW_MODE_INFRA","IW_MODE_MASTER","IW_MODE_MESH","IW_MODE_MONITOR","IW_MODE_REPEAT","IW_MODE_SECOND","IW_PMKID_CAND_PREAUTH","IW_PMKID_LEN","IW_PMKSA_ADD","IW_PMKSA_FLUSH","IW_PMKSA_REMOVE","IW_POWER_ALL_R","IW_POWER_FORCE_S","IW_POWER_MAX","IW_POWER_MIN","IW_POWER_MODE","IW_POWER_MODIFIER","IW_POWER_MULTICAST_R","IW_POWER_ON","IW_POWER_PERIOD","IW_POWER_RELATIVE","IW_POWER_REPEATER","IW_POWER_TIMEOUT","IW_POWER_TYPE","IW_POWER_UNICAST_R","IW_PRIV_SIZE_FIXED","IW_PRIV_SIZE_MASK","IW_PRIV_TYPE_ADDR","IW_PRIV_TYPE_BYTE","IW_PRIV_TYPE_CHAR","IW_PRIV_TYPE_FLOAT","IW_PRIV_TYPE_INT","IW_PRIV_TYPE_MASK","IW_PRIV_TYPE_NONE","IW_QUAL_ALL_INVALID","IW_QUAL_ALL_UPDATED","IW_QUAL_DBM","IW_QUAL_LEVEL_INVALID","IW_QUAL_LEVEL_UPDATED","IW_QUAL_NOISE_INVALID","IW_QUAL_NOISE_UPDATED","IW_QUAL_QUAL_INVALID","IW_QUAL_QUAL_UPDATED","IW_QUAL_RCPI","IW_RETRY_LIFETIME","IW_RETRY_LIMIT","IW_RETRY_LONG","IW_RETRY_MAX","IW_RETRY_MIN","IW_RETRY_MODIFIER","IW_RETRY_ON","IW_RETRY_RELATIVE","IW_RETRY_SHORT","IW_RETRY_TYPE","IW_SCAN_ALL_ESSID","IW_SCAN_ALL_FREQ","IW_SCAN_ALL_MODE","IW_SCAN_ALL_RATE","IW_SCAN_CAPA_BSSID","IW_SCAN_CAPA_CHANNEL","IW_SCAN_CAPA_ESSID","IW_SCAN_CAPA_MODE","IW_SCAN_CAPA_NONE","IW_SCAN_CAPA_RATE","IW_SCAN_CAPA_TIME","IW_SCAN_CAPA_TYPE","IW_SCAN_DEFAULT","IW_SCAN_MAX_DATA","IW_SCAN_THIS_ESSID","IW_SCAN_THIS_FREQ","IW_SCAN_THIS_MODE","IW_SCAN_THIS_RATE","IW_SCAN_TYPE_ACTIVE","IW_SCAN_TYPE_PASSIVE","IW_TXPOW_DBM","IW_TXPOW_MWATT","IW_TXPOW_RANGE","IW_TXPOW_RELATIVE","IW_TXPOW_TYPE","IXANY","IXOFF","IXON","J1939_EE_INFO_NONE","J1939_EE_INFO_RX_ABORT","J1939_EE_INFO_RX_DPO","J1939_EE_INFO_RX_RTS","J1939_EE_INFO_TX_ABORT","J1939_FILTER_MAX","J1939_IDLE_ADDR","J1939_MAX_UNICAST_ADDR","J1939_NLA_BYTES_ACKED","J1939_NLA_DEST_ADDR","J1939_NLA_DEST_NAME","J1939_NLA_PAD","J1939_NLA_PGN","J1939_NLA_SRC_ADDR","J1939_NLA_SRC_NAME","J1939_NLA_TOTAL_SIZE","J1939_NO_ADDR","J1939_NO_NAME","J1939_NO_PGN","J1939_PGN_ADDRESS_CLAIMED","J1939_PGN_ADDRESS_COMMANDED","J1939_PGN_MAX","J1939_PGN_PDU1_MAX","J1939_PGN_REQUEST","JFFS2_SUPER_MAGIC","KERNEL_VERSION","KERN_ACCT","KERN_ACPI_VIDEO_FLAGS","KERN_BOOTLOADER_TYPE","KERN_CADPID","KERN_COMPAT_LOG","KERN_CORE_PATTERN","KERN_CORE_USES_PID","KERN_CTLALTDEL","KERN_DOMAINNAME","KERN_HOTPLUG","KERN_HPPA_PWRSW","KERN_HPPA_UNALIGNED","KERN_HZ_TIMER","KERN_IA64_UNALIGNED","KERN_IEEE_EMULATION_WARNINGS","KERN_MAX_LOCK_DEPTH","KERN_MAX_THREADS","KERN_MODPROBE","KERN_MSGMAX","KERN_MSGMNB","KERN_MSGMNI","KERN_MSGPOOL","KERN_NAMETRANS","KERN_NGROUPS_MAX","KERN_NMI_WATCHDOG","KERN_NODENAME","KERN_OSRELEASE","KERN_OSREV","KERN_OSTYPE","KERN_OVERFLOWGID","KERN_OVERFLOWUID","KERN_PANIC","KERN_PANIC_ON_NMI","KERN_PANIC_ON_OOPS","KERN_PIDMAX","KERN_PPC_HTABRECLAIM","KERN_PPC_L2CR","KERN_PPC_POWERSAVE_NAP","KERN_PPC_ZEROPAGED","KERN_PRINTK","KERN_PRINTK_RATELIMIT","KERN_PRINTK_RATELIMIT_BURST","KERN_PROF","KERN_PTY","KERN_RANDOM","KERN_RANDOMIZE","KERN_REALROOTDEV","KERN_RTSIGMAX","KERN_RTSIGNR","KERN_S390_USER_DEBUG_LOGGING","KERN_SECUREMASK","KERN_SEM","KERN_SETUID_DUMPABLE","KERN_SG_BIG_BUFF","KERN_SHMALL","KERN_SHMMAX","KERN_SHMMNI","KERN_SHMPATH","KERN_SPARC_REBOOT","KERN_SPARC_SCONS_PWROFF","KERN_SPARC_STOP_A","KERN_SPIN_RETRY","KERN_SYSRQ","KERN_TAINTED","KERN_UNKNOWN_NMI_PANIC","KERN_VERSION","KEXEC_ARCH_MASK","KEXEC_FILE_NO_INITRAMFS","KEXEC_FILE_ON_CRASH","KEXEC_FILE_UNLOAD","KEXEC_ON_CRASH","KEXEC_PRESERVE_CONTEXT","KEYCTL_ASSUME_AUTHORITY","KEYCTL_CAPABILITIES","KEYCTL_CAPS0_BIG_KEY","KEYCTL_CAPS0_CAPABILITIES","KEYCTL_CAPS0_DIFFIE_HELLMAN","KEYCTL_CAPS0_INVALIDATE","KEYCTL_CAPS0_MOVE","KEYCTL_CAPS0_PERSISTENT_KEYRINGS","KEYCTL_CAPS0_PUBLIC_KEY","KEYCTL_CAPS0_RESTRICT_KEYRING","KEYCTL_CAPS1_NS_KEYRING_NAME","KEYCTL_CAPS1_NS_KEY_TAG","KEYCTL_CHOWN","KEYCTL_CLEAR","KEYCTL_DESCRIBE","KEYCTL_DH_COMPUTE","KEYCTL_GET_KEYRING_ID","KEYCTL_GET_PERSISTENT","KEYCTL_GET_SECURITY","KEYCTL_INSTANTIATE","KEYCTL_INSTANTIATE_IOV","KEYCTL_INVALIDATE","KEYCTL_JOIN_SESSION_KEYRING","KEYCTL_LINK","KEYCTL_MOVE","KEYCTL_NEGATE","KEYCTL_PKEY_DECRYPT","KEYCTL_PKEY_ENCRYPT","KEYCTL_PKEY_QUERY","KEYCTL_PKEY_SIGN","KEYCTL_PKEY_VERIFY","KEYCTL_READ","KEYCTL_REJECT","KEYCTL_RESTRICT_KEYRING","KEYCTL_REVOKE","KEYCTL_SEARCH","KEYCTL_SESSION_TO_PARENT","KEYCTL_SETPERM","KEYCTL_SET_REQKEY_KEYRING","KEYCTL_SET_TIMEOUT","KEYCTL_SUPPORTS_DECRYPT","KEYCTL_SUPPORTS_ENCRYPT","KEYCTL_SUPPORTS_SIGN","KEYCTL_SUPPORTS_VERIFY","KEYCTL_UNLINK","KEYCTL_UPDATE","KEY_CNT","KEY_MAX","KEY_REQKEY_DEFL_DEFAULT","KEY_REQKEY_DEFL_GROUP_KEYRING","KEY_REQKEY_DEFL_NO_CHANGE","KEY_REQKEY_DEFL_PROCESS_KEYRING","KEY_REQKEY_DEFL_REQUESTOR_KEYRING","KEY_REQKEY_DEFL_SESSION_KEYRING","KEY_REQKEY_DEFL_THREAD_KEYRING","KEY_REQKEY_DEFL_USER_KEYRING","KEY_REQKEY_DEFL_USER_SESSION_KEYRING","KEY_SPEC_GROUP_KEYRING","KEY_SPEC_PROCESS_KEYRING","KEY_SPEC_REQKEY_AUTH_KEY","KEY_SPEC_REQUESTOR_KEYRING","KEY_SPEC_SESSION_KEYRING","KEY_SPEC_THREAD_KEYRING","KEY_SPEC_USER_KEYRING","KEY_SPEC_USER_SESSION_KEYRING","LC_ADDRESS","LC_ADDRESS_MASK","LC_ALL","LC_ALL_MASK","LC_COLLATE","LC_COLLATE_MASK","LC_CTYPE","LC_CTYPE_MASK","LC_IDENTIFICATION","LC_IDENTIFICATION_MASK","LC_MEASUREMENT","LC_MEASUREMENT_MASK","LC_MESSAGES","LC_MESSAGES_MASK","LC_MONETARY","LC_MONETARY_MASK","LC_NAME","LC_NAME_MASK","LC_NUMERIC","LC_NUMERIC_MASK","LC_PAPER","LC_PAPER_MASK","LC_TELEPHONE","LC_TELEPHONE_MASK","LC_TIME","LC_TIME_MASK","LED_CNT","LED_MAX","LINUX_REBOOT_CMD_CAD_OFF","LINUX_REBOOT_CMD_CAD_ON","LINUX_REBOOT_CMD_HALT","LINUX_REBOOT_CMD_KEXEC","LINUX_REBOOT_CMD_POWER_OFF","LINUX_REBOOT_CMD_RESTART","LINUX_REBOOT_CMD_RESTART2","LINUX_REBOOT_CMD_SW_SUSPEND","LINUX_REBOOT_MAGIC1","LINUX_REBOOT_MAGIC2","LINUX_REBOOT_MAGIC2A","LINUX_REBOOT_MAGIC2B","LINUX_REBOOT_MAGIC2C","LIO_NOP","LIO_NOWAIT","LIO_READ","LIO_WAIT","LIO_WRITE","LM_ID_BASE","LM_ID_NEWLM","LOCK_EX","LOCK_NB","LOCK_SH","LOCK_UN","LOGIN_PROCESS","LOG_ALERT","LOG_AUTH","LOG_AUTHPRIV","LOG_CONS","LOG_CRIT","LOG_CRON","LOG_DAEMON","LOG_DEBUG","LOG_EMERG","LOG_ERR","LOG_FACMASK","LOG_FTP","LOG_INFO","LOG_KERN","LOG_LOCAL0","LOG_LOCAL1","LOG_LOCAL2","LOG_LOCAL3","LOG_LOCAL4","LOG_LOCAL5","LOG_LOCAL6","LOG_LOCAL7","LOG_LPR","LOG_MAIL","LOG_NDELAY","LOG_NEWS","LOG_NFACILITIES","LOG_NOTICE","LOG_NOWAIT","LOG_ODELAY","LOG_PERROR","LOG_PID","LOG_PRIMASK","LOG_SYSLOG","LOG_USER","LOG_UUCP","LOG_WARNING","L_tmpnam","Lmid_t","MADV_COLD","MADV_COLLAPSE","MADV_DODUMP","MADV_DOFORK","MADV_DONTDUMP","MADV_DONTFORK","MADV_DONTNEED","MADV_DONTNEED_LOCKED","MADV_FREE","MADV_HUGEPAGE","MADV_HWPOISON","MADV_KEEPONFORK","MADV_MERGEABLE","MADV_NOHUGEPAGE","MADV_NORMAL","MADV_PAGEOUT","MADV_POPULATE_READ","MADV_POPULATE_WRITE","MADV_RANDOM","MADV_REMOVE","MADV_SEQUENTIAL","MADV_SOFT_OFFLINE","MADV_UNMERGEABLE","MADV_WILLNEED","MADV_WIPEONFORK","MAP_32BIT","MAP_ANON","MAP_ANONYMOUS","MAP_DENYWRITE","MAP_EXECUTABLE","MAP_FAILED","MAP_FILE","MAP_FIXED","MAP_FIXED_NOREPLACE","MAP_GROWSDOWN","MAP_HUGETLB","MAP_HUGE_16GB","MAP_HUGE_16MB","MAP_HUGE_1GB","MAP_HUGE_1MB","MAP_HUGE_256MB","MAP_HUGE_2GB","MAP_HUGE_2MB","MAP_HUGE_32MB","MAP_HUGE_512KB","MAP_HUGE_512MB","MAP_HUGE_64KB","MAP_HUGE_8MB","MAP_HUGE_MASK","MAP_HUGE_SHIFT","MAP_LOCKED","MAP_NONBLOCK","MAP_NORESERVE","MAP_POPULATE","MAP_PRIVATE","MAP_SHARED","MAP_SHARED_VALIDATE","MAP_STACK","MAP_SYNC","MAP_TYPE","MAXTC","MAXTTL","MAX_ADDR_LEN","MAX_IPOPTLEN","MAX_LINKS","MCAST_BLOCK_SOURCE","MCAST_EXCLUDE","MCAST_INCLUDE","MCAST_JOIN_GROUP","MCAST_JOIN_SOURCE_GROUP","MCAST_LEAVE_GROUP","MCAST_LEAVE_SOURCE_GROUP","MCAST_MSFILTER","MCAST_UNBLOCK_SOURCE","MCL_CURRENT","MCL_FUTURE","MCL_ONFAULT","MEMBARRIER_CMD_GLOBAL","MEMBARRIER_CMD_GLOBAL_EXPEDITED","MEMBARRIER_CMD_PRIVATE_EXPEDITED","MEMBARRIER_CMD_PRIVATE_EXPEDITED_RSEQ","MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE","MEMBARRIER_CMD_QUERY","MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED","MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED","MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_RSEQ","MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE","MFD_ALLOW_SEALING","MFD_CLOEXEC","MFD_HUGETLB","MFD_HUGE_16GB","MFD_HUGE_16MB","MFD_HUGE_1GB","MFD_HUGE_1MB","MFD_HUGE_256MB","MFD_HUGE_2GB","MFD_HUGE_2MB","MFD_HUGE_32MB","MFD_HUGE_512KB","MFD_HUGE_512MB","MFD_HUGE_64KB","MFD_HUGE_8MB","MFD_HUGE_MASK","MFD_HUGE_SHIFT","MINIX2_SUPER_MAGIC","MINIX2_SUPER_MAGIC2","MINIX3_SUPER_MAGIC","MINIX_SUPER_MAGIC","MINIX_SUPER_MAGIC2","MINSIGSTKSZ","MLOCK_ONFAULT","MMAP_PAGE_ZERO","MNT_DETACH","MNT_EXPIRE","MNT_FORCE","MODULE_INIT_IGNORE_MODVERSIONS","MODULE_INIT_IGNORE_VERMAGIC","MOD_CLKA","MOD_CLKB","MOD_ESTERROR","MOD_FREQUENCY","MOD_MAXERROR","MOD_MICRO","MOD_NANO","MOD_OFFSET","MOD_STATUS","MOD_TAI","MOD_TIMECONST","MON_1","MON_10","MON_11","MON_12","MON_2","MON_3","MON_4","MON_5","MON_6","MON_7","MON_8","MON_9","MOVE_MOUNT_BENEATH","MOVE_MOUNT_F_AUTOMOUNTS","MOVE_MOUNT_F_EMPTY_PATH","MOVE_MOUNT_F_SYMLINKS","MOVE_MOUNT_SET_GROUP","MOVE_MOUNT_T_AUTOMOUNTS","MOVE_MOUNT_T_EMPTY_PATH","MOVE_MOUNT_T_SYMLINKS","MPOL_BIND","MPOL_DEFAULT","MPOL_F_NUMA_BALANCING","MPOL_F_RELATIVE_NODES","MPOL_F_STATIC_NODES","MPOL_INTERLEAVE","MPOL_LOCAL","MPOL_PREFERRED","MREMAP_DONTUNMAP","MREMAP_FIXED","MREMAP_MAYMOVE","MSC_CNT","MSC_MAX","MSDOS_SUPER_MAGIC","MSG_CMSG_CLOEXEC","MSG_CONFIRM","MSG_COPY","MSG_CTRUNC","MSG_DONTROUTE","MSG_DONTWAIT","MSG_EOR","MSG_ERRQUEUE","MSG_EXCEPT","MSG_FASTOPEN","MSG_FIN","MSG_INFO","MSG_MORE","MSG_NOERROR","MSG_NOSIGNAL","MSG_NOTIFICATION","MSG_OOB","MSG_PEEK","MSG_RST","MSG_STAT","MSG_SYN","MSG_TRUNC","MSG_TRYHARD","MSG_WAITALL","MSG_WAITFORONE","MSG_ZEROCOPY","MS_ACTIVE","MS_ASYNC","MS_BIND","MS_DIRSYNC","MS_INVALIDATE","MS_I_VERSION","MS_KERNMOUNT","MS_LAZYTIME","MS_MANDLOCK","MS_MGC_MSK","MS_MGC_VAL","MS_MOVE","MS_NOATIME","MS_NODEV","MS_NODIRATIME","MS_NOEXEC","MS_NOSUID","MS_NOUSER","MS_POSIXACL","MS_PRIVATE","MS_RDONLY","MS_REC","MS_RELATIME","MS_REMOUNT","MS_RMT_MASK","MS_SHARED","MS_SILENT","MS_SLAVE","MS_STRICTATIME","MS_SYNC","MS_SYNCHRONOUS","MS_UNBINDABLE","M_ARENA_MAX","M_ARENA_TEST","M_CHECK_ACTION","M_GRAIN","M_KEEP","M_MMAP_MAX","M_MMAP_THRESHOLD","M_MXFAST","M_NLBLKS","M_PERTURB","M_TOP_PAD","M_TRIM_THRESHOLD","NCCS","NCP_SUPER_MAGIC","NDA_CACHEINFO","NDA_DST","NDA_IFINDEX","NDA_LINK_NETNSID","NDA_LLADDR","NDA_MASTER","NDA_PORT","NDA_PROBES","NDA_SRC_VNI","NDA_UNSPEC","NDA_VLAN","NDA_VNI","NETLINK_ADD_MEMBERSHIP","NETLINK_AUDIT","NETLINK_BROADCAST_ERROR","NETLINK_CAP_ACK","NETLINK_CONNECTOR","NETLINK_CRYPTO","NETLINK_DNRTMSG","NETLINK_DROP_MEMBERSHIP","NETLINK_ECRYPTFS","NETLINK_EXT_ACK","NETLINK_FIB_LOOKUP","NETLINK_FIREWALL","NETLINK_GENERIC","NETLINK_GET_STRICT_CHK","NETLINK_INET_DIAG","NETLINK_IP6_FW","NETLINK_ISCSI","NETLINK_KOBJECT_UEVENT","NETLINK_LISTEN_ALL_NSID","NETLINK_LIST_MEMBERSHIPS","NETLINK_NETFILTER","NETLINK_NFLOG","NETLINK_NO_ENOBUFS","NETLINK_PKTINFO","NETLINK_RDMA","NETLINK_ROUTE","NETLINK_RX_RING","NETLINK_SCSITRANSPORT","NETLINK_SELINUX","NETLINK_SOCK_DIAG","NETLINK_TX_RING","NETLINK_UNUSED","NETLINK_USERSOCK","NETLINK_XFRM","NET_802","NET_ATALK","NET_AX25","NET_BRIDGE","NET_CORE","NET_DCCP","NET_DECNET","NET_ECONET","NET_ETHER","NET_IPV4","NET_IPV6","NET_IPX","NET_IRDA","NET_LLC","NET_NETFILTER","NET_NETROM","NET_ROSE","NET_SCTP","NET_TR","NET_UNIX","NET_X25","NEW_TIME","NFNETLINK_V0","NFNLGRP_ACCT_QUOTA","NFNLGRP_CONNTRACK_DESTROY","NFNLGRP_CONNTRACK_EXP_DESTROY","NFNLGRP_CONNTRACK_EXP_NEW","NFNLGRP_CONNTRACK_EXP_UPDATE","NFNLGRP_CONNTRACK_NEW","NFNLGRP_CONNTRACK_UPDATE","NFNLGRP_NFTABLES","NFNLGRP_NFTRACE","NFNLGRP_NONE","NFNL_BATCH_GENID","NFNL_BATCH_UNSPEC","NFNL_MSG_BATCH_BEGIN","NFNL_MSG_BATCH_END","NFNL_SUBSYS_ACCT","NFNL_SUBSYS_COUNT","NFNL_SUBSYS_CTHELPER","NFNL_SUBSYS_CTNETLINK","NFNL_SUBSYS_CTNETLINK_EXP","NFNL_SUBSYS_CTNETLINK_TIMEOUT","NFNL_SUBSYS_HOOK","NFNL_SUBSYS_IPSET","NFNL_SUBSYS_NFTABLES","NFNL_SUBSYS_NFT_COMPAT","NFNL_SUBSYS_NONE","NFNL_SUBSYS_OSF","NFNL_SUBSYS_QUEUE","NFNL_SUBSYS_ULOG","NFPROTO_ARP","NFPROTO_BRIDGE","NFPROTO_DECNET","NFPROTO_INET","NFPROTO_IPV4","NFPROTO_IPV6","NFPROTO_NETDEV","NFPROTO_NUMPROTO","NFPROTO_UNSPEC","NFQA_CAP_LEN","NFQA_CFG_CMD","NFQA_CFG_FLAGS","NFQA_CFG_F_CONNTRACK","NFQA_CFG_F_FAIL_OPEN","NFQA_CFG_F_GSO","NFQA_CFG_F_MAX","NFQA_CFG_F_SECCTX","NFQA_CFG_F_UID_GID","NFQA_CFG_MASK","NFQA_CFG_PARAMS","NFQA_CFG_QUEUE_MAXLEN","NFQA_CFG_UNSPEC","NFQA_CT","NFQA_CT_INFO","NFQA_EXP","NFQA_GID","NFQA_HWADDR","NFQA_IFINDEX_INDEV","NFQA_IFINDEX_OUTDEV","NFQA_IFINDEX_PHYSINDEV","NFQA_IFINDEX_PHYSOUTDEV","NFQA_L2HDR","NFQA_MARK","NFQA_PACKET_HDR","NFQA_PAYLOAD","NFQA_PRIORITY","NFQA_SECCTX","NFQA_SKB_CSUMNOTREADY","NFQA_SKB_CSUM_NOTVERIFIED","NFQA_SKB_GSO","NFQA_SKB_INFO","NFQA_TIMESTAMP","NFQA_UID","NFQA_UNSPEC","NFQA_VERDICT_HDR","NFQA_VLAN","NFQA_VLAN_PROTO","NFQA_VLAN_TCI","NFQA_VLAN_UNSPEC","NFQNL_CFG_CMD_BIND","NFQNL_CFG_CMD_NONE","NFQNL_CFG_CMD_PF_BIND","NFQNL_CFG_CMD_PF_UNBIND","NFQNL_CFG_CMD_UNBIND","NFQNL_COPY_META","NFQNL_COPY_NONE","NFQNL_COPY_PACKET","NFQNL_MSG_CONFIG","NFQNL_MSG_PACKET","NFQNL_MSG_VERDICT","NFQNL_MSG_VERDICT_BATCH","NFS_SUPER_MAGIC","NFT_BREAK","NFT_BYTEORDER_HTON","NFT_BYTEORDER_NTOH","NFT_CHAIN_MAXNAMELEN","NFT_CMP_EQ","NFT_CMP_GT","NFT_CMP_GTE","NFT_CMP_LT","NFT_CMP_LTE","NFT_CMP_NEQ","NFT_CONTINUE","NFT_CT_BYTES","NFT_CT_DIRECTION","NFT_CT_DST","NFT_CT_EXPIRATION","NFT_CT_HELPER","NFT_CT_L3PROTOCOL","NFT_CT_LABELS","NFT_CT_MARK","NFT_CT_PKTS","NFT_CT_PROTOCOL","NFT_CT_PROTO_DST","NFT_CT_PROTO_SRC","NFT_CT_SECMARK","NFT_CT_SRC","NFT_CT_STATE","NFT_CT_STATUS","NFT_DATA_RESERVED_MASK","NFT_DATA_VALUE","NFT_DATA_VALUE_MAXLEN","NFT_DATA_VERDICT","NFT_DYNSET_F_INV","NFT_DYNSET_OP_ADD","NFT_DYNSET_OP_UPDATE","NFT_GOTO","NFT_JUMP","NFT_LIMIT_F_INV","NFT_LIMIT_PKTS","NFT_LIMIT_PKT_BYTES","NFT_LOOKUP_F_INV","NFT_META_BRI_IIFNAME","NFT_META_BRI_OIFNAME","NFT_META_CGROUP","NFT_META_CPU","NFT_META_IIF","NFT_META_IIFGROUP","NFT_META_IIFNAME","NFT_META_IIFTYPE","NFT_META_L4PROTO","NFT_META_LEN","NFT_META_MARK","NFT_META_NFPROTO","NFT_META_NFTRACE","NFT_META_OIF","NFT_META_OIFGROUP","NFT_META_OIFNAME","NFT_META_OIFTYPE","NFT_META_PKTTYPE","NFT_META_PRANDOM","NFT_META_PRIORITY","NFT_META_PROTOCOL","NFT_META_RTCLASSID","NFT_META_SECMARK","NFT_META_SKGID","NFT_META_SKUID","NFT_MSG_DELCHAIN","NFT_MSG_DELOBJ","NFT_MSG_DELRULE","NFT_MSG_DELSET","NFT_MSG_DELSETELEM","NFT_MSG_DELTABLE","NFT_MSG_GETCHAIN","NFT_MSG_GETGEN","NFT_MSG_GETOBJ","NFT_MSG_GETOBJ_RESET","NFT_MSG_GETRULE","NFT_MSG_GETSET","NFT_MSG_GETSETELEM","NFT_MSG_GETTABLE","NFT_MSG_MAX","NFT_MSG_NEWCHAIN","NFT_MSG_NEWGEN","NFT_MSG_NEWOBJ","NFT_MSG_NEWRULE","NFT_MSG_NEWSET","NFT_MSG_NEWSETELEM","NFT_MSG_NEWTABLE","NFT_MSG_TRACE","NFT_NAT_DNAT","NFT_NAT_SNAT","NFT_NG_INCREMENTAL","NFT_NG_RANDOM","NFT_OBJ_MAXNAMELEN","NFT_PAYLOAD_CSUM_INET","NFT_PAYLOAD_CSUM_NONE","NFT_PAYLOAD_LL_HEADER","NFT_PAYLOAD_NETWORK_HEADER","NFT_PAYLOAD_TRANSPORT_HEADER","NFT_QUEUE_FLAG_BYPASS","NFT_QUEUE_FLAG_CPU_FANOUT","NFT_QUEUE_FLAG_MASK","NFT_QUOTA_F_INV","NFT_RANGE_EQ","NFT_RANGE_NEQ","NFT_REG32_00","NFT_REG32_01","NFT_REG32_02","NFT_REG32_03","NFT_REG32_04","NFT_REG32_05","NFT_REG32_06","NFT_REG32_07","NFT_REG32_08","NFT_REG32_09","NFT_REG32_10","NFT_REG32_11","NFT_REG32_12","NFT_REG32_13","NFT_REG32_14","NFT_REG32_15","NFT_REG32_SIZE","NFT_REG_1","NFT_REG_2","NFT_REG_3","NFT_REG_4","NFT_REG_SIZE","NFT_REG_VERDICT","NFT_REJECT_ICMPX_ADMIN_PROHIBITED","NFT_REJECT_ICMPX_HOST_UNREACH","NFT_REJECT_ICMPX_NO_ROUTE","NFT_REJECT_ICMPX_PORT_UNREACH","NFT_REJECT_ICMPX_UNREACH","NFT_REJECT_ICMP_UNREACH","NFT_REJECT_TCP_RST","NFT_RETURN","NFT_SET_ANONYMOUS","NFT_SET_CONSTANT","NFT_SET_ELEM_INTERVAL_END","NFT_SET_EVAL","NFT_SET_INTERVAL","NFT_SET_MAP","NFT_SET_MAXNAMELEN","NFT_SET_POL_MEMORY","NFT_SET_POL_PERFORMANCE","NFT_SET_TIMEOUT","NFT_TABLE_MAXNAMELEN","NFT_TRACETYPE_POLICY","NFT_TRACETYPE_RETURN","NFT_TRACETYPE_RULE","NFT_TRACETYPE_UNSPEC","NFT_USERDATA_MAXLEN","NFULA_CFG_CMD","NFULA_CFG_FLAGS","NFULA_CFG_MODE","NFULA_CFG_NLBUFSIZ","NFULA_CFG_QTHRESH","NFULA_CFG_TIMEOUT","NFULA_CFG_UNSPEC","NFULA_CT","NFULA_CT_INFO","NFULA_GID","NFULA_HWADDR","NFULA_HWHEADER","NFULA_HWLEN","NFULA_HWTYPE","NFULA_IFINDEX_INDEV","NFULA_IFINDEX_OUTDEV","NFULA_IFINDEX_PHYSINDEV","NFULA_IFINDEX_PHYSOUTDEV","NFULA_L2HDR","NFULA_MARK","NFULA_PACKET_HDR","NFULA_PAYLOAD","NFULA_PREFIX","NFULA_SEQ","NFULA_SEQ_GLOBAL","NFULA_TIMESTAMP","NFULA_UID","NFULA_UNSPEC","NFULA_VLAN","NFULA_VLAN_PROTO","NFULA_VLAN_TCI","NFULA_VLAN_UNSPEC","NFULNL_CFG_CMD_BIND","NFULNL_CFG_CMD_NONE","NFULNL_CFG_CMD_PF_BIND","NFULNL_CFG_CMD_PF_UNBIND","NFULNL_CFG_CMD_UNBIND","NFULNL_CFG_F_CONNTRACK","NFULNL_CFG_F_SEQ","NFULNL_CFG_F_SEQ_GLOBAL","NFULNL_COPY_META","NFULNL_COPY_NONE","NFULNL_COPY_PACKET","NFULNL_MSG_CONFIG","NFULNL_MSG_PACKET","NF_ACCEPT","NF_DROP","NF_INET_FORWARD","NF_INET_LOCAL_IN","NF_INET_LOCAL_OUT","NF_INET_NUMHOOKS","NF_INET_POST_ROUTING","NF_INET_PRE_ROUTING","NF_IP6_FORWARD","NF_IP6_LOCAL_IN","NF_IP6_LOCAL_OUT","NF_IP6_NUMHOOKS","NF_IP6_POST_ROUTING","NF_IP6_PRE_ROUTING","NF_IP6_PRI_CONNTRACK","NF_IP6_PRI_CONNTRACK_DEFRAG","NF_IP6_PRI_CONNTRACK_HELPER","NF_IP6_PRI_FILTER","NF_IP6_PRI_FIRST","NF_IP6_PRI_LAST","NF_IP6_PRI_MANGLE","NF_IP6_PRI_NAT_DST","NF_IP6_PRI_NAT_SRC","NF_IP6_PRI_RAW","NF_IP6_PRI_SECURITY","NF_IP6_PRI_SELINUX_FIRST","NF_IP6_PRI_SELINUX_LAST","NF_IP_FORWARD","NF_IP_LOCAL_IN","NF_IP_LOCAL_OUT","NF_IP_NUMHOOKS","NF_IP_POST_ROUTING","NF_IP_PRE_ROUTING","NF_IP_PRI_CONNTRACK","NF_IP_PRI_CONNTRACK_CONFIRM","NF_IP_PRI_CONNTRACK_DEFRAG","NF_IP_PRI_CONNTRACK_HELPER","NF_IP_PRI_FILTER","NF_IP_PRI_FIRST","NF_IP_PRI_LAST","NF_IP_PRI_MANGLE","NF_IP_PRI_NAT_DST","NF_IP_PRI_NAT_SRC","NF_IP_PRI_RAW","NF_IP_PRI_SECURITY","NF_IP_PRI_SELINUX_FIRST","NF_IP_PRI_SELINUX_LAST","NF_MAX_VERDICT","NF_NETDEV_INGRESS","NF_NETDEV_NUMHOOKS","NF_QUEUE","NF_REPEAT","NF_STOLEN","NF_STOP","NF_VERDICT_BITS","NF_VERDICT_FLAG_QUEUE_BYPASS","NF_VERDICT_MASK","NF_VERDICT_QBITS","NF_VERDICT_QMASK","NILFS_SUPER_MAGIC","NI_DGRAM","NI_IDN","NI_MAXHOST","NI_NAMEREQD","NI_NOFQDN","NI_NUMERICHOST","NI_NUMERICSERV","NL0","NL1","NLA_ALIGN","NLA_ALIGNTO","NLA_F_NESTED","NLA_F_NET_BYTEORDER","NLA_TYPE_MASK","NLDLY","NLMSG_DONE","NLMSG_ERROR","NLMSG_MIN_TYPE","NLMSG_NOOP","NLMSG_OVERRUN","NLM_F_ACK","NLM_F_APPEND","NLM_F_ATOMIC","NLM_F_CREATE","NLM_F_DUMP","NLM_F_DUMP_FILTERED","NLM_F_DUMP_INTR","NLM_F_ECHO","NLM_F_EXCL","NLM_F_MATCH","NLM_F_MULTI","NLM_F_REPLACE","NLM_F_REQUEST","NLM_F_ROOT","NOEXPR","NOFLSH","NOSTR","NSFS_MAGIC","NTF_EXT_LEARNED","NTF_MASTER","NTF_OFFLOADED","NTF_PROXY","NTF_ROUTER","NTF_SELF","NTF_USE","NTP_API","NT_ASRS","NT_AUXV","NT_FPREGSET","NT_GWINDOWS","NT_LWPSINFO","NT_LWPSTATUS","NT_PLATFORM","NT_PRCRED","NT_PRFPREG","NT_PRFPXREG","NT_PRPSINFO","NT_PRSTATUS","NT_PRXREG","NT_PSINFO","NT_PSTATUS","NT_TASKSTRUCT","NT_UTSNAME","NUD_DELAY","NUD_FAILED","NUD_INCOMPLETE","NUD_NOARP","NUD_NONE","NUD_PERMANENT","NUD_PROBE","NUD_REACHABLE","NUD_STALE","OCFS2_SUPER_MAGIC","OCRNL","OFDEL","OFILL","OLCUC","OLD_TIME","ONLCR","ONLRET","ONOCR","OPENPROM_SUPER_MAGIC","OPEN_TREE_CLOEXEC","OPEN_TREE_CLONE","OPOST","ORIG_RAX","OVERLAYFS_SUPER_MAGIC","O_ACCMODE","O_APPEND","O_ASYNC","O_CLOEXEC","O_CREAT","O_DIRECT","O_DIRECTORY","O_DSYNC","O_EXCL","O_FSYNC","O_LARGEFILE","O_NDELAY","O_NOATIME","O_NOCTTY","O_NOFOLLOW","O_NONBLOCK","O_PATH","O_RDONLY","O_RDWR","O_RSYNC","O_SYNC","O_TMPFILE","O_TRUNC","O_WRONLY","PACKET_ADD_MEMBERSHIP","PACKET_DROP_MEMBERSHIP","PACKET_MR_ALLMULTI","PACKET_MR_MULTICAST","PACKET_MR_PROMISC","PACKET_MR_UNICAST","PARENB","PARMRK","PARODD","PATH_MAX","PENDIN","PF_ALG","PF_APPLETALK","PF_ASH","PF_ATMPVC","PF_ATMSVC","PF_AX25","PF_BLUETOOTH","PF_BRIDGE","PF_CAIF","PF_CAN","PF_DECnet","PF_ECONET","PF_IB","PF_IEEE802154","PF_INET","PF_INET6","PF_IPX","PF_IRDA","PF_ISDN","PF_IUCV","PF_KEY","PF_LLC","PF_LOCAL","PF_MASKOS","PF_MASKPROC","PF_MPLS","PF_NETBEUI","PF_NETLINK","PF_NETROM","PF_NFC","PF_PACKET","PF_PHONET","PF_PPPOX","PF_R","PF_RDS","PF_ROSE","PF_ROUTE","PF_RXRPC","PF_SECURITY","PF_SNA","PF_TIPC","PF_UNIX","PF_UNSPEC","PF_VSOCK","PF_W","PF_WANPIPE","PF_X","PF_X25","PF_XDP","PIDFD_NONBLOCK","PIPE_BUF","PM_STR","POLLERR","POLLHUP","POLLIN","POLLNVAL","POLLOUT","POLLPRI","POLLRDBAND","POLLRDHUP","POLLRDNORM","POLLWRBAND","POLLWRNORM","POSIX_FADV_DONTNEED","POSIX_FADV_NOREUSE","POSIX_FADV_NORMAL","POSIX_FADV_RANDOM","POSIX_FADV_SEQUENTIAL","POSIX_FADV_WILLNEED","POSIX_MADV_DONTNEED","POSIX_MADV_NORMAL","POSIX_MADV_RANDOM","POSIX_MADV_SEQUENTIAL","POSIX_MADV_WILLNEED","POSIX_SPAWN_RESETIDS","POSIX_SPAWN_SETPGROUP","POSIX_SPAWN_SETSCHEDPARAM","POSIX_SPAWN_SETSCHEDULER","POSIX_SPAWN_SETSID","POSIX_SPAWN_SETSIGDEF","POSIX_SPAWN_SETSIGMASK","POSIX_SPAWN_USEVFORK","PRIO_MAX","PRIO_MIN","PRIO_PGRP","PRIO_PROCESS","PRIO_USER","PROC_SUPER_MAGIC","PROT_EXEC","PROT_GROWSDOWN","PROT_GROWSUP","PROT_NONE","PROT_READ","PROT_WRITE","PR_CAPBSET_DROP","PR_CAPBSET_READ","PR_CAP_AMBIENT","PR_CAP_AMBIENT_CLEAR_ALL","PR_CAP_AMBIENT_IS_SET","PR_CAP_AMBIENT_LOWER","PR_CAP_AMBIENT_RAISE","PR_ENDIAN_BIG","PR_ENDIAN_LITTLE","PR_ENDIAN_PPC_LITTLE","PR_FPEMU_NOPRINT","PR_FPEMU_SIGFPE","PR_FP_EXC_ASYNC","PR_FP_EXC_DISABLED","PR_FP_EXC_DIV","PR_FP_EXC_INV","PR_FP_EXC_NONRECOV","PR_FP_EXC_OVF","PR_FP_EXC_PRECISE","PR_FP_EXC_RES","PR_FP_EXC_SW_ENABLE","PR_FP_EXC_UND","PR_FP_MODE_FR","PR_FP_MODE_FRE","PR_GET_CHILD_SUBREAPER","PR_GET_DUMPABLE","PR_GET_ENDIAN","PR_GET_FPEMU","PR_GET_FPEXC","PR_GET_FP_MODE","PR_GET_KEEPCAPS","PR_GET_NAME","PR_GET_NO_NEW_PRIVS","PR_GET_PDEATHSIG","PR_GET_SECCOMP","PR_GET_SECUREBITS","PR_GET_SPECULATION_CTRL","PR_GET_THP_DISABLE","PR_GET_TID_ADDRESS","PR_GET_TIMERSLACK","PR_GET_TIMING","PR_GET_TSC","PR_GET_UNALIGN","PR_MCE_KILL","PR_MCE_KILL_CLEAR","PR_MCE_KILL_DEFAULT","PR_MCE_KILL_EARLY","PR_MCE_KILL_GET","PR_MCE_KILL_LATE","PR_MCE_KILL_SET","PR_MPX_DISABLE_MANAGEMENT","PR_MPX_ENABLE_MANAGEMENT","PR_SCHED_CORE","PR_SCHED_CORE_CREATE","PR_SCHED_CORE_GET","PR_SCHED_CORE_MAX","PR_SCHED_CORE_SCOPE_PROCESS_GROUP","PR_SCHED_CORE_SCOPE_THREAD","PR_SCHED_CORE_SCOPE_THREAD_GROUP","PR_SCHED_CORE_SHARE_FROM","PR_SCHED_CORE_SHARE_TO","PR_SET_CHILD_SUBREAPER","PR_SET_DUMPABLE","PR_SET_ENDIAN","PR_SET_FPEMU","PR_SET_FPEXC","PR_SET_FP_MODE","PR_SET_KEEPCAPS","PR_SET_MM","PR_SET_MM_ARG_END","PR_SET_MM_ARG_START","PR_SET_MM_AUXV","PR_SET_MM_BRK","PR_SET_MM_END_CODE","PR_SET_MM_END_DATA","PR_SET_MM_ENV_END","PR_SET_MM_ENV_START","PR_SET_MM_EXE_FILE","PR_SET_MM_MAP","PR_SET_MM_MAP_SIZE","PR_SET_MM_START_BRK","PR_SET_MM_START_CODE","PR_SET_MM_START_DATA","PR_SET_MM_START_STACK","PR_SET_NAME","PR_SET_NO_NEW_PRIVS","PR_SET_PDEATHSIG","PR_SET_PTRACER","PR_SET_PTRACER_ANY","PR_SET_SECCOMP","PR_SET_SECUREBITS","PR_SET_SPECULATION_CTRL","PR_SET_THP_DISABLE","PR_SET_TIMERSLACK","PR_SET_TIMING","PR_SET_TSC","PR_SET_UNALIGN","PR_SET_VMA","PR_SET_VMA_ANON_NAME","PR_SPEC_DISABLE","PR_SPEC_DISABLE_NOEXEC","PR_SPEC_ENABLE","PR_SPEC_FORCE_DISABLE","PR_SPEC_INDIRECT_BRANCH","PR_SPEC_NOT_AFFECTED","PR_SPEC_PRCTL","PR_SPEC_STORE_BYPASS","PR_TASK_PERF_EVENTS_DISABLE","PR_TASK_PERF_EVENTS_ENABLE","PR_TIMING_STATISTICAL","PR_TIMING_TIMESTAMP","PR_TSC_ENABLE","PR_TSC_SIGSEGV","PR_UNALIGN_NOPRINT","PR_UNALIGN_SIGBUS","PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","PTHREAD_COND_INITIALIZER","PTHREAD_CREATE_DETACHED","PTHREAD_CREATE_JOINABLE","PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","PTHREAD_EXPLICIT_SCHED","PTHREAD_INHERIT_SCHED","PTHREAD_MUTEX_ADAPTIVE_NP","PTHREAD_MUTEX_DEFAULT","PTHREAD_MUTEX_ERRORCHECK","PTHREAD_MUTEX_INITIALIZER","PTHREAD_MUTEX_NORMAL","PTHREAD_MUTEX_RECURSIVE","PTHREAD_MUTEX_ROBUST","PTHREAD_MUTEX_STALLED","PTHREAD_ONCE_INIT","PTHREAD_PRIO_INHERIT","PTHREAD_PRIO_NONE","PTHREAD_PRIO_PROTECT","PTHREAD_PROCESS_PRIVATE","PTHREAD_PROCESS_SHARED","PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","PTHREAD_RWLOCK_INITIALIZER","PTHREAD_STACK_MIN","PTRACE_ATTACH","PTRACE_CONT","PTRACE_DETACH","PTRACE_EVENT_CLONE","PTRACE_EVENT_EXEC","PTRACE_EVENT_EXIT","PTRACE_EVENT_FORK","PTRACE_EVENT_SECCOMP","PTRACE_EVENT_STOP","PTRACE_EVENT_VFORK","PTRACE_EVENT_VFORK_DONE","PTRACE_GETEVENTMSG","PTRACE_GETFPREGS","PTRACE_GETFPXREGS","PTRACE_GETREGS","PTRACE_GETREGSET","PTRACE_GETSIGINFO","PTRACE_GETSIGMASK","PTRACE_GET_RSEQ_CONFIGURATION","PTRACE_GET_SYSCALL_INFO","PTRACE_INTERRUPT","PTRACE_KILL","PTRACE_LISTEN","PTRACE_O_EXITKILL","PTRACE_O_MASK","PTRACE_O_SUSPEND_SECCOMP","PTRACE_O_TRACECLONE","PTRACE_O_TRACEEXEC","PTRACE_O_TRACEEXIT","PTRACE_O_TRACEFORK","PTRACE_O_TRACESECCOMP","PTRACE_O_TRACESYSGOOD","PTRACE_O_TRACEVFORK","PTRACE_O_TRACEVFORKDONE","PTRACE_PEEKDATA","PTRACE_PEEKSIGINFO","PTRACE_PEEKSIGINFO_SHARED","PTRACE_PEEKTEXT","PTRACE_PEEKUSER","PTRACE_POKEDATA","PTRACE_POKETEXT","PTRACE_POKEUSER","PTRACE_SEIZE","PTRACE_SETFPREGS","PTRACE_SETFPXREGS","PTRACE_SETOPTIONS","PTRACE_SETREGS","PTRACE_SETREGSET","PTRACE_SETSIGINFO","PTRACE_SETSIGMASK","PTRACE_SINGLESTEP","PTRACE_SYSCALL","PTRACE_SYSCALL_INFO_ENTRY","PTRACE_SYSCALL_INFO_EXIT","PTRACE_SYSCALL_INFO_NONE","PTRACE_SYSCALL_INFO_SECCOMP","PTRACE_SYSEMU","PTRACE_SYSEMU_SINGLESTEP","PTRACE_TRACEME","PT_DYNAMIC","PT_GNU_EH_FRAME","PT_GNU_RELRO","PT_GNU_STACK","PT_HIOS","PT_HIPROC","PT_HISUNW","PT_INTERP","PT_LOAD","PT_LOOS","PT_LOPROC","PT_LOSUNW","PT_NOTE","PT_NULL","PT_NUM","PT_PHDR","PT_SHLIB","PT_SUNWBSS","PT_SUNWSTACK","PT_TLS","P_ALL","P_PGID","P_PID","P_PIDFD","QCMD","QFMT_VFS_OLD","QFMT_VFS_V0","QFMT_VFS_V1","QIF_ALL","QIF_BLIMITS","QIF_BTIME","QIF_ILIMITS","QIF_INODES","QIF_ITIME","QIF_LIMITS","QIF_SPACE","QIF_TIMES","QIF_USAGE","QNX4_SUPER_MAGIC","QNX6_SUPER_MAGIC","Q_GETFMT","Q_GETINFO","Q_GETQUOTA","Q_QUOTAOFF","Q_QUOTAON","Q_SETINFO","Q_SETQUOTA","Q_SYNC","R10","R11","R12","R13","R14","R15","R8","R9","RADIXCHAR","RAND_MAX","RAX","RBP","RBX","RB_AUTOBOOT","RB_DISABLE_CAD","RB_ENABLE_CAD","RB_HALT_SYSTEM","RB_KEXEC","RB_POWER_OFF","RB_SW_SUSPEND","RCX","RDI","RDTGROUP_SUPER_MAGIC","RDX","READ_IMPLIES_EXEC","REG_BADBR","REG_BADPAT","REG_BADRPT","REG_CR2","REG_CSGSFS","REG_EBRACE","REG_EBRACK","REG_ECOLLATE","REG_ECTYPE","REG_EEND","REG_EESCAPE","REG_EFL","REG_ENOSYS","REG_EPAREN","REG_ERANGE","REG_ERPAREN","REG_ERR","REG_ESIZE","REG_ESPACE","REG_ESUBREG","REG_EXTENDED","REG_ICASE","REG_NEWLINE","REG_NOMATCH","REG_NOSUB","REG_NOTBOL","REG_NOTEOL","REG_OLDMASK","REG_R10","REG_R11","REG_R12","REG_R13","REG_R14","REG_R15","REG_R8","REG_R9","REG_RAX","REG_RBP","REG_RBX","REG_RCX","REG_RDI","REG_RDX","REG_RIP","REG_RSI","REG_RSP","REG_STARTEND","REG_TRAPNO","REISERFS_SUPER_MAGIC","REL_CNT","REL_MAX","RENAME_EXCHANGE","RENAME_NOREPLACE","RENAME_WHITEOUT","REP_CNT","REP_MAX","RESOLVE_BENEATH","RESOLVE_CACHED","RESOLVE_IN_ROOT","RESOLVE_NO_MAGICLINKS","RESOLVE_NO_SYMLINKS","RESOLVE_NO_XDEV","RIP","RLIM64_INFINITY","RLIMIT_AS","RLIMIT_CORE","RLIMIT_CPU","RLIMIT_DATA","RLIMIT_FSIZE","RLIMIT_LOCKS","RLIMIT_MEMLOCK","RLIMIT_MSGQUEUE","RLIMIT_NICE","RLIMIT_NLIMITS","RLIMIT_NOFILE","RLIMIT_NPROC","RLIMIT_RSS","RLIMIT_RTPRIO","RLIMIT_RTTIME","RLIMIT_SIGPENDING","RLIMIT_STACK","RLIM_INFINITY","RLIM_NLIMITS","RLIM_SAVED_CUR","RLIM_SAVED_MAX","RSI","RSP","RTA_CACHEINFO","RTA_DST","RTA_ENCAP","RTA_ENCAP_TYPE","RTA_EXPIRES","RTA_FLOW","RTA_GATEWAY","RTA_IIF","RTA_MARK","RTA_METRICS","RTA_MFC_STATS","RTA_MP_ALGO","RTA_MULTIPATH","RTA_NEWDST","RTA_OIF","RTA_PAD","RTA_PREF","RTA_PREFSRC","RTA_PRIORITY","RTA_PROTOINFO","RTA_SESSION","RTA_SRC","RTA_TABLE","RTA_TTL_PROPAGATE","RTA_UID","RTA_UNSPEC","RTA_VIA","RTCF_DIRECTSRC","RTCF_DOREDIRECT","RTCF_LOG","RTCF_MASQ","RTCF_NAT","RTCF_VALVE","RTEXT_FILTER_BRVLAN","RTEXT_FILTER_BRVLAN_COMPRESSED","RTEXT_FILTER_CFM_CONFIG","RTEXT_FILTER_CFM_STATUS","RTEXT_FILTER_MRP","RTEXT_FILTER_SKIP_STATS","RTEXT_FILTER_VF","RTF_ADDRCLASSMASK","RTF_ADDRCONF","RTF_ALLONLINK","RTF_BROADCAST","RTF_CACHE","RTF_DEFAULT","RTF_DYNAMIC","RTF_FLOW","RTF_GATEWAY","RTF_HOST","RTF_INTERFACE","RTF_IRTT","RTF_LINKRT","RTF_LOCAL","RTF_MODIFIED","RTF_MSS","RTF_MTU","RTF_MULTICAST","RTF_NAT","RTF_NOFORWARD","RTF_NONEXTHOP","RTF_NOPMTUDISC","RTF_POLICY","RTF_REINSTATE","RTF_REJECT","RTF_STATIC","RTF_THROW","RTF_UP","RTF_WINDOW","RTF_XRESOLVE","RTLD_DEEPBIND","RTLD_DEFAULT","RTLD_DI_CONFIGADDR","RTLD_DI_LINKMAP","RTLD_DI_LMID","RTLD_DI_ORIGIN","RTLD_DI_PROFILENAME","RTLD_DI_PROFILEOUT","RTLD_DI_SERINFO","RTLD_DI_SERINFOSIZE","RTLD_DI_TLS_DATA","RTLD_DI_TLS_MODID","RTLD_GLOBAL","RTLD_LAZY","RTLD_LOCAL","RTLD_NEXT","RTLD_NODELETE","RTLD_NOLOAD","RTLD_NOW","RTMGRP_DECnet_IFADDR","RTMGRP_DECnet_ROUTE","RTMGRP_IPV4_IFADDR","RTMGRP_IPV4_MROUTE","RTMGRP_IPV4_ROUTE","RTMGRP_IPV4_RULE","RTMGRP_IPV6_IFADDR","RTMGRP_IPV6_IFINFO","RTMGRP_IPV6_MROUTE","RTMGRP_IPV6_PREFIX","RTMGRP_IPV6_ROUTE","RTMGRP_LINK","RTMGRP_NEIGH","RTMGRP_NOTIFY","RTMGRP_TC","RTMSG_AR_FAILED","RTMSG_CONTROL","RTMSG_DELDEVICE","RTMSG_DELROUTE","RTMSG_DELRULE","RTMSG_NEWDEVICE","RTMSG_NEWROUTE","RTMSG_NEWRULE","RTMSG_OVERRUN","RTM_DELACTION","RTM_DELADDR","RTM_DELADDRLABEL","RTM_DELLINK","RTM_DELMDB","RTM_DELNEIGH","RTM_DELNETCONF","RTM_DELNSID","RTM_DELQDISC","RTM_DELROUTE","RTM_DELRULE","RTM_DELTCLASS","RTM_DELTFILTER","RTM_F_CLONED","RTM_F_EQUALIZE","RTM_F_FIB_MATCH","RTM_F_LOOKUP_TABLE","RTM_F_NOTIFY","RTM_F_PREFIX","RTM_GETACTION","RTM_GETADDR","RTM_GETADDRLABEL","RTM_GETANYCAST","RTM_GETDCB","RTM_GETLINK","RTM_GETMDB","RTM_GETMULTICAST","RTM_GETNEIGH","RTM_GETNEIGHTBL","RTM_GETNETCONF","RTM_GETNSID","RTM_GETQDISC","RTM_GETROUTE","RTM_GETRULE","RTM_GETSTATS","RTM_GETTCLASS","RTM_GETTFILTER","RTM_NEWACTION","RTM_NEWADDR","RTM_NEWADDRLABEL","RTM_NEWCACHEREPORT","RTM_NEWLINK","RTM_NEWMDB","RTM_NEWNDUSEROPT","RTM_NEWNEIGH","RTM_NEWNEIGHTBL","RTM_NEWNETCONF","RTM_NEWNSID","RTM_NEWPREFIX","RTM_NEWQDISC","RTM_NEWROUTE","RTM_NEWRULE","RTM_NEWSTATS","RTM_NEWTCLASS","RTM_NEWTFILTER","RTM_SETDCB","RTM_SETLINK","RTM_SETNEIGHTBL","RTNLGRP_BRVLAN","RTNLGRP_DCB","RTNLGRP_DECnet_IFADDR","RTNLGRP_DECnet_ROUTE","RTNLGRP_DECnet_RULE","RTNLGRP_IPV4_IFADDR","RTNLGRP_IPV4_MROUTE","RTNLGRP_IPV4_MROUTE_R","RTNLGRP_IPV4_NETCONF","RTNLGRP_IPV4_ROUTE","RTNLGRP_IPV4_RULE","RTNLGRP_IPV6_IFADDR","RTNLGRP_IPV6_IFINFO","RTNLGRP_IPV6_MROUTE","RTNLGRP_IPV6_MROUTE_R","RTNLGRP_IPV6_NETCONF","RTNLGRP_IPV6_PREFIX","RTNLGRP_IPV6_ROUTE","RTNLGRP_IPV6_RULE","RTNLGRP_LINK","RTNLGRP_MCTP_IFADDR","RTNLGRP_MDB","RTNLGRP_MPLS_NETCONF","RTNLGRP_MPLS_ROUTE","RTNLGRP_ND_USEROPT","RTNLGRP_NEIGH","RTNLGRP_NEXTHOP","RTNLGRP_NONE","RTNLGRP_NOP2","RTNLGRP_NOP4","RTNLGRP_NOTIFY","RTNLGRP_NSID","RTNLGRP_PHONET_IFADDR","RTNLGRP_PHONET_ROUTE","RTNLGRP_STATS","RTNLGRP_TC","RTNLGRP_TUNNEL","RTN_ANYCAST","RTN_BLACKHOLE","RTN_BROADCAST","RTN_LOCAL","RTN_MULTICAST","RTN_NAT","RTN_PROHIBIT","RTN_THROW","RTN_UNICAST","RTN_UNREACHABLE","RTN_UNSPEC","RTN_XRESOLVE","RTPROT_BOOT","RTPROT_KERNEL","RTPROT_REDIRECT","RTPROT_STATIC","RTPROT_UNSPEC","RT_ADDRCLASS","RT_CLASS_DEFAULT","RT_CLASS_LOCAL","RT_CLASS_MAIN","RT_CLASS_MAX","RT_CLASS_UNSPEC","RT_LOCALADDR","RT_SCOPE_HOST","RT_SCOPE_LINK","RT_SCOPE_NOWHERE","RT_SCOPE_SITE","RT_SCOPE_UNIVERSE","RT_TABLE_COMPAT","RT_TABLE_DEFAULT","RT_TABLE_LOCAL","RT_TABLE_MAIN","RT_TABLE_UNSPEC","RT_TOS","RUN_LVL","RUSAGE_CHILDREN","RUSAGE_SELF","RUSAGE_THREAD","RWF_APPEND","RWF_DSYNC","RWF_HIPRI","RWF_NOWAIT","RWF_SYNC","R_OK","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_SIGINFO","SCHED_BATCH","SCHED_FIFO","SCHED_IDLE","SCHED_OTHER","SCHED_RESET_ON_FORK","SCHED_RR","SCM_CREDENTIALS","SCM_J1939_DEST_ADDR","SCM_J1939_DEST_NAME","SCM_J1939_ERRQUEUE","SCM_J1939_PRIO","SCM_RIGHTS","SCM_TIMESTAMP","SCM_TIMESTAMPING","SCM_TIMESTAMPING_OPT_STATS","SCM_TIMESTAMPING_PKTINFO","SCM_TIMESTAMPNS","SCM_TXTIME","SCM_WIFI_STATUS","SCTP_ABORT","SCTP_ADAPTATION_LAYER","SCTP_ADDR_OVER","SCTP_ALL_ASSOC","SCTP_ASSOCINFO","SCTP_AUTHINFO","SCTP_AUTH_ACTIVE_KEY","SCTP_AUTH_CHUNK","SCTP_AUTH_DEACTIVATE_KEY","SCTP_AUTH_DELETE_KEY","SCTP_AUTH_KEY","SCTP_AUTOCLOSE","SCTP_AUTO_ASCONF","SCTP_CONTEXT","SCTP_CURRENT_ASSOC","SCTP_DEFAULT_SEND_PARAM","SCTP_DEFAULT_SNDINFO","SCTP_DELAYED_ACK","SCTP_DELAYED_ACK_TIME","SCTP_DELAYED_SACK","SCTP_DISABLE_FRAGMENTS","SCTP_DSTADDRV4","SCTP_DSTADDRV6","SCTP_ENABLE_CHANGE_ASSOC_REQ","SCTP_ENABLE_RESET_ASSOC_REQ","SCTP_ENABLE_RESET_STREAM_REQ","SCTP_ENABLE_STRRESET_MASK","SCTP_EOF","SCTP_EVENTS","SCTP_FRAGMENT_INTERLEAVE","SCTP_FUTURE_ASSOC","SCTP_GET_ASSOC_ID_LIST","SCTP_GET_ASSOC_NUMBER","SCTP_GET_PEER_ADDR_INFO","SCTP_HMAC_IDENT","SCTP_INIT","SCTP_INITMSG","SCTP_I_WANT_MAPPED_V4_ADDR","SCTP_LOCAL_AUTH_CHUNKS","SCTP_MAXSEG","SCTP_MAX_BURST","SCTP_NODELAY","SCTP_NOTIFICATION","SCTP_NXTINFO","SCTP_PARTIAL_DELIVERY_POINT","SCTP_PEER_ADDR_PARAMS","SCTP_PEER_ADDR_THLDS","SCTP_PEER_ADDR_THLDS_V2","SCTP_PEER_AUTH_CHUNKS","SCTP_PRIMARY_ADDR","SCTP_PRINFO","SCTP_PR_INDEX","SCTP_PR_POLICY","SCTP_PR_PRIO_ENABLED","SCTP_PR_RTX_ENABLED","SCTP_PR_SCTP_ALL","SCTP_PR_SCTP_MASK","SCTP_PR_SCTP_MAX","SCTP_PR_SCTP_NONE","SCTP_PR_SCTP_PRIO","SCTP_PR_SCTP_RTX","SCTP_PR_SCTP_TTL","SCTP_PR_SET_POLICY","SCTP_PR_TTL_ENABLED","SCTP_RCVINFO","SCTP_RECVNXTINFO","SCTP_RECVRCVINFO","SCTP_REUSE_PORT","SCTP_RTOINFO","SCTP_SACK_IMMEDIATELY","SCTP_SENDALL","SCTP_SET_PEER_PRIMARY_ADDR","SCTP_SNDINFO","SCTP_SNDRCV","SCTP_STATUS","SCTP_STREAM_RESET_INCOMING","SCTP_STREAM_RESET_OUTGOING","SCTP_UNORDERED","SECCOMP_FILTER_FLAG_LOG","SECCOMP_FILTER_FLAG_SPEC_ALLOW","SECCOMP_FILTER_FLAG_TSYNC","SECCOMP_GET_ACTION_AVAIL","SECCOMP_GET_NOTIF_SIZES","SECCOMP_MODE_DISABLED","SECCOMP_MODE_FILTER","SECCOMP_MODE_STRICT","SECCOMP_RET_ACTION","SECCOMP_RET_ACTION_FULL","SECCOMP_RET_ALLOW","SECCOMP_RET_DATA","SECCOMP_RET_ERRNO","SECCOMP_RET_KILL","SECCOMP_RET_KILL_PROCESS","SECCOMP_RET_KILL_THREAD","SECCOMP_RET_LOG","SECCOMP_RET_TRACE","SECCOMP_RET_TRAP","SECCOMP_SET_MODE_FILTER","SECCOMP_SET_MODE_STRICT","SECURITYFS_MAGIC","SEEK_CUR","SEEK_DATA","SEEK_END","SEEK_HOLE","SEEK_SET","SELFMAG","SELINUX_MAGIC","SEM_FAILED","SFD_CLOEXEC","SFD_NONBLOCK","SHM_EXEC","SHM_HUGETLB","SHM_LOCK","SHM_NORESERVE","SHM_R","SHM_RDONLY","SHM_REMAP","SHM_RND","SHM_UNLOCK","SHM_W","SHORT_INODE","SHUT_RD","SHUT_RDWR","SHUT_WR","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGEV_NONE","SIGEV_SIGNAL","SIGEV_THREAD","SIGEV_THREAD_ID","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGPIPE","SIGPOLL","SIGPROF","SIGPWR","SIGQUIT","SIGRTMAX","SIGRTMIN","SIGSEGV","SIGSTKFLT","SIGSTKSZ","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGUNUSED","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_DFL","SIG_ERR","SIG_IGN","SIG_SETMASK","SIG_UNBLOCK","SIOCADDMULTI","SIOCADDRT","SIOCDARP","SIOCDELMULTI","SIOCDELRT","SIOCDIFADDR","SIOCDRARP","SIOCETHTOOL","SIOCGARP","SIOCGHWTSTAMP","SIOCGIFADDR","SIOCGIFBR","SIOCGIFBRDADDR","SIOCGIFCONF","SIOCGIFCOUNT","SIOCGIFDSTADDR","SIOCGIFENCAP","SIOCGIFFLAGS","SIOCGIFHWADDR","SIOCGIFINDEX","SIOCGIFMAP","SIOCGIFMEM","SIOCGIFMETRIC","SIOCGIFMTU","SIOCGIFNAME","SIOCGIFNETMASK","SIOCGIFPFLAGS","SIOCGIFSLAVE","SIOCGIFTXQLEN","SIOCGIWAP","SIOCGIWAPLIST","SIOCGIWAUTH","SIOCGIWENCODE","SIOCGIWENCODEEXT","SIOCGIWESSID","SIOCGIWFRAG","SIOCGIWFREQ","SIOCGIWGENIE","SIOCGIWMODE","SIOCGIWNAME","SIOCGIWNICKN","SIOCGIWNWID","SIOCGIWPOWER","SIOCGIWPRIV","SIOCGIWRANGE","SIOCGIWRATE","SIOCGIWRETRY","SIOCGIWRTS","SIOCGIWSCAN","SIOCGIWSENS","SIOCGIWSPY","SIOCGIWSTATS","SIOCGIWTHRSPY","SIOCGIWTXPOW","SIOCGMIIPHY","SIOCGMIIREG","SIOCGRARP","SIOCGSKNS","SIOCIWFIRST","SIOCIWFIRSTPRIV","SIOCIWLAST","SIOCIWLASTPRIV","SIOCOUTQNSD","SIOCSARP","SIOCSHWTSTAMP","SIOCSIFADDR","SIOCSIFBR","SIOCSIFBRDADDR","SIOCSIFDSTADDR","SIOCSIFENCAP","SIOCSIFFLAGS","SIOCSIFHWADDR","SIOCSIFHWBROADCAST","SIOCSIFLINK","SIOCSIFMAP","SIOCSIFMEM","SIOCSIFMETRIC","SIOCSIFMTU","SIOCSIFNAME","SIOCSIFNETMASK","SIOCSIFPFLAGS","SIOCSIFSLAVE","SIOCSIFTXQLEN","SIOCSIWAP","SIOCSIWAUTH","SIOCSIWCOMMIT","SIOCSIWENCODE","SIOCSIWENCODEEXT","SIOCSIWESSID","SIOCSIWFRAG","SIOCSIWFREQ","SIOCSIWGENIE","SIOCSIWMLME","SIOCSIWMODE","SIOCSIWNICKN","SIOCSIWNWID","SIOCSIWPMKSA","SIOCSIWPOWER","SIOCSIWPRIV","SIOCSIWRANGE","SIOCSIWRATE","SIOCSIWRETRY","SIOCSIWRTS","SIOCSIWSCAN","SIOCSIWSENS","SIOCSIWSPY","SIOCSIWSTATS","SIOCSIWTHRSPY","SIOCSIWTXPOW","SIOCSMIIREG","SIOCSRARP","SIOCWANDEV","SIOGIFINDEX","SI_LOAD_SHIFT","SKF_AD_ALU_XOR_X","SKF_AD_CPU","SKF_AD_HATYPE","SKF_AD_IFINDEX","SKF_AD_MARK","SKF_AD_MAX","SKF_AD_NLATTR","SKF_AD_NLATTR_NEST","SKF_AD_OFF","SKF_AD_PAY_OFFSET","SKF_AD_PKTTYPE","SKF_AD_PROTOCOL","SKF_AD_QUEUE","SKF_AD_RANDOM","SKF_AD_RXHASH","SKF_AD_VLAN_TAG","SKF_AD_VLAN_TAG_PRESENT","SKF_AD_VLAN_TPID","SKF_LL_OFF","SKF_NET_OFF","SK_MEMINFO_BACKLOG","SK_MEMINFO_DROPS","SK_MEMINFO_FWD_ALLOC","SK_MEMINFO_OPTMEM","SK_MEMINFO_RCVBUF","SK_MEMINFO_RMEM_ALLOC","SK_MEMINFO_SNDBUF","SK_MEMINFO_WMEM_ALLOC","SK_MEMINFO_WMEM_QUEUED","SMACK_MAGIC","SMB_SUPER_MAGIC","SND_CNT","SND_MAX","SOCK_CLOEXEC","SOCK_DCCP","SOCK_DGRAM","SOCK_NONBLOCK","SOCK_PACKET","SOCK_RAW","SOCK_RDM","SOCK_SEQPACKET","SOCK_STREAM","SOF_TIMESTAMPING_OPT_CMSG","SOF_TIMESTAMPING_OPT_ID","SOF_TIMESTAMPING_OPT_PKTINFO","SOF_TIMESTAMPING_OPT_STATS","SOF_TIMESTAMPING_OPT_TSONLY","SOF_TIMESTAMPING_OPT_TX_SWHW","SOF_TIMESTAMPING_RAW_HARDWARE","SOF_TIMESTAMPING_RX_HARDWARE","SOF_TIMESTAMPING_RX_SOFTWARE","SOF_TIMESTAMPING_SOFTWARE","SOF_TIMESTAMPING_SYS_HARDWARE","SOF_TIMESTAMPING_TX_ACK","SOF_TIMESTAMPING_TX_HARDWARE","SOF_TIMESTAMPING_TX_SCHED","SOF_TIMESTAMPING_TX_SOFTWARE","SOF_TXTIME_DEADLINE_MODE","SOF_TXTIME_REPORT_ERRORS","SOL_AAL","SOL_ALG","SOL_ATM","SOL_BLUETOOTH","SOL_CAIF","SOL_CAN_BASE","SOL_CAN_J1939","SOL_CAN_RAW","SOL_DCCP","SOL_DECNET","SOL_ICMPV6","SOL_IP","SOL_IPV6","SOL_IRDA","SOL_IUCV","SOL_LLC","SOL_NETBEUI","SOL_NETLINK","SOL_NFC","SOL_PACKET","SOL_PNPIPE","SOL_PPPOL2TP","SOL_RAW","SOL_RDS","SOL_RXRPC","SOL_SOCKET","SOL_TCP","SOL_TIPC","SOL_TLS","SOL_UDP","SOL_X25","SOL_XDP","SOMAXCONN","SO_ACCEPTCONN","SO_ATTACH_BPF","SO_ATTACH_FILTER","SO_ATTACH_REUSEPORT_CBPF","SO_ATTACH_REUSEPORT_EBPF","SO_BINDTODEVICE","SO_BINDTOIFINDEX","SO_BPF_EXTENSIONS","SO_BROADCAST","SO_BSDCOMPAT","SO_BUSY_POLL","SO_CNX_ADVICE","SO_COOKIE","SO_DEBUG","SO_DETACH_BPF","SO_DETACH_FILTER","SO_DETACH_REUSEPORT_BPF","SO_DOMAIN","SO_DONTROUTE","SO_EE_OFFENDER","SO_EE_ORIGIN_ICMP","SO_EE_ORIGIN_ICMP6","SO_EE_ORIGIN_LOCAL","SO_EE_ORIGIN_NONE","SO_EE_ORIGIN_TIMESTAMPING","SO_EE_ORIGIN_TXSTATUS","SO_ERROR","SO_GET_FILTER","SO_INCOMING_CPU","SO_INCOMING_NAPI_ID","SO_J1939_ERRQUEUE","SO_J1939_FILTER","SO_J1939_PROMISC","SO_J1939_SEND_PRIO","SO_KEEPALIVE","SO_LINGER","SO_LOCK_FILTER","SO_MARK","SO_MAX_PACING_RATE","SO_MEMINFO","SO_NOFCS","SO_NO_CHECK","SO_OOBINLINE","SO_ORIGINAL_DST","SO_PASSCRED","SO_PASSSEC","SO_PEEK_OFF","SO_PEERCRED","SO_PEERGROUPS","SO_PEERNAME","SO_PEERSEC","SO_PRIORITY","SO_PROTOCOL","SO_RCVBUF","SO_RCVBUFFORCE","SO_RCVLOWAT","SO_RCVTIMEO","SO_RCVTIMEO_NEW","SO_REUSEADDR","SO_REUSEPORT","SO_RXQ_OVFL","SO_SECURITY_AUTHENTICATION","SO_SECURITY_ENCRYPTION_NETWORK","SO_SECURITY_ENCRYPTION_TRANSPORT","SO_SELECT_ERR_QUEUE","SO_SNDBUF","SO_SNDBUFFORCE","SO_SNDLOWAT","SO_SNDTIMEO","SO_SNDTIMEO_NEW","SO_TIMESTAMP","SO_TIMESTAMPING","SO_TIMESTAMPING_NEW","SO_TIMESTAMPNS","SO_TIMESTAMPNS_NEW","SO_TIMESTAMP_NEW","SO_TXTIME","SO_TYPE","SO_WIFI_STATUS","SO_ZEROCOPY","SPLICE_F_GIFT","SPLICE_F_MORE","SPLICE_F_MOVE","SPLICE_F_NONBLOCK","SS","SS_DISABLE","SS_ONSTACK","STATX_ALL","STATX_ATIME","STATX_ATTR_APPEND","STATX_ATTR_AUTOMOUNT","STATX_ATTR_COMPRESSED","STATX_ATTR_DAX","STATX_ATTR_ENCRYPTED","STATX_ATTR_IMMUTABLE","STATX_ATTR_MOUNT_ROOT","STATX_ATTR_NODUMP","STATX_ATTR_VERITY","STATX_BASIC_STATS","STATX_BLOCKS","STATX_BTIME","STATX_CTIME","STATX_DIOALIGN","STATX_GID","STATX_INO","STATX_MNT_ID","STATX_MODE","STATX_MTIME","STATX_NLINK","STATX_SIZE","STATX_TYPE","STATX_UID","STATX__RESERVED","STA_CLK","STA_CLOCKERR","STA_DEL","STA_FLL","STA_FREQHOLD","STA_INS","STA_MODE","STA_NANO","STA_PLL","STA_PPSERROR","STA_PPSFREQ","STA_PPSJITTER","STA_PPSSIGNAL","STA_PPSTIME","STA_PPSWANDER","STA_RONLY","STA_UNSYNC","STDERR_FILENO","STDIN_FILENO","STDOUT_FILENO","STICKY_TIMEOUTS","ST_APPEND","ST_IMMUTABLE","ST_MANDLOCK","ST_NOATIME","ST_NODEV","ST_NODIRATIME","ST_NOEXEC","ST_NOSUID","ST_RDONLY","ST_RELATIME","ST_SYNCHRONOUS","ST_WRITE","SW_CNT","SW_MAX","SYNC_FILE_RANGE_WAIT_AFTER","SYNC_FILE_RANGE_WAIT_BEFORE","SYNC_FILE_RANGE_WRITE","SYN_CNT","SYN_MAX","SYSFS_MAGIC","SYS__sysctl","SYS_accept","SYS_accept4","SYS_access","SYS_acct","SYS_add_key","SYS_adjtimex","SYS_afs_syscall","SYS_alarm","SYS_arch_prctl","SYS_bind","SYS_bpf","SYS_brk","SYS_capget","SYS_capset","SYS_chdir","SYS_chmod","SYS_chown","SYS_chroot","SYS_clock_adjtime","SYS_clock_getres","SYS_clock_gettime","SYS_clock_nanosleep","SYS_clock_settime","SYS_clone","SYS_clone3","SYS_close","SYS_close_range","SYS_connect","SYS_copy_file_range","SYS_creat","SYS_create_module","SYS_delete_module","SYS_dup","SYS_dup2","SYS_dup3","SYS_epoll_create","SYS_epoll_create1","SYS_epoll_ctl","SYS_epoll_ctl_old","SYS_epoll_pwait","SYS_epoll_pwait2","SYS_epoll_wait","SYS_epoll_wait_old","SYS_eventfd","SYS_eventfd2","SYS_execve","SYS_execveat","SYS_exit","SYS_exit_group","SYS_faccessat","SYS_faccessat2","SYS_fadvise64","SYS_fallocate","SYS_fanotify_init","SYS_fanotify_mark","SYS_fchdir","SYS_fchmod","SYS_fchmodat","SYS_fchown","SYS_fchownat","SYS_fcntl","SYS_fdatasync","SYS_fgetxattr","SYS_finit_module","SYS_flistxattr","SYS_flock","SYS_fork","SYS_fremovexattr","SYS_fsconfig","SYS_fsetxattr","SYS_fsmount","SYS_fsopen","SYS_fspick","SYS_fstat","SYS_fstatfs","SYS_fsync","SYS_ftruncate","SYS_futex","SYS_futex_waitv","SYS_futimesat","SYS_get_kernel_syms","SYS_get_mempolicy","SYS_get_robust_list","SYS_get_thread_area","SYS_getcpu","SYS_getcwd","SYS_getdents","SYS_getdents64","SYS_getegid","SYS_geteuid","SYS_getgid","SYS_getgroups","SYS_getitimer","SYS_getpeername","SYS_getpgid","SYS_getpgrp","SYS_getpid","SYS_getpmsg","SYS_getppid","SYS_getpriority","SYS_getrandom","SYS_getresgid","SYS_getresuid","SYS_getrlimit","SYS_getrusage","SYS_getsid","SYS_getsockname","SYS_getsockopt","SYS_gettid","SYS_gettimeofday","SYS_getuid","SYS_getxattr","SYS_init_module","SYS_inotify_add_watch","SYS_inotify_init","SYS_inotify_init1","SYS_inotify_rm_watch","SYS_io_cancel","SYS_io_destroy","SYS_io_getevents","SYS_io_setup","SYS_io_submit","SYS_io_uring_enter","SYS_io_uring_register","SYS_io_uring_setup","SYS_ioctl","SYS_ioperm","SYS_iopl","SYS_ioprio_get","SYS_ioprio_set","SYS_kcmp","SYS_kexec_file_load","SYS_kexec_load","SYS_keyctl","SYS_kill","SYS_landlock_add_rule","SYS_landlock_create_ruleset","SYS_landlock_restrict_self","SYS_lchown","SYS_lgetxattr","SYS_link","SYS_linkat","SYS_listen","SYS_listxattr","SYS_llistxattr","SYS_lookup_dcookie","SYS_lremovexattr","SYS_lseek","SYS_lsetxattr","SYS_lstat","SYS_madvise","SYS_mbind","SYS_membarrier","SYS_memfd_create","SYS_memfd_secret","SYS_migrate_pages","SYS_mincore","SYS_mkdir","SYS_mkdirat","SYS_mknod","SYS_mknodat","SYS_mlock","SYS_mlock2","SYS_mlockall","SYS_mmap","SYS_modify_ldt","SYS_mount","SYS_mount_setattr","SYS_move_mount","SYS_move_pages","SYS_mprotect","SYS_mq_getsetattr","SYS_mq_notify","SYS_mq_open","SYS_mq_timedreceive","SYS_mq_timedsend","SYS_mq_unlink","SYS_mremap","SYS_msgctl","SYS_msgget","SYS_msgrcv","SYS_msgsnd","SYS_msync","SYS_munlock","SYS_munlockall","SYS_munmap","SYS_name_to_handle_at","SYS_nanosleep","SYS_newfstatat","SYS_nfsservctl","SYS_open","SYS_open_by_handle_at","SYS_open_tree","SYS_openat","SYS_openat2","SYS_pause","SYS_perf_event_open","SYS_personality","SYS_pidfd_getfd","SYS_pidfd_open","SYS_pidfd_send_signal","SYS_pipe","SYS_pipe2","SYS_pivot_root","SYS_pkey_alloc","SYS_pkey_free","SYS_pkey_mprotect","SYS_poll","SYS_ppoll","SYS_prctl","SYS_pread64","SYS_preadv","SYS_preadv2","SYS_prlimit64","SYS_process_madvise","SYS_process_mrelease","SYS_process_vm_readv","SYS_process_vm_writev","SYS_pselect6","SYS_ptrace","SYS_putpmsg","SYS_pwrite64","SYS_pwritev","SYS_pwritev2","SYS_query_module","SYS_quotactl","SYS_quotactl_fd","SYS_read","SYS_readahead","SYS_readlink","SYS_readlinkat","SYS_readv","SYS_reboot","SYS_recvfrom","SYS_recvmmsg","SYS_recvmsg","SYS_remap_file_pages","SYS_removexattr","SYS_rename","SYS_renameat","SYS_renameat2","SYS_request_key","SYS_restart_syscall","SYS_rmdir","SYS_rseq","SYS_rt_sigaction","SYS_rt_sigpending","SYS_rt_sigprocmask","SYS_rt_sigqueueinfo","SYS_rt_sigreturn","SYS_rt_sigsuspend","SYS_rt_sigtimedwait","SYS_rt_tgsigqueueinfo","SYS_sched_get_priority_max","SYS_sched_get_priority_min","SYS_sched_getaffinity","SYS_sched_getattr","SYS_sched_getparam","SYS_sched_getscheduler","SYS_sched_rr_get_interval","SYS_sched_setaffinity","SYS_sched_setattr","SYS_sched_setparam","SYS_sched_setscheduler","SYS_sched_yield","SYS_seccomp","SYS_security","SYS_select","SYS_semctl","SYS_semget","SYS_semop","SYS_semtimedop","SYS_sendfile","SYS_sendmmsg","SYS_sendmsg","SYS_sendto","SYS_set_mempolicy","SYS_set_mempolicy_home_node","SYS_set_robust_list","SYS_set_thread_area","SYS_set_tid_address","SYS_setdomainname","SYS_setfsgid","SYS_setfsuid","SYS_setgid","SYS_setgroups","SYS_sethostname","SYS_setitimer","SYS_setns","SYS_setpgid","SYS_setpriority","SYS_setregid","SYS_setresgid","SYS_setresuid","SYS_setreuid","SYS_setrlimit","SYS_setsid","SYS_setsockopt","SYS_settimeofday","SYS_setuid","SYS_setxattr","SYS_shmat","SYS_shmctl","SYS_shmdt","SYS_shmget","SYS_shutdown","SYS_sigaltstack","SYS_signalfd","SYS_signalfd4","SYS_socket","SYS_socketpair","SYS_splice","SYS_stat","SYS_statfs","SYS_statx","SYS_swapoff","SYS_swapon","SYS_symlink","SYS_symlinkat","SYS_sync","SYS_sync_file_range","SYS_syncfs","SYS_sysfs","SYS_sysinfo","SYS_syslog","SYS_tee","SYS_tgkill","SYS_time","SYS_timer_create","SYS_timer_delete","SYS_timer_getoverrun","SYS_timer_gettime","SYS_timer_settime","SYS_timerfd_create","SYS_timerfd_gettime","SYS_timerfd_settime","SYS_times","SYS_tkill","SYS_truncate","SYS_tuxcall","SYS_umask","SYS_umount2","SYS_uname","SYS_unlink","SYS_unlinkat","SYS_unshare","SYS_uselib","SYS_userfaultfd","SYS_ustat","SYS_utime","SYS_utimensat","SYS_utimes","SYS_vfork","SYS_vhangup","SYS_vmsplice","SYS_vserver","SYS_wait4","SYS_waitid","SYS_write","SYS_writev","S_IEXEC","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IREAD","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWRITE","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","TAB0","TAB1","TAB2","TAB3","TABDLY","TCA_CHAIN","TCA_DUMP_INVISIBLE","TCA_FCNT","TCA_HW_OFFLOAD","TCA_KIND","TCA_OPTIONS","TCA_PAD","TCA_RATE","TCA_STAB","TCA_STATS","TCA_STATS2","TCA_UNSPEC","TCA_XSTATS","TCFLSH","TCGETA","TCGETS","TCGETS2","TCGETX","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCP_CC_INFO","TCP_CM_INQ","TCP_CONGESTION","TCP_COOKIE_TRANSACTIONS","TCP_CORK","TCP_DEFER_ACCEPT","TCP_FASTOPEN","TCP_FASTOPEN_CONNECT","TCP_FASTOPEN_KEY","TCP_FASTOPEN_NO_COOKIE","TCP_INFO","TCP_INQ","TCP_KEEPCNT","TCP_KEEPIDLE","TCP_KEEPINTVL","TCP_LINGER2","TCP_MAXSEG","TCP_MD5SIG","TCP_MD5SIG_EXT","TCP_MD5SIG_MAXKEYLEN","TCP_NODELAY","TCP_NOTSENT_LOWAT","TCP_QUEUE_SEQ","TCP_QUICKACK","TCP_REPAIR","TCP_REPAIR_OPTIONS","TCP_REPAIR_QUEUE","TCP_REPAIR_WINDOW","TCP_SAVED_SYN","TCP_SAVE_SYN","TCP_SYNCNT","TCP_THIN_DUPACK","TCP_THIN_LINEAR_TIMEOUTS","TCP_TIMESTAMP","TCP_ULP","TCP_USER_TIMEOUT","TCP_WINDOW_CLAMP","TCP_ZEROCOPY_RECEIVE","TCSADRAIN","TCSAFLUSH","TCSANOW","TCSBRK","TCSBRKP","TCSETA","TCSETAF","TCSETAW","TCSETS","TCSETS2","TCSETSF","TCSETSF2","TCSETSW","TCSETSW2","TCSETX","TCSETXF","TCSETXW","TCXONC","TFD_CLOEXEC","TFD_NONBLOCK","TFD_TIMER_ABSTIME","TFD_TIMER_CANCEL_ON_SET","THOUSEP","TIMER_ABSTIME","TIME_BAD","TIME_DEL","TIME_ERROR","TIME_INS","TIME_OK","TIME_OOP","TIME_WAIT","TIOCCBRK","TIOCCONS","TIOCEXCL","TIOCGDEV","TIOCGETD","TIOCGEXCL","TIOCGICOUNT","TIOCGLCKTRMIOS","TIOCGPGRP","TIOCGPKT","TIOCGPTLCK","TIOCGPTN","TIOCGPTPEER","TIOCGRS485","TIOCGSERIAL","TIOCGSID","TIOCGSOFTCAR","TIOCGWINSZ","TIOCINQ","TIOCLINUX","TIOCMBIC","TIOCMBIS","TIOCMGET","TIOCMIWAIT","TIOCMSET","TIOCM_CAR","TIOCM_CD","TIOCM_CTS","TIOCM_DSR","TIOCM_DTR","TIOCM_LE","TIOCM_RI","TIOCM_RNG","TIOCM_RTS","TIOCM_SR","TIOCM_ST","TIOCNOTTY","TIOCNXCL","TIOCOUTQ","TIOCPKT","TIOCSBRK","TIOCSCTTY","TIOCSERCONFIG","TIOCSERGETLSR","TIOCSERGETMULTI","TIOCSERGSTRUCT","TIOCSERGWILD","TIOCSERSETMULTI","TIOCSERSWILD","TIOCSETD","TIOCSIG","TIOCSLCKTRMIOS","TIOCSPGRP","TIOCSPTLCK","TIOCSRS485","TIOCSSERIAL","TIOCSSOFTCAR","TIOCSTI","TIOCSWINSZ","TIOCVHANGUP","TLS_1_2_VERSION","TLS_1_2_VERSION_MAJOR","TLS_1_2_VERSION_MINOR","TLS_1_3_VERSION","TLS_1_3_VERSION_MAJOR","TLS_1_3_VERSION_MINOR","TLS_CIPHER_AES_GCM_128","TLS_CIPHER_AES_GCM_128_IV_SIZE","TLS_CIPHER_AES_GCM_128_KEY_SIZE","TLS_CIPHER_AES_GCM_128_REC_SEQ_SIZE","TLS_CIPHER_AES_GCM_128_SALT_SIZE","TLS_CIPHER_AES_GCM_128_TAG_SIZE","TLS_CIPHER_AES_GCM_256","TLS_CIPHER_AES_GCM_256_IV_SIZE","TLS_CIPHER_AES_GCM_256_KEY_SIZE","TLS_CIPHER_AES_GCM_256_REC_SEQ_SIZE","TLS_CIPHER_AES_GCM_256_SALT_SIZE","TLS_CIPHER_AES_GCM_256_TAG_SIZE","TLS_CIPHER_CHACHA20_POLY1305","TLS_CIPHER_CHACHA20_POLY1305_IV_SIZE","TLS_CIPHER_CHACHA20_POLY1305_KEY_SIZE","TLS_CIPHER_CHACHA20_POLY1305_REC_SEQ_SIZE","TLS_CIPHER_CHACHA20_POLY1305_SALT_SIZE","TLS_CIPHER_CHACHA20_POLY1305_TAG_SIZE","TLS_GET_RECORD_TYPE","TLS_RX","TLS_SET_RECORD_TYPE","TLS_TX","TMPFS_MAGIC","TMP_MAX","TOSTOP","TRACEFS_MAGIC","TUN_FLT_ALLMULTI","TUN_F_CSUM","TUN_F_TSO4","TUN_F_TSO6","TUN_F_TSO_ECN","TUN_F_UFO","TUN_F_USO4","TUN_F_USO6","TUN_PKT_STRIP","TUN_READQ_SIZE","TUN_TAP_DEV","TUN_TUN_DEV","TUN_TX_TIMESTAMP","TUN_TYPE_MASK","T_FMT","T_FMT_AMPM","UDF_SUPER_MAGIC","UDP_CORK","UDP_ENCAP","UDP_GRO","UDP_NO_CHECK6_RX","UDP_NO_CHECK6_TX","UDP_SEGMENT","UINPUT_MAX_NAME_SIZE","UINPUT_VERSION","UIO_MAXIOV","UMOUNT_NOFOLLOW","UNAME26","USBDEVICE_SUPER_MAGIC","USER_PROCESS","USRQUOTA","UTIME_NOW","UTIME_OMIT","VDISCARD","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMADDR_CID_ANY","VMADDR_CID_HOST","VMADDR_CID_HYPERVISOR","VMADDR_CID_LOCAL","VMADDR_CID_RESERVED","VMADDR_PORT_ANY","VMIN","VM_BLOCK_DUMP","VM_DIRTY_BACKGROUND","VM_DIRTY_EXPIRE_CS","VM_DIRTY_RATIO","VM_DIRTY_WB_CS","VM_DROP_PAGECACHE","VM_HUGETLB_GROUP","VM_HUGETLB_PAGES","VM_LAPTOP_MODE","VM_LEGACY_VA_LAYOUT","VM_LOWMEM_RESERVE_RATIO","VM_MAX_MAP_COUNT","VM_MIN_FREE_KBYTES","VM_MIN_SLAB","VM_MIN_UNMAPPED","VM_NR_PDFLUSH_THREADS","VM_OVERCOMMIT_MEMORY","VM_OVERCOMMIT_RATIO","VM_PAGEBUF","VM_PAGE_CLUSTER","VM_PANIC_ON_OOM","VM_PERCPU_PAGELIST_FRACTION","VM_SWAPPINESS","VM_SWAP_TOKEN_TIMEOUT","VM_VDSO_ENABLED","VM_VFS_CACHE_PRESSURE","VM_ZONE_RECLAIM_MODE","VQUIT","VREPRINT","VSTART","VSTOP","VSUSP","VSWTC","VT0","VT1","VTDLY","VTIME","VWERASE","WCONTINUED","WCOREDUMP","WEXITED","WEXITSTATUS","WHOLE_SECONDS","WIFCONTINUED","WIFEXITED","WIFSIGNALED","WIFSTOPPED","WIRELESS_EXT","WNOHANG","WNOWAIT","WSTOPPED","WSTOPSIG","WTERMSIG","WUNTRACED","W_EXITCODE","W_OK","W_STOPCODE","XATTR_CREATE","XATTR_REPLACE","XDP_COPY","XDP_MMAP_OFFSETS","XDP_OPTIONS","XDP_OPTIONS_ZEROCOPY","XDP_PGOFF_RX_RING","XDP_PGOFF_TX_RING","XDP_PKT_CONTD","XDP_RING_NEED_WAKEUP","XDP_RX_RING","XDP_SHARED_UMEM","XDP_STATISTICS","XDP_TX_RING","XDP_UMEM_COMPLETION_RING","XDP_UMEM_FILL_RING","XDP_UMEM_PGOFF_COMPLETION_RING","XDP_UMEM_PGOFF_FILL_RING","XDP_UMEM_REG","XDP_UMEM_UNALIGNED_CHUNK_FLAG","XDP_USE_NEED_WAKEUP","XDP_USE_SG","XDP_ZEROCOPY","XENFS_SUPER_MAGIC","XFS_SUPER_MAGIC","XSK_UNALIGNED_BUF_ADDR_MASK","XSK_UNALIGNED_BUF_OFFSET_SHIFT","XTABS","X_OK","YESEXPR","YESSTR","_IOFBF","_IOLBF","_IONBF","_PC_2_SYMLINKS","_PC_ALLOC_SIZE_MIN","_PC_ASYNC_IO","_PC_CHOWN_RESTRICTED","_PC_FILESIZEBITS","_PC_LINK_MAX","_PC_MAX_CANON","_PC_MAX_INPUT","_PC_NAME_MAX","_PC_NO_TRUNC","_PC_PATH_MAX","_PC_PIPE_BUF","_PC_PRIO_IO","_PC_REC_INCR_XFER_SIZE","_PC_REC_MAX_XFER_SIZE","_PC_REC_MIN_XFER_SIZE","_PC_REC_XFER_ALIGN","_PC_SOCK_MAXBUF","_PC_SYMLINK_MAX","_PC_SYNC_IO","_PC_VDISABLE","_POSIX_VDISABLE","_SC_2_CHAR_TERM","_SC_2_C_BIND","_SC_2_C_DEV","_SC_2_C_VERSION","_SC_2_FORT_DEV","_SC_2_FORT_RUN","_SC_2_LOCALEDEF","_SC_2_PBS","_SC_2_PBS_ACCOUNTING","_SC_2_PBS_CHECKPOINT","_SC_2_PBS_LOCATE","_SC_2_PBS_MESSAGE","_SC_2_PBS_TRACK","_SC_2_SW_DEV","_SC_2_UPE","_SC_2_VERSION","_SC_ADVISORY_INFO","_SC_AIO_LISTIO_MAX","_SC_AIO_MAX","_SC_AIO_PRIO_DELTA_MAX","_SC_ARG_MAX","_SC_ASYNCHRONOUS_IO","_SC_ATEXIT_MAX","_SC_AVPHYS_PAGES","_SC_BARRIERS","_SC_BASE","_SC_BC_BASE_MAX","_SC_BC_DIM_MAX","_SC_BC_SCALE_MAX","_SC_BC_STRING_MAX","_SC_CHARCLASS_NAME_MAX","_SC_CHAR_BIT","_SC_CHAR_MAX","_SC_CHAR_MIN","_SC_CHILD_MAX","_SC_CLK_TCK","_SC_CLOCK_SELECTION","_SC_COLL_WEIGHTS_MAX","_SC_CPUTIME","_SC_C_LANG_SUPPORT","_SC_C_LANG_SUPPORT_R","_SC_DELAYTIMER_MAX","_SC_DEVICE_IO","_SC_DEVICE_SPECIFIC","_SC_DEVICE_SPECIFIC_R","_SC_EQUIV_CLASS_MAX","_SC_EXPR_NEST_MAX","_SC_FD_MGMT","_SC_FIFO","_SC_FILE_ATTRIBUTES","_SC_FILE_LOCKING","_SC_FILE_SYSTEM","_SC_FSYNC","_SC_GETGR_R_SIZE_MAX","_SC_GETPW_R_SIZE_MAX","_SC_HOST_NAME_MAX","_SC_INT_MAX","_SC_INT_MIN","_SC_IOV_MAX","_SC_IPV6","_SC_JOB_CONTROL","_SC_LEVEL1_DCACHE_ASSOC","_SC_LEVEL1_DCACHE_LINESIZE","_SC_LEVEL1_DCACHE_SIZE","_SC_LEVEL1_ICACHE_ASSOC","_SC_LEVEL1_ICACHE_LINESIZE","_SC_LEVEL1_ICACHE_SIZE","_SC_LEVEL2_CACHE_ASSOC","_SC_LEVEL2_CACHE_LINESIZE","_SC_LEVEL2_CACHE_SIZE","_SC_LEVEL3_CACHE_ASSOC","_SC_LEVEL3_CACHE_LINESIZE","_SC_LEVEL3_CACHE_SIZE","_SC_LEVEL4_CACHE_ASSOC","_SC_LEVEL4_CACHE_LINESIZE","_SC_LEVEL4_CACHE_SIZE","_SC_LINE_MAX","_SC_LOGIN_NAME_MAX","_SC_LONG_BIT","_SC_MAPPED_FILES","_SC_MB_LEN_MAX","_SC_MEMLOCK","_SC_MEMLOCK_RANGE","_SC_MEMORY_PROTECTION","_SC_MESSAGE_PASSING","_SC_MONOTONIC_CLOCK","_SC_MQ_OPEN_MAX","_SC_MQ_PRIO_MAX","_SC_MULTI_PROCESS","_SC_NETWORKING","_SC_NGROUPS_MAX","_SC_NL_ARGMAX","_SC_NL_LANGMAX","_SC_NL_MSGMAX","_SC_NL_NMAX","_SC_NL_SETMAX","_SC_NL_TEXTMAX","_SC_NPROCESSORS_CONF","_SC_NPROCESSORS_ONLN","_SC_NZERO","_SC_OPEN_MAX","_SC_PAGESIZE","_SC_PAGE_SIZE","_SC_PASS_MAX","_SC_PHYS_PAGES","_SC_PII","_SC_PII_INTERNET","_SC_PII_INTERNET_DGRAM","_SC_PII_INTERNET_STREAM","_SC_PII_OSI","_SC_PII_OSI_CLTS","_SC_PII_OSI_COTS","_SC_PII_OSI_M","_SC_PII_SOCKET","_SC_PII_XTI","_SC_PIPE","_SC_POLL","_SC_PRIORITIZED_IO","_SC_PRIORITY_SCHEDULING","_SC_RAW_SOCKETS","_SC_READER_WRITER_LOCKS","_SC_REALTIME_SIGNALS","_SC_REGEXP","_SC_REGEX_VERSION","_SC_RE_DUP_MAX","_SC_RTSIG_MAX","_SC_SAVED_IDS","_SC_SCHAR_MAX","_SC_SCHAR_MIN","_SC_SELECT","_SC_SEMAPHORES","_SC_SEM_NSEMS_MAX","_SC_SEM_VALUE_MAX","_SC_SHARED_MEMORY_OBJECTS","_SC_SHELL","_SC_SHRT_MAX","_SC_SHRT_MIN","_SC_SIGNALS","_SC_SIGQUEUE_MAX","_SC_SINGLE_PROCESS","_SC_SPAWN","_SC_SPIN_LOCKS","_SC_SPORADIC_SERVER","_SC_SSIZE_MAX","_SC_SS_REPL_MAX","_SC_STREAMS","_SC_STREAM_MAX","_SC_SYMLOOP_MAX","_SC_SYNCHRONIZED_IO","_SC_SYSTEM_DATABASE","_SC_SYSTEM_DATABASE_R","_SC_THREADS","_SC_THREAD_ATTR_STACKADDR","_SC_THREAD_ATTR_STACKSIZE","_SC_THREAD_CPUTIME","_SC_THREAD_DESTRUCTOR_ITERATIONS","_SC_THREAD_KEYS_MAX","_SC_THREAD_PRIORITY_SCHEDULING","_SC_THREAD_PRIO_INHERIT","_SC_THREAD_PRIO_PROTECT","_SC_THREAD_PROCESS_SHARED","_SC_THREAD_ROBUST_PRIO_INHERIT","_SC_THREAD_ROBUST_PRIO_PROTECT","_SC_THREAD_SAFE_FUNCTIONS","_SC_THREAD_SPORADIC_SERVER","_SC_THREAD_STACK_MIN","_SC_THREAD_THREADS_MAX","_SC_TIMEOUTS","_SC_TIMERS","_SC_TIMER_MAX","_SC_TRACE","_SC_TRACE_EVENT_FILTER","_SC_TRACE_EVENT_NAME_MAX","_SC_TRACE_INHERIT","_SC_TRACE_LOG","_SC_TRACE_NAME_MAX","_SC_TRACE_SYS_MAX","_SC_TRACE_USER_EVENT_MAX","_SC_TTY_NAME_MAX","_SC_TYPED_MEMORY_OBJECTS","_SC_TZNAME_MAX","_SC_T_IOV_MAX","_SC_UCHAR_MAX","_SC_UINT_MAX","_SC_UIO_MAXIOV","_SC_ULONG_MAX","_SC_USER_GROUPS","_SC_USER_GROUPS_R","_SC_USHRT_MAX","_SC_V6_ILP32_OFF32","_SC_V6_ILP32_OFFBIG","_SC_V6_LP64_OFF64","_SC_V6_LPBIG_OFFBIG","_SC_V7_ILP32_OFF32","_SC_V7_ILP32_OFFBIG","_SC_V7_LP64_OFF64","_SC_V7_LPBIG_OFFBIG","_SC_VERSION","_SC_WORD_BIT","_SC_XBS5_ILP32_OFF32","_SC_XBS5_ILP32_OFFBIG","_SC_XBS5_LP64_OFF64","_SC_XBS5_LPBIG_OFFBIG","_SC_XOPEN_CRYPT","_SC_XOPEN_ENH_I18N","_SC_XOPEN_LEGACY","_SC_XOPEN_REALTIME","_SC_XOPEN_REALTIME_THREADS","_SC_XOPEN_SHM","_SC_XOPEN_STREAMS","_SC_XOPEN_UNIX","_SC_XOPEN_VERSION","_SC_XOPEN_XCU_VERSION","_SC_XOPEN_XPG2","_SC_XOPEN_XPG3","_SC_XOPEN_XPG4","__NFT_REG_MAX","__SIZEOF_PTHREAD_BARRIERATTR_T","__SIZEOF_PTHREAD_BARRIER_T","__SIZEOF_PTHREAD_CONDATTR_T","__SIZEOF_PTHREAD_COND_T","__SIZEOF_PTHREAD_MUTEXATTR_T","__SIZEOF_PTHREAD_MUTEX_T","__SIZEOF_PTHREAD_RWLOCKATTR_T","__SIZEOF_PTHREAD_RWLOCK_T","__UT_HOSTSIZE","__UT_LINESIZE","__UT_NAMESIZE","__WALL","__WCLONE","__WNOTHREAD","__c_anonymous_ifc_ifcu","__c_anonymous_ifr_ifru","__c_anonymous_ifru_map","__c_anonymous_ptrace_syscall_info_data","__c_anonymous_ptrace_syscall_info_entry","__c_anonymous_ptrace_syscall_info_exit","__c_anonymous_ptrace_syscall_info_seccomp","__c_anonymous_sockaddr_can_can_addr","__c_anonymous_sockaddr_can_j1939","__c_anonymous_sockaddr_can_tp","__errno_location","__exit_status","__fsword_t","__glibc_reserved1","__glibc_reserved2","__glibc_reserved3","__glibc_reserved4","__key","__priority_which_t","__rlimit_resource_t","__s16","__s32","__s64","__seq","__statx_timestamp_pad1","__syscall_ulong_t","__timeval","__u16","__u32","__u64","__u8","__unused1","__unused10","__unused11","__unused2","__unused3","__unused4","__unused5","__unused6","__unused7","__unused8","__unused9","_exit","_f","_libc_fpstate","_libc_fpxreg","_libc_xmmreg","_st","_xmm","abort","abs","absflat","absfuzz","absinfo","absmax","absmin","accept","accept4","access","acct","actime","addmntent","addr","addr","addr","addr","addr","addr_mask","addrinfo","adjtime","adjtimex","af","af_alg_iv","ai_addr","ai_addrlen","ai_canonname","ai_family","ai_flags","ai_next","ai_protocol","ai_socktype","aio_buf","aio_cancel","aio_error","aio_fildes","aio_fsync","aio_lio_opcode","aio_nbytes","aio_offset","aio_read","aio_reqprio","aio_return","aio_sigevent","aio_suspend","aio_write","aiocb","alarm","ar_hln","ar_hrd","ar_op","ar_pln","ar_pro","arch","arch","arena","arena","args","args","args","arp_dev","arp_flags","arp_flags","arp_ha","arp_ha","arp_netmask","arp_netmask","arp_pa","arp_pa","arpd_request","arphdr","arpreq","arpreq_old","asctime_r","atexit","atof","atoi","atol","atoll","attack_length","attack_level","auth_keynumber","backtrace","base_addr","bind","blkcnt64_t","blkcnt_t","blksize_t","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brk","bsearch","bufferram","bustype","button","c_cc","c_cc","c_cflag","c_cflag","c_char","c_double","c_float","c_iflag","c_iflag","c_int","c_ispeed","c_ispeed","c_lflag","c_lflag","c_line","c_line","c_long","c_longlong","c_oflag","c_oflag","c_ospeed","c_ospeed","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","calcnt","calloc","can_addr","can_dlc","can_err_mask_t","can_family","can_filter","can_frame","can_id","can_id","can_id","can_ifindex","can_mask","canfd_frame","canid_t","canxl_frame","cc_t","center","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","cgid","cgroup","ch_addralign","ch_addralign","ch_reserved","ch_size","ch_size","ch_type","ch_type","chdir","child_tid","chmod","chown","chroot","chunk_size","chunk_size","cipher_type","clearenv","clearerr","clock_adjtime","clock_getcpuclockid","clock_getres","clock_gettime","clock_nanosleep","clock_settime","clock_t","clockid","clockid_t","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_args","close","close_range","closedir","closelog","cmd","cmsg_len","cmsg_level","cmsg_type","cmsghdr","code","code","code","codes_ptr","codes_size","connect","constant","consumer","consumer","cookie","copy_file_range","cpu_set_t","cr","cr","creat","creat64","cs","ctermid","ctime_r","cuid","currency_symbol","custom_data","custom_len","cwd","cwd","d_ino","d_ino","d_name","d_name","d_off","d_off","d_reclen","d_reclen","d_type","d_type","daemon","data","data","data","deadband","decimal_point","delay","desc","desc","dest_offset","dev","dev_t","difftime","direction","dirent","dirent64","dirfd","dirname","dl_iterate_phdr","dl_phdr_info","dladdr","dladdr1","dlclose","dlerror","dli_fbase","dli_fname","dli_saddr","dli_sname","dlinfo","dlmopen","dlopen","dlpi_addr","dlpi_adds","dlpi_name","dlpi_phdr","dlpi_phnum","dlpi_subs","dlpi_tls_data","dlpi_tls_modid","dlsym","dma","domainname","dqb_bhardlimit","dqb_bsoftlimit","dqb_btime","dqb_curinodes","dqb_curspace","dqb_ihardlimit","dqb_isoftlimit","dqb_itime","dqb_valid","dqblk","drand48","ds","dup","dup2","dup3","duplocale","e_ehsize","e_ehsize","e_entry","e_entry","e_exit","e_flags","e_flags","e_ident","e_ident","e_machine","e_machine","e_phentsize","e_phentsize","e_phnum","e_phnum","e_phoff","e_phoff","e_shentsize","e_shentsize","e_shnum","e_shnum","e_shoff","e_shoff","e_shstrndx","e_shstrndx","e_termination","e_type","e_type","e_version","e_version","eaccess","ee_code","ee_data","ee_errno","ee_info","ee_origin","ee_pad","ee_type","effect","effect_id","eflags","element","end_level","endgrent","endmntent","endpwent","endservent","endspent","endutxent","entry","envelope","envelope","envelope","epoll_create","epoll_create1","epoll_ctl","epoll_event","epoll_pwait","epoll_wait","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","erand48","errcnt","error","es","esterror","esterror","euidaccess","event_len","eventfd","eventfd_read","eventfd_t","eventfd_write","events","events","execl","execle","execlp","execv","execve","execveat","execvp","execvpe","exit","exit","exit_signal","explicit_bzero","exponent","f_bavail","f_bavail","f_bavail","f_bavail","f_bfree","f_bfree","f_bfree","f_bfree","f_blocks","f_blocks","f_blocks","f_blocks","f_bsize","f_bsize","f_bsize","f_bsize","f_favail","f_favail","f_ffree","f_ffree","f_ffree","f_ffree","f_files","f_files","f_files","f_files","f_flag","f_flag","f_flags","f_frsize","f_frsize","f_frsize","f_frsize","f_fsid","f_fsid","f_fsid","f_fsid","f_namelen","f_namelen","f_namemax","f_namemax","f_spare","f_type","f_type","faccessat","fade_length","fade_level","fallocate","fallocate64","fanotify_event_metadata","fanotify_init","fanotify_mark","fanotify_response","fchdir","fchmod","fchmodat","fchown","fchownat","fclose","fcntl","fd","fd","fd","fd_set","fdatasync","fdopen","fdopendir","feof","ferror","fexecve","ff_condition_effect","ff_constant_effect","ff_effect","ff_effects_max","ff_effects_max","ff_envelope","ff_periodic_effect","ff_ramp_effect","ff_replay","ff_rumble_effect","ff_trigger","fflush","fgetc","fgetgrent_r","fgetpos","fgetpos64","fgetpwent_r","fgets","fgetspent_r","fgetxattr","file_clone_range","fileno","filter","flag","flags","flags","flags","flags","flags","flags","flags","flags","flags","flags","flags","flags","flat","flistxattr","flock","flock","flock64","fmemopen","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fop","fop","fopen","fopen64","fordblks","fordblks","fork","forkpty","fpathconf","fpos64_t","fpos_t","fpregs","fprintf","fputc","fputs","fr","fr","frac_digits","fread","fread_unlocked","free","freeaddrinfo","freehigh","freeifaddrs","freelocale","freeram","freeswap","fremovexattr","freopen","freopen64","freq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fs","fs_base","fsblkcnt_t","fscanf","fseek","fseeko","fseeko64","fsetpos","fsetpos64","fsetxattr","fsfilcnt_t","fsid_t","fsmblks","fsmblks","fstat","fstat64","fstatat","fstatat64","fstatfs","fstatfs64","fstatvfs","fstatvfs64","fsync","ftell","ftello","ftello64","ftok","ftruncate","ftruncate64","ftw","ftw","futimens","futimes","fuzz","fwrite","gai_strerror","genlmsghdr","getaddrinfo","getauxval","getchar","getchar_unlocked","getcontext","getcwd","getdomainname","getdtablesize","getegid","getentropy","getenv","geteuid","getgid","getgrent","getgrent_r","getgrgid","getgrgid_r","getgrnam","getgrnam_r","getgrouplist","getgroups","gethostid","gethostname","getifaddrs","getline","getloadavg","getlogin","getmntent","getmntent_r","getnameinfo","getopt","getopt_long","getpeername","getpgid","getpgrp","getpid","getppid","getpriority","getprotobyname","getprotobynumber","getpt","getpwent","getpwent_r","getpwnam","getpwnam_r","getpwuid","getpwuid_r","getrandom","getresgid","getresuid","getrlimit","getrlimit64","getrusage","getservbyname","getservbyport","getservent","getsid","getsockname","getsockopt","getspent","getspent_r","getspnam","getspnam_r","gettid","gettimeofday","getuid","getutxent","getutxid","getutxline","getxattr","gid","gid","gid_t","gl_flags","gl_flags","gl_offs","gl_offs","gl_pathc","gl_pathc","gl_pathv","gl_pathv","glob","glob64","glob64_t","glob_t","globfree","globfree64","gmtime","gmtime_r","gnu_basename","gnu_get_libc_release","gnu_get_libc_version","gr_gid","gr_mem","gr_name","gr_passwd","grantpt","greg_t","gregs","group","group","grouping","gs","gs_base","h_addr_list","h_addrtype","h_aliases","h_length","h_name","ha","has_arg","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hasmntopt","hblkhd","hblkhd","hblks","hblks","headroom","headroom","hostent","hstrerror","hwtstamp_config","i387","iconv","iconv_close","iconv_open","iconv_t","id","id","id","id_t","idtype_t","if_freenameindex","if_index","if_indextoname","if_name","if_nameindex","if_nameindex","if_nametoindex","ifa_addr","ifa_data","ifa_flags","ifa_ifu","ifa_name","ifa_netmask","ifa_next","ifaddrs","ifc_ifcu","ifc_len","ifconf","ifcu_buf","ifcu_req","ifr6_addr","ifr6_ifindex","ifr6_prefixlen","ifr_ifru","ifr_name","ifreq","ifru_addr","ifru_broadaddr","ifru_data","ifru_dstaddr","ifru_flags","ifru_hwaddr","ifru_ifindex","ifru_map","ifru_metric","ifru_mtu","ifru_netmask","ifru_newname","ifru_slave","imr_address","imr_ifindex","imr_interface","imr_interface","imr_multiaddr","imr_multiaddr","imr_multiaddr","imr_sourceaddr","in6_addr","in6_ifreq","in6_pktinfo","in6_rtmsg","in_addr","in_addr_t","in_pktinfo","in_port_t","index","info","info","info","initgroups","ino64_t","ino_t","inotify_add_watch","inotify_event","inotify_init","inotify_init1","inotify_rm_watch","input_absinfo","input_event","input_id","input_keymap_entry","input_mask","instruction_pointer","instruction_pointer","int16_t","int32_t","int64_t","int8_t","int_curr_symbol","int_frac_digits","int_n_cs_precedes","int_n_sep_by_space","int_n_sign_posn","int_p_cs_precedes","int_p_sep_by_space","int_p_sign_posn","interval","intmax_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","intptr_t","ioctl","ioperm","iopl","iov_base","iov_len","iovec","ip","ip_mreq","ip_mreq_source","ip_mreqn","ipc_perm","ipi6_addr","ipi6_ifindex","ipi_addr","ipi_ifindex","ipi_spec_dst","ipv6_mreq","ipv6mr_interface","ipv6mr_multiaddr","irq","is_error","isalnum","isalpha","isatty","isblank","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","it_interval","it_interval","it_value","it_value","itimerspec","itimerval","iv","iv","iv","iv","ivlen","j1939","j1939_filter","jf","jitcnt","jitter","jrand48","jt","k","keepcost","keepcost","key","key","key","key_t","keycode","kill","killpg","l_len","l_len","l_linger","l_onoff","l_pid","l_pid","l_start","l_start","l_type","l_type","l_whence","l_whence","labs","lchown","lcong48","lconv","left_coeff","left_saturation","len","len","len","len","len","len","len","len","length","level","lgetxattr","linger","link","linkat","lio_listio","listen","listxattr","llistxattr","loads","locale_t","localeconv","localtime","localtime_r","lockf","loff_t","login_tty","lrand48","lremovexattr","lseek","lseek64","lsetxattr","lstat","lstat64","lutimes","machine","madvise","magic","magnitude","major","makecontext","makedev","mallinfo","mallinfo","mallinfo2","mallinfo2","malloc","malloc_info","malloc_trim","malloc_usable_size","mallopt","mask","mask","max_align_t","maxerror","maxerror","maximum","mcontext_t","mem_end","mem_start","mem_unit","memalign","memchr","memcmp","memcpy","memfd_create","memmem","memmove","memrchr","memset","metadata_len","mincore","minimum","minor","mkdir","mkdirat","mkdtemp","mkfifo","mkfifoat","mknod","mknodat","mkostemp","mkostemps","mkstemp","mkstemps","mktime","mlock","mlock2","mlockall","mmap","mmap64","mmsghdr","mnt_dir","mnt_freq","mnt_fsname","mnt_opts","mnt_passno","mnt_type","mntent","mode","mode","mode_t","modes","modtime","mon_decimal_point","mon_grouping","mon_thousands_sep","mount","mprotect","mq_attr","mq_close","mq_curmsgs","mq_flags","mq_getattr","mq_maxmsg","mq_msgsize","mq_open","mq_receive","mq_send","mq_setattr","mq_timedreceive","mq_timedsend","mq_unlink","mqd_t","mr_address","mr_alen","mr_ifindex","mr_type","mrand48","mremap","msg","msg_control","msg_controllen","msg_ctime","msg_flags","msg_hdr","msg_iov","msg_iovlen","msg_len","msg_lrpid","msg_lspid","msg_name","msg_namelen","msg_perm","msg_qbytes","msg_qnum","msg_rtime","msg_stime","msgctl","msgget","msghdr","msginfo","msglen_t","msgmap","msgmax","msgmnb","msgmni","msgpool","msgqnum_t","msgrcv","msgseg","msgsnd","msgssz","msgtql","msqid_ds","msync","munlock","munlockall","munmap","mxcr_mask","mxcr_mask","mxcsr","mxcsr","n_cs_precedes","n_sep_by_space","n_sign_posn","name","name","name","name","name","name_mask","name_t","nanosleep","negative_sign","newlocale","nfds_t","nice","nl_family","nl_groups","nl_item","nl_langinfo","nl_langinfo_l","nl_mmap_hdr","nl_mmap_req","nl_pid","nl_pktinfo","nla_len","nla_type","nlattr","nlink_t","nlmsg_flags","nlmsg_len","nlmsg_pid","nlmsg_seq","nlmsg_type","nlmsgerr","nlmsghdr","nm_block_nr","nm_block_size","nm_frame_nr","nm_frame_size","nm_gid","nm_group","nm_len","nm_pid","nm_status","nm_uid","nodename","nr","nr","nr","nr","nrand48","ntp_adjtime","ntp_gettime","ntptimeval","nxt_assoc_id","nxt_flags","nxt_length","nxt_ppid","nxt_sid","off","off64_t","off_t","offset","offset","old","op","open","open64","open_how","open_memstream","open_wmemstream","openat","openat64","opendir","openlog","openpty","option","options","ordblks","ordblks","orig_rax","p_aliases","p_align","p_align","p_cs_precedes","p_filesz","p_filesz","p_flags","p_flags","p_memsz","p_memsz","p_name","p_offset","p_offset","p_paddr","p_paddr","p_proto","p_sep_by_space","p_sign_posn","p_type","p_type","p_vaddr","p_vaddr","packet_mreq","pad","pad","pad","parent_tid","passwd","pathconf","pause","pclose","period","perror","personality","pgn","pgn","pgn_mask","pgn_t","phase","pid","pid","pid_t","pidfd","pipe","pipe2","poll","pollfd","popen","port","positive_sign","posix_basename","posix_fadvise","posix_fadvise64","posix_fallocate","posix_fallocate64","posix_madvise","posix_memalign","posix_openpt","posix_spawn","posix_spawn_file_actions_addchdir_np","posix_spawn_file_actions_addclose","posix_spawn_file_actions_addclosefrom_np","posix_spawn_file_actions_adddup2","posix_spawn_file_actions_addfchdir_np","posix_spawn_file_actions_addopen","posix_spawn_file_actions_addtcsetpgrp_np","posix_spawn_file_actions_destroy","posix_spawn_file_actions_init","posix_spawn_file_actions_t","posix_spawnattr_destroy","posix_spawnattr_getflags","posix_spawnattr_getpgroup","posix_spawnattr_getschedparam","posix_spawnattr_getschedpolicy","posix_spawnattr_getsigdefault","posix_spawnattr_getsigmask","posix_spawnattr_init","posix_spawnattr_setflags","posix_spawnattr_setpgroup","posix_spawnattr_setschedparam","posix_spawnattr_setschedpolicy","posix_spawnattr_setsigdefault","posix_spawnattr_setsigmask","posix_spawnattr_t","posix_spawnp","ppoll","ppsfreq","pr_policy","pr_value","prctl","pread","pread64","preadv","preadv2","preadv64","preadv64v2","precision","printf","prio","priority_t","prlimit","prlimit64","process_vm_readv","process_vm_writev","procs","producer","producer","product","protoent","pselect","pthread_atfork","pthread_attr_destroy","pthread_attr_getaffinity_np","pthread_attr_getguardsize","pthread_attr_getinheritsched","pthread_attr_getschedparam","pthread_attr_getschedpolicy","pthread_attr_getstack","pthread_attr_getstacksize","pthread_attr_init","pthread_attr_setaffinity_np","pthread_attr_setdetachstate","pthread_attr_setguardsize","pthread_attr_setinheritsched","pthread_attr_setschedparam","pthread_attr_setschedpolicy","pthread_attr_setstacksize","pthread_attr_t","pthread_barrier_destroy","pthread_barrier_init","pthread_barrier_t","pthread_barrier_wait","pthread_barrierattr_destroy","pthread_barrierattr_getpshared","pthread_barrierattr_init","pthread_barrierattr_setpshared","pthread_barrierattr_t","pthread_cancel","pthread_cond_broadcast","pthread_cond_destroy","pthread_cond_init","pthread_cond_signal","pthread_cond_t","pthread_cond_timedwait","pthread_cond_wait","pthread_condattr_destroy","pthread_condattr_getclock","pthread_condattr_getpshared","pthread_condattr_init","pthread_condattr_setclock","pthread_condattr_setpshared","pthread_condattr_t","pthread_create","pthread_detach","pthread_exit","pthread_getaffinity_np","pthread_getattr_np","pthread_getcpuclockid","pthread_getname_np","pthread_getschedparam","pthread_getspecific","pthread_join","pthread_key_create","pthread_key_delete","pthread_key_t","pthread_kill","pthread_mutex_consistent","pthread_mutex_destroy","pthread_mutex_init","pthread_mutex_lock","pthread_mutex_t","pthread_mutex_timedlock","pthread_mutex_trylock","pthread_mutex_unlock","pthread_mutexattr_destroy","pthread_mutexattr_getprotocol","pthread_mutexattr_getpshared","pthread_mutexattr_getrobust","pthread_mutexattr_init","pthread_mutexattr_setprotocol","pthread_mutexattr_setpshared","pthread_mutexattr_setrobust","pthread_mutexattr_settype","pthread_mutexattr_t","pthread_once","pthread_once_t","pthread_rwlock_destroy","pthread_rwlock_init","pthread_rwlock_rdlock","pthread_rwlock_t","pthread_rwlock_tryrdlock","pthread_rwlock_trywrlock","pthread_rwlock_unlock","pthread_rwlock_wrlock","pthread_rwlockattr_destroy","pthread_rwlockattr_getkind_np","pthread_rwlockattr_getpshared","pthread_rwlockattr_init","pthread_rwlockattr_setkind_np","pthread_rwlockattr_setpshared","pthread_rwlockattr_t","pthread_self","pthread_setaffinity_np","pthread_setname_np","pthread_setschedparam","pthread_setschedprio","pthread_setspecific","pthread_sigmask","pthread_sigqueue","pthread_spin_destroy","pthread_spin_init","pthread_spin_lock","pthread_spin_trylock","pthread_spin_unlock","pthread_spinlock_t","pthread_t","ptrace","ptrace_peeksiginfo_args","ptrace_rseq_configuration","ptrace_syscall_info","ptrdiff_t","ptsname","ptsname_r","putchar","putchar_unlocked","putenv","putgrent","putpwent","puts","pututxline","pw_dir","pw_gecos","pw_gid","pw_name","pw_passwd","pw_shell","pw_uid","pwrite","pwrite64","pwritev","pwritev2","pwritev64","pwritev64v2","qsort","qsort_r","quotactl","r10","r11","r12","r13","r14","r15","r8","r9","raise","rand","rax","rbp","rbx","rcv_assoc_id","rcv_context","rcv_cumtsn","rcv_flags","rcv_ppid","rcv_sid","rcv_ssn","rcv_tsn","rcx","rdi","rdp","rdp","rdx","read","readahead","readdir","readdir64","readdir64_r","readdir_r","readlink","readlinkat","readv","realloc","reallocarray","realpath","reboot","rec_seq","rec_seq","rec_seq","recv","recvfrom","recvmmsg","recvmsg","regcomp","regerror","regex_t","regexec","regfree","regmatch_t","regoff_t","regs","release","remap_file_pages","remove","removexattr","rename","renameat","renameat2","replay","req","request_id","request_id","res_init","reserved","reserved","resolution","resolve","response","ret_data","retval","retval","revents","rewind","rewinddir","right_coeff","right_saturation","rip","rip","rip","rlim64_t","rlim_cur","rlim_cur","rlim_max","rlim_max","rlim_t","rlimit","rlimit64","rm_eo","rm_so","rmdir","rseq_abi_pointer","rseq_abi_size","rsi","rsp","rt_class","rt_dev","rt_dst","rt_flags","rt_gateway","rt_genmask","rt_irtt","rt_metric","rt_mtu","rt_pad1","rt_pad2","rt_pad3","rt_pad4","rt_tos","rt_window","rtentry","ru_idrss","ru_inblock","ru_isrss","ru_ixrss","ru_majflt","ru_maxrss","ru_minflt","ru_msgrcv","ru_msgsnd","ru_nivcsw","ru_nsignals","ru_nswap","ru_nvcsw","ru_oublock","ru_stime","ru_utime","rusage","rx","rx","rx_dropped","rx_dropped","rx_fill_ring_empty_descs","rx_filter","rx_id","rx_invalid_descs","rx_invalid_descs","rx_ring_full","s6_addr","s_addr","s_aliases","s_name","s_port","s_proto","sa_data","sa_family","sa_family_t","sa_flags","sa_mask","sa_restorer","sa_sigaction","salg_family","salg_feat","salg_mask","salg_name","salg_type","salt","salt","salt","sbrk","scancode","scanf","sched_get_priority_max","sched_get_priority_min","sched_getaffinity","sched_getcpu","sched_getparam","sched_getscheduler","sched_param","sched_priority","sched_rr_get_interval","sched_setaffinity","sched_setparam","sched_setscheduler","sched_yield","sctp_assoc_t","sctp_authinfo","sctp_initmsg","sctp_nxtinfo","sctp_prinfo","sctp_rcvinfo","sctp_sndinfo","sctp_sndrcvinfo","sdt","seccomp","seccomp_data","seccomp_data","seccomp_notif","seccomp_notif_resp","seccomp_notif_sizes","seed48","seekdir","select","sem_close","sem_ctime","sem_destroy","sem_flg","sem_getvalue","sem_init","sem_nsems","sem_num","sem_op","sem_open","sem_otime","sem_perm","sem_post","sem_t","sem_timedwait","sem_trywait","sem_unlink","sem_wait","semaem","sembuf","semctl","semget","semid_ds","seminfo","semmap","semmni","semmns","semmnu","semmsl","semop","semopm","semume","semusz","semvmx","send","sendfile","sendfile64","sendmmsg","sendmsg","sendto","servent","set_tid","set_tid_size","setbuf","setcontext","setdomainname","setegid","setenv","seteuid","setfsgid","setfsuid","setgid","setgrent","setgroups","sethostid","sethostname","setlocale","setlogmask","setmntent","setns","setpgid","setpriority","setpwent","setregid","setresgid","setresuid","setreuid","setrlimit","setrlimit64","setservent","setsid","setsockopt","setspent","settimeofday","setuid","setutxent","setvbuf","setxattr","sgetspent_r","sh_addr","sh_addr","sh_addralign","sh_addralign","sh_entsize","sh_entsize","sh_flags","sh_flags","sh_info","sh_info","sh_link","sh_link","sh_name","sh_name","sh_offset","sh_offset","sh_size","sh_size","sh_type","sh_type","sharedram","shift","shm_atime","shm_cpid","shm_ctime","shm_dtime","shm_lpid","shm_nattch","shm_open","shm_perm","shm_segsz","shm_unlink","shmat","shmatt_t","shmctl","shmdt","shmget","shmid_ds","shutdown","si_addr","si_code","si_errno","si_pid","si_signo","si_status","si_stime","si_uid","si_utime","si_value","sigaction","sigaction","sigaddset","sigaltstack","sigdelset","sigemptyset","sigev_notify","sigev_notify_thread_id","sigev_signo","sigev_value","sigevent","sigfillset","sighandler_t","siginfo_t","sigismember","signal","signal","signalfd","signalfd_siginfo","signature","significand","sigpending","sigprocmask","sigset_t","sigsuspend","sigtimedwait","sigval","sigwait","sigwaitinfo","sin6_addr","sin6_family","sin6_flowinfo","sin6_port","sin6_scope_id","sin_addr","sin_family","sin_port","sin_zero","sinfo_assoc_id","sinfo_context","sinfo_cumtsn","sinfo_flags","sinfo_ppid","sinfo_ssn","sinfo_stream","sinfo_timetolive","sinfo_tsn","sinit_max_attempts","sinit_max_init_timeo","sinit_max_instreams","sinit_num_ostreams","sival_ptr","size_t","sleep","sll_addr","sll_family","sll_halen","sll_hatype","sll_ifindex","sll_pkttype","sll_protocol","smblks","smblks","snd_assoc_id","snd_context","snd_flags","snd_ppid","snd_sid","snprintf","sock_extended_err","sock_filter","sock_fprog","sock_txtime","sockaddr","sockaddr_alg","sockaddr_can","sockaddr_in","sockaddr_in6","sockaddr_ll","sockaddr_nl","sockaddr_storage","sockaddr_un","sockaddr_vm","sockaddr_xdp","socket","socketpair","socklen_t","sp_expire","sp_flag","sp_inact","sp_lstchg","sp_max","sp_min","sp_namp","sp_pwdp","sp_warn","speed_t","splice","sprintf","spwd","srand","srand48","src_fd","src_length","src_offset","ss","ss_family","ss_flags","ss_size","ss_sp","sscanf","ssi_addr","ssi_addr_lsb","ssi_arch","ssi_band","ssi_call_addr","ssi_code","ssi_errno","ssi_fd","ssi_int","ssi_overrun","ssi_pid","ssi_ptr","ssi_signo","ssi_status","ssi_stime","ssi_syscall","ssi_tid","ssi_trapno","ssi_uid","ssi_utime","ssize_t","st_atime","st_atime","st_atime_nsec","st_atime_nsec","st_blksize","st_blksize","st_blocks","st_blocks","st_ctime","st_ctime","st_ctime_nsec","st_ctime_nsec","st_dev","st_dev","st_gid","st_gid","st_info","st_info","st_ino","st_ino","st_mode","st_mode","st_mtime","st_mtime","st_mtime_nsec","st_mtime_nsec","st_name","st_name","st_nlink","st_nlink","st_other","st_other","st_rdev","st_rdev","st_shndx","st_shndx","st_size","st_size","st_size","st_size","st_space","st_uid","st_uid","st_value","st_value","stabil","stack","stack_pointer","stack_size","stack_t","stamp","start_code","start_level","start_stack","stat","stat","stat64","stat64","statfs","statfs","statfs64","statfs64","status","statvfs","statvfs","statvfs64","statvfs64","statx","statx","statx_timestamp","stbcnt","stpcpy","stpncpy","strcasecmp","strcasestr","strcat","strchr","strchrnul","strcmp","strcoll","strcpy","strcspn","strdup","strerror","strerror_r","strftime","strlen","strncasecmp","strncat","strncmp","strncpy","strndup","strnlen","strong_magnitude","strpbrk","strptime","strrchr","strsignal","strspn","strstr","strtod","strtof","strtok","strtok_r","strtol","strtoll","strtoul","strtoull","strxfrm","stx_atime","stx_attributes","stx_attributes_mask","stx_blksize","stx_blocks","stx_btime","stx_ctime","stx_dev_major","stx_dev_minor","stx_dio_mem_align","stx_dio_offset_align","stx_gid","stx_ino","stx_mask","stx_mnt_id","stx_mode","stx_mtime","stx_nlink","stx_rdev_major","stx_rdev_minor","stx_size","stx_uid","sun_family","sun_path","suseconds_t","sval","svm_cid","svm_family","svm_port","svm_reserved1","svm_zero","swapcontext","swapoff","swapon","swd","swd","sxdp_family","sxdp_flags","sxdp_ifindex","sxdp_queue_id","sxdp_shared_umem_fd","symlink","symlinkat","sync","sync_file_range","syncfs","syscall","sysconf","sysctl","sysinfo","sysinfo","syslog","sysname","system","tai","tai","tcdrain","tcflag_t","tcflow","tcflush","tcgetattr","tcgetpgrp","tcgetsid","tcsendbreak","tcsetattr","tcsetpgrp","tee","telldir","termios","termios2","thousands_sep","tick","time","time","time","time","time_t","timegm","timer_create","timer_delete","timer_getoverrun","timer_gettime","timer_settime","timer_t","timerfd_create","timerfd_gettime","timerfd_settime","times","timespec","timeval","timex","timezone","tls","tls12_crypto_info_aes_gcm_128","tls12_crypto_info_aes_gcm_256","tls12_crypto_info_chacha20_poly1305","tls_crypto_info","tm","tm_gmtoff","tm_hour","tm_isdst","tm_mday","tm_min","tm_mon","tm_sec","tm_wday","tm_yday","tm_year","tm_zone","tmpfile","tmpfile64","tmpnam","tms","tms_cstime","tms_cutime","tms_stime","tms_utime","tolerance","tolower","totalhigh","totalram","totalswap","toupper","tp","trigger","truncate","truncate64","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttyname","ttyname_r","tv_nsec","tv_nsec","tv_sec","tv_sec","tv_sec","tv_sec","tv_usec","tv_usec","tx","tx","tx_id","tx_invalid_descs","tx_invalid_descs","tx_ring_empty_descs","tx_type","type_","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u","u","u64","u_ar0","u_comm","u_debugreg","u_dsize","u_fpstate","u_fpvalid","u_ssize","u_tsize","uc_flags","uc_link","uc_mcontext","uc_sigmask","uc_stack","ucontext_t","ucred","uid","uid","uid_t","uinput_abs_setup","uinput_ff_erase","uinput_ff_upload","uinput_setup","uinput_user_dev","uint16_t","uint32_t","uint64_t","uint8_t","uintmax_t","uintptr_t","umask","umount","umount2","uname","ungetc","unlink","unlinkat","unlockpt","unsetenv","unshare","uordblks","uordblks","updated","uptime","useconds_t","uselocale","user","user_fpregs_struct","user_regs_struct","usleep","usmblks","usmblks","ut_addr_v6","ut_exit","ut_host","ut_id","ut_line","ut_pid","ut_session","ut_tv","ut_type","ut_user","utimbuf","utime","utimensat","utimes","utmpname","utmpx","utmpxname","utsname","val","value","value","vendor","vers","version","version","version","version","vfork","vhangup","vmsplice","wait","wait4","waitid","waitpid","waveform","wchar_t","wcslen","wcstombs","wd","weak_magnitude","winsize","wmemchr","write","writev","ws_col","ws_row","ws_xpixel","ws_ypixel","xdp_desc","xdp_mmap_offsets","xdp_mmap_offsets_v1","xdp_options","xdp_ring_offset","xdp_ring_offset_v1","xdp_statistics","xdp_statistics_v1","xdp_umem_reg","xdp_umem_reg_v1","xmm_space"],"q":[[0,"libc"],[9698,"core::fmt"],[9699,"core::fmt"],[9700,"core::hash"],[9701,"core::any"]],"dmaximum number of services provided on the same listening …uth Header","","IP Payload Comp. Protocol","DCCP","IP6 destination option","exterior gateway protocol","encapsulation header","IP6 Encap Sec. Payload","Ethernet-within-IPv6 encapsulation.","IP6 fragmentation header","General Routing Encap.","Hop-by-hop option header","","","xns idp","group mgmt protocol","","for compatibility","","","","","Multipath TCP","","IP6 no next header","Protocol indep. multicast","pup","raw IP packet","IP6 routing header","resource reservation","SCTP","","tp-4 w/ class negotiationhe <code>PartialEq</code>, <code>Eq</code> and <code>Hash</code> implementations of thisquivalent to C’s <code>void</code> type when used as a pointereturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","GNU version of <code>basename(3)</code>, defined in <code>string.h</codeinterface name, e.g. “en0”","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeversion of <code>basename(3)</code>, defined in <code>libgen.h</codehe 64-bit libc on Solaris and illumos only has readdir_r. …if":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,3,3],4],0,0,0,0,0,0,0,0,0,0,[2,2],0,0,0,0,0,0,0,0,[2,2],0,[[1,2],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,6],[7,5],[8,8],[[7,5],5],[8,8],0,0,0,[9,10],[[11,12],13],[12,9],[[11,12],9],[[12,12],14],[[11,12],14],[[11,12],13],0,[12,13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,15],13],[[9,15],14],[[9,15],13],0,[15,13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,9,9,9],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[16,16],0,0,[16,16],0,0,0,0,0,0,0,0,[16,16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[16,16],0,0,0,0,0,0,0,[16,16],0,0,0,0,0,0,0,0,0,0,0,[16,16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[17,17,17],17],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,9],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[17,17],0,0,0,0,0,[17,14],0,0,0,0,0,0,0,0,0,0,[16,16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,9],[9,9],[9,14],[9,14],0,0,0,0,0,0,0,[[9,9],13],[9,14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[18,19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,14],0,[9,9],0,[9,14],[9,14],[9,14],[9,14],0,0,0,0,[9,9],[9,9],0,[[9,9],9],0,[9,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[19,19],[41,41],[42,42],[43,43],[44,44],[15,15],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[12,12],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[100,100],[101,101],[102,102],[103,103],[104,104],[105,105],[106,106],[107,107],[108,108],[18,18],[109,109],[110,110],[111,111],[112,112],[4,4],[113,113],[114,114],[115,115],[116,116],[117,117],[118,118],[119,119],[120,120],[121,121],[122,122],[123,123],[124,124],[125,125],[126,126],[127,127],[128,128],[129,129],[130,130],[131,131],[132,132],[133,133],[134,134],[135,135],[136,136],[137,137],[138,138],[139,139],[140,140],[141,141],[142,142],[143,143],[144,144],[145,145],[146,146],[147,147],[148,148],[149,149],[150,150],[151,151],[152,152],[153,153],[154,154],[155,155],[7,7],[5,5],[156,156],[157,157],[158,158],[159,159],[160,160],[161,161],[162,162],[163,163],[164,164],[165,165],[166,166],[167,167],[168,168],[169,169],[170,170],[171,171],[172,172],[173,173],[174,174],[175,175],[176,176],[177,177],[178,178],[179,179],[180,180],[181,181],[182,182],[183,183],[184,184],[185,185],[186,186],[187,187],[188,188],[189,189],[190,190],[191,191],[192,192],[193,193],[194,194],[195,195],[196,196],[197,197],[198,198],[199,199],[200,200],[201,201],[202,202],[203,203],[204,204],[205,205],[206,206],[207,207],[208,208],[209,209],[210,210],[211,211],[212,212],[213,213],[214,214],[215,215],[216,216],[217,217],[218,218],[219,219],[220,220],[221,221],[222,222],[223,223],[224,224],[225,225],[226,226],[227,227],[228,228],[229,229],[230,230],[231,231],[232,232],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[20,20],14],[[21,21],14],[[22,22],14],[[23,23],14],[[24,24],14],[[25,25],14],[[26,26],14],[[27,27],14],[[28,28],14],[[29,29],14],[[30,30],14],[[31,31],14],[[32,32],14],[[33,33],14],[[34,34],14],[[35,35],14],[[36,36],14],[[37,37],14],[[38,38],14],[[39,39],14],[[40,40],14],[[19,19],14],[[41,41],14],[[42,42],14],[[43,43],14],[[44,44],14],[[15,15],14],[[45,45],14],[[46,46],14],[[47,47],14],[[48,48],14],[[49,49],14],[[50,50],14],[[51,51],14],[[52,52],14],[[53,53],14],[[54,54],14],[[55,55],14],[[56,56],14],[[57,57],14],[[58,58],14],[[59,59],14],[[60,60],14],[[61,61],14],[[62,62],14],[[63,63],14],[[64,64],14],[[65,65],14],[[66,66],14],[[67,67],14],[[68,68],14],[[12,12],14],[[69,69],14],[[70,70],14],[[71,71],14],[[72,72],14],[[73,73],14],[[74,74],14],[[75,75],14],[[76,76],14],[[77,77],14],[[78,78],14],[[79,79],14],[[80,80],14],[[81,81],14],[[82,82],14],[[83,83],14],[[84,84],14],[[85,85],14],[[86,86],14],[[87,87],14],[[88,88],14],[[89,89],14],[[90,90],14],[[91,91],14],[[92,92],14],[[93,93],14],[[94,94],14],[[95,95],14],[[96,96],14],[[97,97],14],[[98,98],14],[[99,99],14],[[100,100],14],[[101,101],14],[[102,102],14],[[103,103],14],[[104,104],14],[[105,105],14],[[106,106],14],[[107,107],14],[[108,108],14],[[18,18],14],[[109,109],14],[[110,110],14],[[111,111],14],[[112,112],14],[[4,4],14],[[113,113],14],[[114,114],14],[[115,115],14],[[116,116],14],[[117,117],14],[[118,118],14],[[119,119],14],[[120,120],14],[[121,121],14],[[122,122],14],[[123,123],14],[[124,124],14],[[125,125],14],[[126,126],14],[[127,127],14],[[128,128],14],[[129,129],14],[[130,130],14],[[131,131],14],[[132,132],14],[[133,133],14],[[134,134],14],[[135,135],14],[[136,136],14],[[137,137],14],[[138,138],14],[[139,139],14],[[140,140],14],[[145,145],14],[[146,146],14],[[150,150],14],[[151,151],14],[[152,152],14],[[153,153],14],[[154,154],14],[[155,155],14],[[7,7],14],[[5,5],14],[[156,156],14],[[157,157],14],[[158,158],14],[[159,159],14],[[160,160],14],[[161,161],14],[[162,162],14],[[163,163],14],[[164,164],14],[[165,165],14],[[166,166],14],[[167,167],14],[[168,168],14],[[169,169],14],[[170,170],14],[[171,171],14],[[172,172],14],[[173,173],14],[[174,174],14],[[175,175],14],[[176,176],14],[[177,177],14],[[178,178],14],[[179,179],14],[[180,180],14],[[181,181],14],[[182,182],14],[[183,183],14],[[184,184],14],[[185,185],14],[[186,186],14],[[187,187],14],[[188,188],14],[[189,189],14],[[190,190],14],[[191,191],14],[[192,192],14],[[193,193],14],[[194,194],14],[[195,195],14],[[196,196],14],[[197,197],14],[[198,198],14],[[199,199],14],[[200,200],14],[[201,201],14],[[202,202],14],[[203,203],14],[[204,204],14],[[205,205],14],[[206,206],14],[[207,207],14],[[208,208],14],[[209,209],14],[[210,210],14],[[211,211],14],[[212,212],14],[[213,213],14],[[214,214],14],[[216,216],14],[[217,217],14],[[218,218],14],[[219,219],14],[[220,220],14],[[221,221],14],[[222,222],14],[[223,223],14],[[224,224],14],[[225,225],14],[[226,226],14],[[227,227],14],[[231,231],14],[[232,232],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[233,234],235],[[20,234],235],[[21,234],235],[[22,234],235],[[23,234],235],[[24,234],235],[[25,234],235],[[26,234],235],[[27,234],235],[[28,234],235],[[29,234],235],[[30,234],235],[[31,234],235],[[32,234],235],[[33,234],235],[[34,234],235],[[35,234],235],[[36,234],235],[[236,234],235],[[237,234],235],[[238,234],235],[[37,234],235],[[38,234],235],[[39,234],235],[[40,234],235],[[19,234],235],[[41,234],235],[[42,234],235],[[43,234],235],[[44,234],235],[[15,234],235],[[45,234],235],[[46,234],235],[[47,234],235],[[48,234],235],[[49,234],235],[[50,234],235],[[51,234],235],[[52,234],235],[[53,234],235],[[54,234],235],[[55,234],235],[[56,234],235],[[57,234],235],[[58,234],235],[[59,234],235],[[60,234],235],[[239,234],[[241,[13,240]]]],[[242,234],235],[[61,234],235],[[62,234],235],[[63,234],235],[[64,234],235],[[65,234],235],[[66,234],235],[[67,234],235],[[68,234],235],[[12,234],235],[[69,234],235],[[70,234],235],[[71,234],235],[[72,234],235],[[73,234],235],[[74,234],235],[[75,234],235],[[76,234],235],[[77,234],235],[[78,234],235],[[79,234],235],[[80,234],235],[[81,234],235],[[82,234],235],[[83,234],235],[[84,234],235],[[85,234],235],[[86,234],235],[[87,234],235],[[88,234],235],[[89,234],235],[[90,234],235],[[91,234],235],[[92,234],235],[[93,234],235],[[94,234],235],[[95,234],235],[[96,234],235],[[97,234],235],[[98,234],235],[[99,234],235],[[100,234],235],[[101,234],235],[[102,234],235],[[103,234],235],[[104,234],235],[[105,234],235],[[106,234],235],[[107,234],235],[[108,234],235],[[18,234],235],[[109,234],235],[[110,234],235],[[111,234],235],[[112,234],235],[[4,234],235],[[113,234],235],[[114,234],235],[[115,234],235],[[116,234],235],[[117,234],235],[[118,234],235],[[119,234],235],[[120,234],235],[[121,234],235],[[122,234],235],[[123,234],235],[[124,234],235],[[125,234],235],[[126,234],235],[[127,234],235],[[128,234],235],[[129,234],235],[[130,234],235],[[131,234],235],[[132,234],235],[[133,234],235],[[134,234],235],[[135,234],235],[[136,234],235],[[137,234],235],[[138,234],235],[[139,234],235],[[140,234],235],[[141,234],235],[[142,234],235],[[143,234],235],[[144,234],235],[[145,234],235],[[146,234],235],[[150,234],235],[[151,234],235],[[152,234],235],[[153,234],235],[[154,234],235],[[155,234],235],[[7,234],235],[[5,234],235],[[156,234],235],[[157,234],235],[[158,234],235],[[159,234],235],[[160,234],235],[[161,234],235],[[162,234],235],[[163,234],235],[[164,234],235],[[165,234],235],[[166,234],235],[[167,234],235],[[168,234],235],[[169,234],235],[[170,234],235],[[171,234],235],[[172,234],235],[[173,234],235],[[174,234],235],[[175,234],235],[[176,234],235],[[177,234],235],[[178,234],235],[[179,234],235],[[180,234],235],[[181,234],235],[[182,234],235],[[183,234],235],[[184,234],235],[[185,234],235],[[186,234],235],[[187,234],235],[[188,234],235],[[189,234],235],[[190,234],235],[[191,234],235],[[192,234],235],[[193,234],235],[[194,234],235],[[195,234],235],[[196,234],235],[[197,234],235],[[198,234],235],[[199,234],235],[[200,234],235],[[201,234],235],[[202,234],235],[[203,234],235],[[204,234],235],[[205,234],235],[[206,234],235],[[207,234],235],[[208,234],235],[[209,234],235],[[210,234],235],[[211,234],235],[[212,234],235],[[213,234],235],[[214,234],235],[[216,234],235],[[217,234],235],[[218,234],235],[[219,234],235],[[220,234],235],[[221,234],235],[[222,234],235],[[223,234],235],[[224,234],235],[[225,234],235],[[226,234],235],[[227,234],235],[[231,234],235],[[232,234],235],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[20,-1],13,243],[[21,-1],13,243],[[22,-1],13,243],[[23,-1],13,243],[[24,-1],13,243],[[25,-1],13,243],[[26,-1],13,243],[[27,-1],13,243],[[28,-1],13,243],[[29,-1],13,243],[[30,-1],13,243],[[31,-1],13,243],[[32,-1],13,243],[[33,-1],13,243],[[34,-1],13,243],[[35,-1],13,243],[[36,-1],13,243],[[37,-1],13,243],[[38,-1],13,243],[[39,-1],13,243],[[40,-1],13,243],[[19,-1],13,243],[[41,-1],13,243],[[42,-1],13,243],[[43,-1],13,243],[[44,-1],13,243],[[15,-1],13,243],[[45,-1],13,243],[[46,-1],13,243],[[47,-1],13,243],[[48,-1],13,243],[[49,-1],13,243],[[50,-1],13,243],[[51,-1],13,243],[[52,-1],13,243],[[53,-1],13,243],[[54,-1],13,243],[[55,-1],13,243],[[56,-1],13,243],[[57,-1],13,243],[[58,-1],13,243],[[59,-1],13,243],[[60,-1],13,243],[[61,-1],13,243],[[62,-1],13,243],[[63,-1],13,243],[[64,-1],13,243],[[65,-1],13,243],[[66,-1],13,243],[[67,-1],13,243],[[68,-1],13,243],[[12,-1],13,243],[[69,-1],13,243],[[70,-1],13,243],[[71,-1],13,243],[[72,-1],13,243],[[73,-1],13,243],[[74,-1],13,243],[[75,-1],13,243],[[76,-1],13,243],[[77,-1],13,243],[[78,-1],13,243],[[79,-1],13,243],[[80,-1],13,243],[[81,-1],13,243],[[82,-1],13,243],[[83,-1],13,243],[[84,-1],13,243],[[85,-1],13,243],[[86,-1],13,243],[[87,-1],13,243],[[88,-1],13,243],[[89,-1],13,243],[[90,-1],13,243],[[91,-1],13,243],[[92,-1],13,243],[[93,-1],13,243],[[94,-1],13,243],[[95,-1],13,243],[[96,-1],13,243],[[97,-1],13,243],[[98,-1],13,243],[[99,-1],13,243],[[100,-1],13,243],[[101,-1],13,243],[[102,-1],13,243],[[103,-1],13,243],[[104,-1],13,243],[[105,-1],13,243],[[106,-1],13,243],[[107,-1],13,243],[[108,-1],13,243],[[18,-1],13,243],[[109,-1],13,243],[[110,-1],13,243],[[111,-1],13,243],[[112,-1],13,243],[[4,-1],13,243],[[113,-1],13,243],[[114,-1],13,243],[[115,-1],13,243],[[116,-1],13,243],[[117,-1],13,243],[[118,-1],13,243],[[119,-1],13,243],[[120,-1],13,243],[[121,-1],13,243],[[122,-1],13,243],[[123,-1],13,243],[[124,-1],13,243],[[125,-1],13,243],[[126,-1],13,243],[[127,-1],13,243],[[128,-1],13,243],[[129,-1],13,243],[[130,-1],13,243],[[131,-1],13,243],[[132,-1],13,243],[[133,-1],13,243],[[134,-1],13,243],[[135,-1],13,243],[[136,-1],13,243],[[137,-1],13,243],[[138,-1],13,243],[[139,-1],13,243],[[140,-1],13,243],[[145,-1],13,243],[[146,-1],13,243],[[150,-1],13,243],[[151,-1],13,243],[[152,-1],13,243],[[153,-1],13,243],[[154,-1],13,243],[[155,-1],13,243],[[7,-1],13,243],[[5,-1],13,243],[[156,-1],13,243],[[157,-1],13,243],[[158,-1],13,243],[[159,-1],13,243],[[160,-1],13,243],[[161,-1],13,243],[[162,-1],13,243],[[163,-1],13,243],[[164,-1],13,243],[[165,-1],13,243],[[166,-1],13,243],[[167,-1],13,243],[[168,-1],13,243],[[169,-1],13,243],[[170,-1],13,243],[[171,-1],13,243],[[172,-1],13,243],[[173,-1],13,243],[[174,-1],13,243],[[175,-1],13,243],[[176,-1],13,243],[[177,-1],13,243],[[178,-1],13,243],[[179,-1],13,243],[[180,-1],13,243],[[181,-1],13,243],[[182,-1],13,243],[[183,-1],13,243],[[184,-1],13,243],[[185,-1],13,243],[[186,-1],13,243],[[187,-1],13,243],[[188,-1],13,243],[[189,-1],13,243],[[190,-1],13,243],[[191,-1],13,243],[[192,-1],13,243],[[193,-1],13,243],[[194,-1],13,243],[[195,-1],13,243],[[196,-1],13,243],[[197,-1],13,243],[[198,-1],13,243],[[199,-1],13,243],[[200,-1],13,243],[[201,-1],13,243],[[202,-1],13,243],[[203,-1],13,243],[[204,-1],13,243],[[205,-1],13,243],[[206,-1],13,243],[[207,-1],13,243],[[208,-1],13,243],[[209,-1],13,243],[[210,-1],13,243],[[211,-1],13,243],[[212,-1],13,243],[[213,-1],13,243],[[214,-1],13,243],[[216,-1],13,243],[[217,-1],13,243],[[218,-1],13,243],[[219,-1],13,243],[[220,-1],13,243],[[221,-1],13,243],[[222,-1],13,243],[[223,-1],13,243],[[224,-1],13,243],[[225,-1],13,243],[[226,-1],13,243],[[227,-1],13,243],[[231,-1],13,243],[[232,-1],13,243],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[244,8],0,[[8,8],244],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[244,8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[195,239],0,0,[195,245],0,[195,9],[195,246],[195,247],[195,246],[195,32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],[-1,248,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[730,1442,3248,3257,3698,4695,5114,7376,7377,7378,7379,7660,7661,9611,9612,9613,9614,9666],"p":[[8,"__u16",0],[8,"__u32",0],[8,"__u8",0],[5,"sock_filter",0],[5,"cmsghdr",0],[8,"c_uchar",0],[5,"msghdr",0],[8,"c_uint",0],[8,"c_int",0],[8,"size_t",0],[1,"usize"],[5,"cpu_set_t",0],[1,"tuple"],[1,"bool"],[5,"fd_set",0],[1,"u8"],[1,"u32"],[5,"sock_extended_err",0],[5,"sockaddr",0],[5,"group",0],[5,"utimbuf",0],[5,"timeval",0],[5,"timespec",0],[5,"rlimit",0],[5,"rusage",0],[5,"ipv6_mreq",0],[5,"hostent",0],[5,"iovec",0],[5,"pollfd",0],[5,"winsize",0],[5,"linger",0],[5,"sigval",0],[5,"itimerval",0],[5,"tms",0],[5,"servent",0],[5,"protoent",0],[5,"in_addr",0],[5,"ip_mreq",0],[5,"ip_mreqn",0],[5,"ip_mreq_source",0],[5,"sockaddr_in",0],[5,"sockaddr_in6",0],[5,"addrinfo",0],[5,"sockaddr_ll",0],[5,"tm",0],[5,"sched_param",0],[5,"Dl_info",0],[5,"lconv",0],[5,"in_pktinfo",0],[5,"ifaddrs",0],[5,"in6_rtmsg",0],[5,"arpreq",0],[5,"arpreq_old",0],[5,"arphdr",0],[5,"mmsghdr",0],[5,"epoll_event",0],[5,"sockaddr_un",0],[5,"sockaddr_storage",0],[5,"utsname",0],[5,"sigevent",0],[5,"glob_t",0],[5,"passwd",0],[5,"spwd",0],[5,"dqblk",0],[5,"signalfd_siginfo",0],[5,"itimerspec",0],[5,"fsid_t",0],[5,"packet_mreq",0],[5,"if_nameindex",0],[5,"msginfo",0],[5,"sembuf",0],[5,"input_event",0],[5,"input_id",0],[5,"input_absinfo",0],[5,"input_keymap_entry",0],[5,"input_mask",0],[5,"ff_replay",0],[5,"ff_trigger",0],[5,"ff_envelope",0],[5,"ff_constant_effect",0],[5,"ff_ramp_effect",0],[5,"ff_condition_effect",0],[5,"ff_periodic_effect",0],[5,"ff_rumble_effect",0],[5,"ff_effect",0],[5,"uinput_ff_upload",0],[5,"uinput_ff_erase",0],[5,"uinput_abs_setup",0],[5,"dl_phdr_info",0],[5,"Elf32_Ehdr",0],[5,"Elf64_Ehdr",0],[5,"Elf32_Sym",0],[5,"Elf64_Sym",0],[5,"Elf32_Phdr",0],[5,"Elf64_Phdr",0],[5,"Elf32_Shdr",0],[5,"Elf64_Shdr",0],[5,"ucred",0],[5,"mntent",0],[5,"posix_spawn_file_actions_t",0],[5,"posix_spawnattr_t",0],[5,"genlmsghdr",0],[5,"in6_pktinfo",0],[5,"arpd_request",0],[5,"inotify_event",0],[5,"fanotify_response",0],[5,"sockaddr_vm",0],[5,"regmatch_t",0],[5,"__c_anonymous_sockaddr_can_tp",0],[5,"__c_anonymous_sockaddr_can_j1939",0],[5,"can_filter",0],[5,"j1939_filter",0],[5,"sock_fprog",0],[5,"seccomp_data",0],[5,"nlmsghdr",0],[5,"nlmsgerr",0],[5,"nlattr",0],[5,"file_clone_range",0],[5,"__c_anonymous_ifru_map",0],[5,"in6_ifreq",0],[5,"option",0],[5,"sctp_initmsg",0],[5,"sctp_sndrcvinfo",0],[5,"sctp_sndinfo",0],[5,"sctp_rcvinfo",0],[5,"sctp_nxtinfo",0],[5,"sctp_prinfo",0],[5,"sctp_authinfo",0],[5,"rlimit64",0],[5,"tls_crypto_info",0],[5,"tls12_crypto_info_aes_gcm_128",0],[5,"tls12_crypto_info_aes_gcm_256",0],[5,"tls12_crypto_info_chacha20_poly1305",0],[5,"sockaddr_nl",0],[5,"dirent",0],[5,"sockaddr_alg",0],[5,"uinput_setup",0],[5,"uinput_user_dev",0],[5,"af_alg_iv",0],[5,"mq_attr",0],[20,"__c_anonymous_ifr_ifru",0],[5,"ifreq",0],[20,"__c_anonymous_ifc_ifcu",0],[5,"ifconf",0],[5,"hwtstamp_config",0],[5,"dirent64",0],[5,"sock_txtime",0],[20,"__c_anonymous_sockaddr_can_can_addr",0],[5,"sockaddr_can",0],[5,"statx",0],[5,"statx_timestamp",0],[5,"aiocb",0],[5,"__exit_status",0],[5,"__timeval",0],[5,"glob64_t",0],[5,"termios",0],[5,"mallinfo",0],[5,"mallinfo2",0],[5,"nl_pktinfo",0],[5,"nl_mmap_req",0],[5,"nl_mmap_hdr",0],[5,"rtentry",0],[5,"timex",0],[5,"ntptimeval",0],[5,"regex_t",0],[5,"Elf64_Chdr",0],[5,"Elf32_Chdr",0],[5,"seminfo",0],[5,"ptrace_peeksiginfo_args",0],[5,"__c_anonymous_ptrace_syscall_info_entry",0],[5,"__c_anonymous_ptrace_syscall_info_exit",0],[5,"__c_anonymous_ptrace_syscall_info_seccomp",0],[5,"ptrace_syscall_info",0],[5,"sockaddr_xdp",0],[5,"xdp_ring_offset",0],[5,"xdp_mmap_offsets",0],[5,"xdp_ring_offset_v1",0],[5,"xdp_mmap_offsets_v1",0],[5,"xdp_umem_reg",0],[5,"xdp_umem_reg_v1",0],[5,"xdp_statistics",0],[5,"xdp_statistics_v1",0],[5,"xdp_options",0],[5,"xdp_desc",0],[20,"__c_anonymous_ptrace_syscall_info_data",0],[5,"utmpx",0],[5,"sigset_t",0],[5,"sysinfo",0],[5,"msqid_ds",0],[5,"semid_ds",0],[5,"sigaction",0],[5,"statfs",0],[5,"flock",0],[5,"flock64",0],[5,"siginfo_t",0],[5,"stack_t",0],[5,"stat",0],[5,"stat64",0],[5,"statfs64",0],[5,"statvfs64",0],[5,"pthread_attr_t",0],[5,"_libc_fpxreg",0],[5,"_libc_xmmreg",0],[5,"_libc_fpstate",0],[5,"user_regs_struct",0],[5,"user",0],[5,"mcontext_t",0],[5,"ipc_perm",0],[5,"shmid_ds",0],[5,"seccomp_notif_sizes",0],[5,"ptrace_rseq_configuration",0],[5,"user_fpregs_struct",0],[5,"ucontext_t",0],[5,"statvfs",0],[5,"max_align_t",0],[5,"clone_args",0],[5,"sem_t",0],[5,"termios2",0],[5,"pthread_mutexattr_t",0],[5,"pthread_rwlockattr_t",0],[5,"pthread_condattr_t",0],[5,"pthread_barrierattr_t",0],[5,"fanotify_event_metadata",0],[5,"pthread_cond_t",0],[5,"pthread_mutex_t",0],[5,"pthread_rwlock_t",0],[5,"pthread_barrier_t",0],[5,"can_frame",0],[5,"canfd_frame",0],[5,"canxl_frame",0],[5,"open_how",0],[5,"in6_addr",0],[6,"DIR",0],[5,"Formatter",9698],[8,"Result",9698],[6,"FILE",0],[6,"fpos_t",0],[6,"timezone",0],[6,"c_void",0],[5,"Error",9698],[6,"Result",9699],[6,"fpos64_t",0],[10,"Hasher",9700],[8,"dev_t",0],[8,"pid_t",0],[8,"c_long",0],[8,"uid_t",0],[5,"TypeId",9701]],"b":[]}],\
["libloading",{"doc":"A memory-safer wrapper around system dynamic library …","t":"PPPPPPPPGPPPPPPPFPPFNNNNNNCNNNNNNNNNNNNNNNNNNHNNCNNNNNNNNNNNNOOOOOOOOOCCCCCCCCCCCCCCCCCCCCCFSSSSFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["CreateCString","CreateCStringWithTrailing","DlClose","DlCloseUnknown","DlOpen","DlOpenUnknown","DlSym","DlSymUnknown","Error","FreeLibrary","FreeLibraryUnknown","GetModuleHandleExW","GetModuleHandleExWUnknown","GetProcAddress","GetProcAddressUnknown","IncompatibleSize","Library","LoadLibraryW","LoadLibraryWUnknown","Symbol","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","changelog","clone","clone_into","close","deref","fmt","fmt","fmt","fmt","from","from","from","from","from_raw","get","into","into","into","into_raw","library_filename","lift_option","new","os","source","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","desc","desc","desc","source","source","source","source","source","source","r0_3_0","r0_3_1","r0_3_2","r0_3_3","r0_3_4","r0_4_0","r0_4_1","r0_4_2","r0_4_3","r0_5_0","r0_5_1","r0_5_2","r0_6_0","r0_6_1","r0_6_2","r0_6_3","r0_6_4","r0_6_5","r0_6_6","r0_6_7","unix","Library","RTLD_GLOBAL","RTLD_LAZY","RTLD_LOCAL","RTLD_NOW","Symbol","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","close","deref","drop","fmt","fmt","from","from","from","from_raw","get","get_singlethreaded","into","into","into_raw","into_raw","lift_option","new","open","this","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"libloading"],[61,"libloading::Error"],[70,"libloading::changelog"],[90,"libloading::os"],[91,"libloading::os::unix"],[129,"core::result"],[130,"core::fmt"],[131,"core::fmt"],[132,"std::ffi::os_str"],[133,"core::option"],[134,"core::error"],[135,"alloc::string"],[136,"core::any"],[137,"std::os::raw"],[138,"std::os::raw"]],"d":["Could not create a new CString.","Could not create a new CString from bytes with trailing …","The <code>dlclose</code> call failed.","The <code>dlclose</code> call failed and system did not report an error.","The <code>dlopen</code> call failed.","The <code>dlopen</code> call failed and system did not report an error.","The <code>dlsym</code> call failed.","The <code>dlsym</code> call failed and system did not report an error.","Errors.","The <code>FreeLibrary</code> call failed.","The <code>FreeLibrary</code> call failed and system did not report an …","The <code>GetModuleHandleExW</code> call failed.","The <code>GetModuleHandleExW</code> call failed and system did not …","The <code>GetProcAddress</code> call failed.","The <code>GetProcAddressUnknown</code> call failed and system did not …","The requested type cannot possibly work.","A loaded dynamic library.","The <code>LoadLibraryW</code> call failed.","The <code>LoadLibraryW</code> call failed and system did not report an …","Symbol from a library.","","","","","","","Project changelog","","","Unload the library.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Wrap the <code>os::platform::Symbol</code> into this safe wrapper.","Get a pointer to function or static variable by symbol …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Extract the wrapped <code>os::platform::Symbol</code>.","Converts a library name to a filename generally …","Lift Option out of the symbol.","Find and load a dynamic library.","Unsafe, platform specific bindings to dynamic library …","","","","","","","","","","","","","The source error.","The source error.","The source error.","The source error.","The source error.","The source error.","The source error.","The source error.","The source error.","Release 0.3.0 (2016-07-27)","Release 0.3.1 (2016-10-01)","Release 0.3.2 (2017-02-10)","Release 0.3.3 (2017-03-25)","Release 0.3.4 (2017-03-25)","Release 0.4.0 (2017-05-01)","Release 0.4.1 (2017-08-29)","Release 0.4.2 (2017-09-24)","Release 0.4.3 (2017-12-07)","Release 0.5.0 (2018-01-11)","Release 0.5.1 (2019-06-01)","Release 0.5.2 (2019-07-07)","Release 0.6.0 (2020-04-05)","Release 0.6.1 (2020-04-15)","Release 0.6.2 (2020-05-06)","Release 0.6.3 (2020-08-22)","Release 0.6.4 (2020-10-10)","Release 0.6.5 (2020-10-23)","Release 0.6.6 (2020-12-03)","Release 0.6.7 (2021-01-14)","UNIX implementation of dynamic library loading.","A platform-specific counterpart of the cross-platform …","Make loaded symbols available for resolution globally.","Perform lazy binding.","Load symbols into an isolated namespace.","Perform eager binding.","Symbol from a library.","","","","","","","Unload the library.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Convert a raw handle returned by <code>dlopen</code>-family of calls to …","Get a pointer to function or static variable by symbol …","Get a pointer to function or static variable by symbol …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert the <code>Library</code> to a raw handle.","Convert the loaded Symbol into a raw pointer.","Lift Option out of the symbol.","Find and eagerly load a shared library (module).","Find and load an executable object file (shared library).","Eagerly load the <code>Library</code> representing the current …","","","","","","",""],"i":[4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,0,4,4,0,3,1,4,3,1,4,0,1,1,3,1,3,1,4,4,3,3,1,4,1,3,3,1,4,1,0,1,3,0,4,1,4,3,1,4,3,1,4,3,1,4,21,22,23,24,25,26,27,28,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,9,8,9,9,9,8,9,8,8,9,8,8,9,8,8,8,8,9,8,9,9,8,8,8,9,8,9,8,9,8,9],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[1,[-1]]],[[1,[-1]]],[]],[[-1,-2],2,[],[]],[3,[[5,[2,4]]]],[[[1,[-1]]],-1,[]],[[3,6],7],[[[1,[-1]],6],7,[]],[[4,6],7],[[4,6],7],[-1,-1,[]],[8,3],[-1,-1,[]],[-1,-1,[]],[[[9,[-1]],-2],[[1,[-1]]],[],[]],[[3,[11,[10]]],[[5,[[1,[-1]],4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[9,[-1]]],[]],[-1,12,[[14,[13]]]],[[[1,[[15,[-1]]]]],[[15,[[1,[-1]]]]],[]],[-1,[[5,[3,4]]],[[14,[13]]]],0,[4,[[15,[16]]]],[-1,-2,[],[]],[-1,17,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[-1]]],[[9,[-1]]],[]],[[-1,-2],2,[],[]],[8,[[5,[2,4]]]],[[[9,[-1]]],-1,[]],[8,2],[[8,6],7],[[[9,[-1]],6],7,[]],[-1,-1,[]],[3,8],[-1,-1,[]],[19,8],[[8,[11,[10]]],[[5,[[9,[-1]],4]]],[]],[[8,[11,[10]]],[[5,[[9,[-1]],4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,19],[[[9,[-1]]],19,[]],[[[9,[[15,[-1]]]]],[[15,[[9,[-1]]]]],[]],[-1,[[5,[8,4]]],[[14,[13]]]],[[[15,[-1]],20],[[5,[8,4]]],[[14,[13]]]],[[],8],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,18,[]],[-1,18,[]]],"c":[],"p":[[5,"Symbol",0],[1,"tuple"],[5,"Library",0],[6,"Error",0],[6,"Result",129],[5,"Formatter",130],[8,"Result",130],[5,"Library",91],[5,"Symbol",91],[1,"u8"],[1,"slice"],[5,"OsString",131],[5,"OsStr",131],[10,"AsRef",132],[6,"Option",133],[10,"Error",134],[5,"String",135],[5,"TypeId",136],[8,"c_void",137],[8,"c_int",137],[15,"DlOpen",61],[15,"DlSym",61],[15,"DlClose",61],[15,"LoadLibraryW",61],[15,"GetModuleHandleExW",61],[15,"GetProcAddress",61],[15,"FreeLibrary",61],[15,"CreateCString",61],[15,"CreateCStringWithTrailing",61]],"b":[[33,"impl-Debug-for-Error"],[34,"impl-Display-for-Error"]]}],\
["lock_api",{"doc":"This library provides type-safe and fully-featured <code>Mutex</code> …","t":"RRKRRFFTTTTRRFFFFFFKKKFKKKKKKKKKKFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMMMMNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMMMMNNNMMMMMMMNNNMMMNNNNNNNNNNNNNNNNNMNMNMNNNNNNNNNNNNNNNNNNNNNNMNMMMNNNNNNNNNNMMMMNNNNNNNNNNNMNNN","n":["Duration","Duration","GetThreadId","GuardMarker","GuardMarker","GuardNoSend","GuardSend","INIT","INIT","INIT","INIT","Instant","Instant","MappedMutexGuard","MappedReentrantMutexGuard","MappedRwLockReadGuard","MappedRwLockWriteGuard","Mutex","MutexGuard","RawMutex","RawMutexFair","RawMutexTimed","RawReentrantMutex","RawRwLock","RawRwLockDowngrade","RawRwLockFair","RawRwLockRecursive","RawRwLockRecursiveTimed","RawRwLockTimed","RawRwLockUpgrade","RawRwLockUpgradeDowngrade","RawRwLockUpgradeFair","RawRwLockUpgradeTimed","ReentrantMutex","ReentrantMutexGuard","RwLock","RwLockReadGuard","RwLockUpgradableReadGuard","RwLockWriteGuard","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bump","bump","bump","bump","bump","bump","bump","bump","bump_exclusive","bump_exclusive","bump_shared","bump_shared","bump_upgradable","bump_upgradable","const_new","const_new","const_new","data_ptr","data_ptr","data_ptr","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","downgrade","downgrade","downgrade","downgrade_to_upgradable","downgrade_to_upgradable","downgrade_upgradable","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_unlock","force_unlock","force_unlock_fair","force_unlock_fair","force_unlock_read","force_unlock_read_fair","force_unlock_write","force_unlock_write_fair","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked_exclusive","is_locked_exclusive","is_locked_exclusive","is_owned_by_current_thread","is_owned_by_current_thread","leak","lock","lock","lock","lock","lock_exclusive","lock_shared","lock_shared_recursive","lock_upgradable","make_guard_unchecked","make_guard_unchecked","make_read_guard_unchecked","make_upgradable_guard_unchecked","make_write_guard_unchecked","map","map","map","map","map","map","map","map","mutex","new","new","new","nonzero_thread_id","raw","raw","raw","read","read_recursive","remutex","rwlock","rwlock","rwlock","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_lock","try_lock","try_lock","try_lock","try_lock_exclusive","try_lock_exclusive_for","try_lock_exclusive_until","try_lock_for","try_lock_for","try_lock_for","try_lock_for","try_lock_shared","try_lock_shared_for","try_lock_shared_recursive","try_lock_shared_recursive_for","try_lock_shared_recursive_until","try_lock_shared_until","try_lock_until","try_lock_until","try_lock_until","try_lock_until","try_lock_upgradable","try_lock_upgradable_for","try_lock_upgradable_until","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_read","try_read_for","try_read_recursive","try_read_recursive_for","try_read_recursive_until","try_read_until","try_upgradable_read","try_upgradable_read_for","try_upgradable_read_until","try_upgrade","try_upgrade","try_upgrade_for","try_upgrade_for","try_upgrade_until","try_upgrade_until","try_with_upgraded","try_with_upgraded_for","try_with_upgraded_until","try_write","try_write_for","try_write_until","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlock","unlock","unlock_exclusive","unlock_exclusive_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_shared","unlock_shared_fair","unlock_upgradable","unlock_upgradable_fair","unlocked","unlocked","unlocked","unlocked","unlocked","unlocked_fair","unlocked_fair","unlocked_fair","unlocked_fair","unlocked_fair","upgradable_read","upgrade","upgrade","with_upgraded","write"],"q":[[0,"lock_api"],[372,"core::marker"],[373,"core::default"],[374,"core::fmt"],[375,"core::fmt"],[376,"core::num::nonzero"],[377,"core::result"],[378,"core::option"],[379,"core::any"]],"d":["Duration type used for <code>try_lock_for</code>.","Duration type used for <code>try_lock_for</code>.","Helper trait which returns a non-zero thread ID.","Marker type which determines whether a lock guard should …","Marker type which determines whether a lock guard should …","Marker type which indicates that the Guard type for a lock …","Marker type which indicates that the Guard type for a lock …","Initial value for an unlocked mutex.","Initial value.","Initial value for an unlocked mutex.","Initial value for an unlocked <code>RwLock</code>.","Instant type used for <code>try_lock_until</code>.","Instant type used for <code>try_lock_until</code>.","An RAII mutex guard returned by <code>MutexGuard::map</code>, which can …","An RAII mutex guard returned by <code>ReentrantMutexGuard::map</code>, …","An RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …","An RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…","A mutual exclusion primitive useful for protecting shared …","An RAII implementation of a “scoped lock” of a mutex. …","Basic operations for a mutex.","Additional methods for mutexes which support fair …","Additional methods for mutexes which support locking with …","A raw mutex type that wraps another raw mutex to provide …","Basic operations for a reader-writer lock.","Additional methods for RwLocks which support atomically …","Additional methods for RwLocks which support fair …","Additional methods for RwLocks which support recursive …","Additional methods for RwLocks which support recursive …","Additional methods for RwLocks which support locking with …","Additional methods for RwLocks which support atomically …","Additional methods for RwLocks which support upgradable …","Additional methods for RwLocks which support upgradable …","Additional methods for RwLocks which support upgradable …","A mutex which can be recursively locked by a single thread.","An RAII implementation of a “scoped lock” of a …","A reader-writer lock","RAII structure used to release the shared read access of a …","RAII structure used to release the upgradable read access …","RAII structure used to release the exclusive write access …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if there …","Temporarily yields an exclusive lock to a waiting thread …","Temporarily yields an exclusive lock to a waiting thread …","Temporarily yields a shared lock to a waiting thread if …","Temporarily yields a shared lock to a waiting thread if …","Temporarily yields an upgradable lock to a waiting thread …","Temporarily yields an upgradable lock to a waiting thread …","Creates a new mutex based on a pre-existing raw mutex.","Creates a new reentrant mutex based on a pre-existing raw …","Creates a new new instance of an <code>RwLock&lt;T&gt;</code> based on a …","Returns a raw pointer to the underlying data.","Returns a raw pointer to the underlying data.","Returns a raw pointer to the underlying data.","","","","","","","","","","","","","","","","","Atomically downgrades an exclusive lock into a shared lock …","Atomically downgrades a write lock into a read lock …","Atomically downgrades an upgradable read lock lock into a …","Downgrades an exclusive lock to an upgradable lock.","Atomically downgrades a write lock into an upgradable read …","Downgrades an upgradable lock to a shared lock.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Forcibly unlocks the mutex.","Forcibly unlocks the mutex.","Forcibly unlocks the mutex using a fair unlock procotol.","Forcibly unlocks the mutex using a fair unlock protocol.","Forcibly unlocks a read lock.","Forcibly unlocks a read lock using a fair unlock procotol.","Forcibly unlocks a write lock.","Forcibly unlocks a write lock using a fair unlock procotol.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this mutex, returning the underlying data.","Consumes this mutex, returning the underlying data.","Consumes this <code>RwLock</code>, returning the underlying data.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks if this <code>RwLock</code> is currently locked in any way.","Checks if this <code>RwLock</code> is currently locked in any way.","Checks whether this <code>RwLock</code> is currently locked in any way.","Check if this <code>RwLock</code> is currently exclusively locked.","Check if this <code>RwLock</code> is currently exclusively locked.","Check if this <code>RwLock</code> is currently exclusively locked.","Checks whether the mutex is currently held by the current …","Checks whether the mutex is currently held by the current …","Leaks the mutex guard and returns a mutable reference to …","Acquires this mutex, blocking the current thread until it …","Acquires a mutex, blocking the current thread until it is …","Acquires this mutex, blocking if it’s held by another …","Acquires a reentrant mutex, blocking the current thread …","Acquires an exclusive lock, blocking the current thread …","Acquires a shared lock, blocking the current thread until …","Acquires a shared lock without deadlocking in case of a …","Acquires an upgradable lock, blocking the current thread …","Creates a new <code>MutexGuard</code> without checking if the mutex is …","Creates a new <code>ReentrantMutexGuard</code> without checking if the …","Creates a new <code>RwLockReadGuard</code> without checking if the lock …","Creates a new <code>RwLockUpgradableReadGuard</code> without checking …","Creates a new <code>RwLockReadGuard</code> without checking if the lock …","Makes a new <code>MappedMutexGuard</code> for a component of the locked …","Makes a new <code>MappedMutexGuard</code> for a component of the locked …","Makes a new <code>MappedReentrantMutexGuard</code> for a component of …","Makes a new <code>MappedReentrantMutexGuard</code> for a component of …","Make a new <code>MappedRwLockReadGuard</code> for a component of the …","Make a new <code>MappedRwLockWriteGuard</code> for a component of the …","Make a new <code>MappedRwLockReadGuard</code> for a component of the …","Make a new <code>MappedRwLockWriteGuard</code> for a component of the …","Returns a reference to the original <code>Mutex</code> object.","Creates a new mutex in an unlocked state ready for use.","Creates a new reentrant mutex in an unlocked state ready …","Creates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.","Returns a non-zero thread ID which identifies the current …","Returns the underlying raw mutex object.","Returns the underlying raw mutex object.","Returns the underlying raw reader-writer lock object.","Locks this <code>RwLock</code> with shared read access, blocking the …","Locks this <code>RwLock</code> with shared read access, blocking the …","Returns a reference to the original <code>ReentrantMutex</code> object.","Returns a reference to the original reader-writer lock …","Returns a reference to the original reader-writer lock …","Returns a reference to the original reader-writer lock …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to acquire this mutex without blocking. Returns …","Attempts to acquire this lock.","Attempts to acquire this mutex without blocking. Returns …","Attempts to acquire this lock.","Attempts to acquire an exclusive lock without blocking.","Attempts to acquire an exclusive lock until a timeout is …","Attempts to acquire an exclusive lock until a timeout is …","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire a shared lock without blocking.","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock without deadlocking in …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire an upgradable lock without blocking.","Attempts to acquire an upgradable lock until a timeout is …","Attempts to acquire an upgradable lock until a timeout is …","Attempts to make a new <code>MappedMutexGuard</code> for a component of …","Attempts to make a new <code>MappedMutexGuard</code> for a component of …","Attempts to make  a new <code>MappedReentrantMutexGuard</code> for a …","Attempts to make  a new <code>MappedReentrantMutexGuard</code> for a …","Attempts to make  a new <code>MappedRwLockReadGuard</code> for a …","Attempts to make  a new <code>MappedRwLockWriteGuard</code> for a …","Attempts to make  a new <code>MappedRwLockReadGuard</code> for a …","Attempts to make  a new <code>MappedRwLockWriteGuard</code> for a …","Attempts to acquire this <code>RwLock</code> with shared read access.","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access.","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into …","First, tries to atomically upgrade an upgradable read lock …","Tries to atomically upgrade an upgradable read lock into …","Tries to atomically upgrade an upgradable read lock into …","Attempts to lock this <code>RwLock</code> with exclusive write access.","Attempts to acquire this <code>RwLock</code> with exclusive write …","Attempts to acquire this <code>RwLock</code> with exclusive write …","","","","","","","","","","","","","","","","Unlocks this mutex.","Unlocks this mutex. The inner mutex may not be unlocked if …","Releases an exclusive lock.","Releases an exclusive lock using a fair unlock protocol.","Unlocks this mutex using a fair unlock protocol.","Unlocks this mutex using a fair unlock protocol. The inner …","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Releases a shared lock.","Releases a shared lock using a fair unlock protocol.","Releases an upgradable lock.","Releases an upgradable lock using a fair unlock protocol.","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Locks this <code>RwLock</code> with upgradable read access, blocking …","Upgrades an upgradable lock to an exclusive lock.","Atomically upgrades an upgradable read lock lock into an …","First, atomically upgrades an upgradable read lock lock …","Locks this <code>RwLock</code> with exclusive write access, blocking …"],"i":[42,41,0,16,17,0,0,16,4,3,17,42,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,47,13,3,14,15,5,19,7,20,8,10,11,22,23,46,47,13,3,14,15,5,19,7,20,8,10,11,22,23,1,1,3,5,7,8,10,11,9,9,9,9,12,12,13,14,15,13,14,15,13,14,15,5,19,7,20,8,10,11,22,23,5,19,10,23,24,10,11,25,10,25,5,19,7,20,8,10,11,22,23,13,14,15,5,5,19,19,7,7,20,20,8,8,10,10,11,11,22,22,23,23,13,14,13,14,15,15,15,15,46,47,13,13,13,3,14,14,14,15,15,15,5,19,7,20,8,10,11,22,23,13,14,15,46,47,13,3,14,15,5,19,7,20,8,10,11,22,23,13,14,15,16,16,13,3,14,17,17,15,17,17,15,3,14,5,16,13,3,14,17,17,33,21,13,14,15,15,15,5,19,7,20,8,10,22,23,5,13,14,15,4,13,14,15,15,15,7,8,10,11,46,47,13,3,14,15,5,19,7,20,8,10,11,22,23,46,47,13,3,14,15,5,19,7,20,8,10,11,22,23,16,13,3,14,17,41,41,42,13,3,14,17,41,33,43,43,41,42,13,3,14,21,44,44,5,19,7,20,8,10,22,23,15,15,15,15,15,15,15,15,15,21,11,44,11,44,11,11,11,11,15,15,15,46,47,13,3,14,15,5,19,7,20,8,10,11,22,23,16,3,17,9,1,3,5,19,7,20,8,10,11,22,23,17,9,21,12,5,7,8,10,11,5,7,8,10,11,15,21,11,11,15],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[1,2],[[[3,[-1,-2]]],2,1,4],[[[5,[-1,-2]]],2,1,6],[[[7,[-1,-2,-3]]],2,1,4,6],[[[8,[-1,-2]]],2,9,6],[[[10,[-1,-2]]],2,9,6],[[[11,[-1,-2]]],2,12,6],[9,2],[9,2],[9,2],[9,2],[12,2],[12,2],[[-1,-2],[[13,[-1,-2]]],[],[]],[[-1,-2,-3],[[14,[-1,-2,-3]]],[],[],[]],[[-1,-2],[[15,[-1,-2]]],[],[]],[[[13,[-1,-2]]],[],16,6],[[[14,[-1,-2,-3]]],[],16,4,6],[[[15,[-1,-2]]],[],17,6],[[],[[13,[-1,-2]]],16,[6,18]],[[],[[14,[-1,-2,-3]]],16,4,[6,18]],[[],[[15,[-1,-2]]],17,[6,18]],[[[5,[-1,-2]]],-2,16,6],[[[19,[-1,-2]]],-2,16,6],[[[7,[-1,-2,-3]]],-3,16,4,6],[[[20,[-1,-2,-3]]],-3,16,4,6],[[[8,[-1,-2]]],-2,17,6],[[[10,[-1,-2]]],-2,17,6],[[[11,[-1,-2]]],-2,21,6],[[[22,[-1,-2]]],-2,17,6],[[[23,[-1,-2]]],-2,17,6],[[[5,[-1,-2]]],-2,16,6],[[[19,[-1,-2]]],-2,16,6],[[[10,[-1,-2]]],-2,17,6],[[[23,[-1,-2]]],-2,17,6],[24,2],[[[10,[-1,-2]]],[[8,[-1,-2]]],24,6],[[[11,[-1,-2]]],[[8,[-1,-2]]],25,6],[25,2],[[[10,[-1,-2]]],[[11,[-1,-2]]],25,6],[25,2],[[[5,[-1,-2]]],2,16,6],[[[19,[-1,-2]]],2,16,6],[[[7,[-1,-2,-3]]],2,16,4,6],[[[20,[-1,-2,-3]]],2,16,4,6],[[[8,[-1,-2]]],2,17,6],[[[10,[-1,-2]]],2,17,6],[[[11,[-1,-2]]],2,21,6],[[[22,[-1,-2]]],2,17,6],[[[23,[-1,-2]]],2,17,6],[[[13,[-1,-2]],26],27,16,[6,28]],[[[14,[-1,-2,-3]],26],27,16,4,[6,28]],[[[15,[-1,-2]],26],27,17,[6,28]],[[[5,[-1,-2]],26],27,16,[28,6]],[[[5,[-1,-2]],26],27,16,[29,6]],[[[19,[-1,-2]],26],27,16,[29,6]],[[[19,[-1,-2]],26],27,16,[28,6]],[[[7,[-1,-2,-3]],26],27,16,4,[29,6]],[[[7,[-1,-2,-3]],26],27,16,4,[28,6]],[[[20,[-1,-2,-3]],26],27,16,4,[28,6]],[[[20,[-1,-2,-3]],26],27,16,4,[29,6]],[[[8,[-1,-2]],26],27,17,[28,6]],[[[8,[-1,-2]],26],27,17,[29,6]],[[[10,[-1,-2]],26],27,17,[29,6]],[[[10,[-1,-2]],26],27,17,[28,6]],[[[11,[-1,-2]],26],27,21,[29,6]],[[[11,[-1,-2]],26],27,21,[28,6]],[[[22,[-1,-2]],26],27,17,[29,6]],[[[22,[-1,-2]],26],27,17,[28,6]],[[[23,[-1,-2]],26],27,17,[29,6]],[[[23,[-1,-2]],26],27,17,[28,6]],[[[13,[-1,-2]]],2,16,6],[[[14,[-1,-2,-3]]],2,16,4,6],[[[13,[-1,-2]]],2,1,6],[[[14,[-1,-2,-3]]],2,1,4,6],[[[15,[-1,-2]]],2,17,6],[[[15,[-1,-2]]],2,9,6],[[[15,[-1,-2]]],2,17,6],[[[15,[-1,-2]]],2,9,6],[-1,-1,[]],[-1,-1,[]],[-1,[[13,[-2,-1]]],[],16],[-1,-1,[]],[30,-1,[]],[-1,-1,[]],[-1,[[14,[-2,-3,-1]]],[],16,4],[30,-1,[]],[-1,-1,[]],[-1,[[15,[-2,-1]]],[],17],[30,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[13,[-1,-2]]],-2,16,6],[[[14,[-1,-2,-3]]],-3,16,4,6],[[[15,[-1,-2]]],-2,17,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[13,[-1,-2]]],-2,16,[]],[[[14,[-1,-2,-3]]],-3,16,4,[]],[[[15,[-1,-2]]],-2,17,[]],[[[16,[],[[31,[-1]]]]],32,[]],[[[16,[],[[31,[-1]]]]],32,[]],[[[13,[-1,-2]]],32,16,6],[[[3,[-1,-2]]],32,16,4],[[[14,[-1,-2,-3]]],32,16,4,6],[[[17,[],[[31,[-1]]]]],32,[]],[[[17,[],[[31,[-1]]]]],32,[]],[[[15,[-1,-2]]],32,17,6],[[[17,[],[[31,[-1]]]]],32,[]],[[[17,[],[[31,[-1]]]]],32,[]],[[[15,[-1,-2]]],32,17,6],[[[3,[-1,-2]]],32,16,4],[[[14,[-1,-2,-3]]],32,16,4,6],[[[5,[-1,-2]]],-2,16,6],[[[16,[],[[31,[-1]]]]],2,[]],[[[13,[-1,-2]]],[[5,[-1,-2]]],16,6],[[[3,[-1,-2]]],2,16,4],[[[14,[-1,-2,-3]]],[[7,[-1,-2,-3]]],16,4,6],[[[17,[],[[31,[-1]]]]],2,[]],[[[17,[],[[31,[-1]]]]],2,[]],[33,2],[21,2],[[[13,[-1,-2]]],[[5,[-1,-2]]],16,6],[[[14,[-1,-2,-3]]],[[7,[-1,-2,-3]]],16,4,6],[[[15,[-1,-2]]],[[8,[-1,-2]]],17,6],[[[15,[-1,-2]]],[[11,[-1,-2]]],21,6],[[[15,[-1,-2]]],[[10,[-1,-2]]],17,6],[[[5,[-1,-2]],-4],[[19,[-1,-3]]],16,6,6,[[35,[-2],[[34,[-3]]]]]],[[[19,[-1,-2]],-4],[[19,[-1,-3]]],16,6,6,[[35,[-2],[[34,[-3]]]]]],[[[7,[-1,-2,-3]],-5],[[20,[-1,-2,-4]]],16,4,6,6,[[35,[-3],[[34,[-4]]]]]],[[[20,[-1,-2,-3]],-5],[[20,[-1,-2,-4]]],16,4,6,6,[[35,[-3],[[34,[-4]]]]]],[[[8,[-1,-2]],-4],[[22,[-1,-3]]],17,6,6,[[35,[-2],[[34,[-3]]]]]],[[[10,[-1,-2]],-4],[[23,[-1,-3]]],17,6,6,[[35,[-2],[[34,[-3]]]]]],[[[22,[-1,-2]],-4],[[22,[-1,-3]]],17,6,6,[[35,[-2],[[34,[-3]]]]]],[[[23,[-1,-2]],-4],[[23,[-1,-3]]],17,6,6,[[35,[-2],[[34,[-3]]]]]],[[[5,[-1,-2]]],[[13,[-1,-2]]],16,6],[-1,[[13,[-2,-1]]],[],16],[-1,[[14,[-2,-3,-1]]],[],16,4],[-1,[[15,[-2,-1]]],[],17],[4,36],[[[13,[-1,-2]]],-1,16,6],[[[14,[-1,-2,-3]]],-1,16,4,6],[[[15,[-1,-2]]],-1,17,6],[[[15,[-1,-2]]],[[8,[-1,-2]]],17,6],[[[15,[-1,-2]]],[[8,[-1,-2]]],33,6],[[[7,[-1,-2,-3]]],[[14,[-1,-2,-3]]],16,4,6],[[[8,[-1,-2]]],[[15,[-1,-2]]],17,6],[[[10,[-1,-2]]],[[15,[-1,-2]]],17,6],[[[11,[-1,-2]]],[[15,[-1,-2]]],21,6],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[[[16,[],[[31,[-1]]]]],32,[]],[[[13,[-1,-2]]],[[38,[[5,[-1,-2]]]]],16,6],[[[3,[-1,-2]]],32,16,4],[[[14,[-1,-2,-3]]],[[38,[[7,[-1,-2,-3]]]]],16,4,6],[[[17,[],[[31,[-1]]]]],32,[]],[[[41,[],[[39,[-1]],[40,[-2]]]],-1],32,[],[]],[[[41,[],[[39,[-1]],[40,[-2]]]],-2],32,[],[]],[[[42,[],[[39,[-1]],[40,[-2]]]],-1],32,[],[]],[[[13,[-1,-2]]],[[38,[[5,[-1,-2]]]]],42,6],[[[3,[-1,-2]]],32,42,4],[[[14,[-1,-2,-3]]],[[38,[[7,[-1,-2,-3]]]]],42,4,6],[[[17,[],[[31,[-1]]]]],32,[]],[[[41,[],[[39,[-1]],[40,[-2]]]],-1],32,[],[]],[33,32],[[43,-1],32,[]],[[43,-1],32,[]],[[[41,[],[[39,[-1]],[40,[-2]]]],-2],32,[],[]],[[[42,[],[[39,[-1]],[40,[-2]]]],-2],32,[],[]],[[[13,[-1,-2]]],[[38,[[5,[-1,-2]]]]],42,6],[[[3,[-1,-2]]],32,42,4],[[[14,[-1,-2,-3]]],[[38,[[7,[-1,-2,-3]]]]],42,4,6],[21,32],[[44,-1],32,[]],[[44,-1],32,[]],[[[5,[-1,-2]],-4],[[37,[[19,[-1,-3]],[5,[-1,-2]]]]],16,6,6,[[35,[-2],[[34,[[38,[-3]]]]]]]],[[[19,[-1,-2]],-4],[[37,[[19,[-1,-3]],[19,[-1,-2]]]]],16,6,6,[[35,[-2],[[34,[[38,[-3]]]]]]]],[[[7,[-1,-2,-3]],-5],[[37,[[20,[-1,-2,-4]],[7,[-1,-2,-3]]]]],16,4,6,6,[[35,[-3],[[34,[[38,[-4]]]]]]]],[[[20,[-1,-2,-3]],-5],[[37,[[20,[-1,-2,-4]],[20,[-1,-2,-3]]]]],16,4,6,6,[[35,[-3],[[34,[[38,[-4]]]]]]]],[[[8,[-1,-2]],-4],[[37,[[22,[-1,-3]],[8,[-1,-2]]]]],17,6,6,[[35,[-2],[[34,[[38,[-3]]]]]]]],[[[10,[-1,-2]],-4],[[37,[[23,[-1,-3]],[10,[-1,-2]]]]],17,6,6,[[35,[-2],[[34,[[38,[-3]]]]]]]],[[[22,[-1,-2]],-4],[[37,[[22,[-1,-3]],[22,[-1,-2]]]]],17,6,6,[[35,[-2],[[34,[[38,[-3]]]]]]]],[[[23,[-1,-2]],-4],[[37,[[23,[-1,-3]],[23,[-1,-2]]]]],17,6,6,[[35,[-2],[[34,[[38,[-3]]]]]]]],[[[15,[-1,-2]]],[[38,[[8,[-1,-2]]]]],17,6],[[[15,[-1,-2]]],[[38,[[8,[-1,-2]]]]],41,6],[[[15,[-1,-2]]],[[38,[[8,[-1,-2]]]]],33,6],[[[15,[-1,-2]]],[[38,[[8,[-1,-2]]]]],43,6],[[[15,[-1,-2]]],[[38,[[8,[-1,-2]]]]],43,6],[[[15,[-1,-2]]],[[38,[[8,[-1,-2]]]]],41,6],[[[15,[-1,-2]]],[[38,[[11,[-1,-2]]]]],21,6],[[[15,[-1,-2]]],[[38,[[11,[-1,-2]]]]],44,6],[[[15,[-1,-2]]],[[38,[[11,[-1,-2]]]]],44,6],[21,32],[[[11,[-1,-2]]],[[37,[[10,[-1,-2]],[11,[-1,-2]]]]],21,6],[[44,-1],32,[]],[[[11,[-1,-2]]],[[37,[[10,[-1,-2]],[11,[-1,-2]]]]],44,6],[[44,-1],32,[]],[[[11,[-1,-2]]],[[37,[[10,[-1,-2]],[11,[-1,-2]]]]],44,6],[[[11,[-1,-2]],-4],[[38,[-3]]],25,6,[],[[35,[-2],[[34,[-3]]]]]],[[[11,[-1,-2]],-4],[[38,[-3]]],[44,25],6,[],[[35,[-2],[[34,[-3]]]]]],[[[11,[-1,-2]],-4],[[38,[-3]]],[44,25],6,[],[[35,[-2],[[34,[-3]]]]]],[[[15,[-1,-2]]],[[38,[[10,[-1,-2]]]]],17,6],[[[15,[-1,-2]]],[[38,[[10,[-1,-2]]]]],41,6],[[[15,[-1,-2]]],[[38,[[10,[-1,-2]]]]],41,6],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[[[16,[],[[31,[-1]]]]],2,[]],[[[3,[-1,-2]]],2,16,4],[[[17,[],[[31,[-1]]]]],2,[]],[9,2],[1,2],[[[3,[-1,-2]]],2,1,4],[[[5,[-1,-2]]],2,1,6],[[[19,[-1,-2]]],2,1,6],[[[7,[-1,-2,-3]]],2,1,4,6],[[[20,[-1,-2,-3]]],2,1,4,6],[[[8,[-1,-2]]],2,9,6],[[[10,[-1,-2]]],2,9,6],[[[11,[-1,-2]]],2,12,6],[[[22,[-1,-2]]],2,9,6],[[[23,[-1,-2]]],2,9,6],[[[17,[],[[31,[-1]]]]],2,[]],[9,2],[21,2],[12,2],[[[5,[-1,-2]],-4],-3,16,6,[],[[35,[],[[34,[-3]]]]]],[[[7,[-1,-2,-3]],-5],-4,16,4,6,[],[[35,[],[[34,[-4]]]]]],[[[8,[-1,-2]],-4],-3,17,6,[],[[35,[],[[34,[-3]]]]]],[[[10,[-1,-2]],-4],-3,17,6,[],[[35,[],[[34,[-3]]]]]],[[[11,[-1,-2]],-4],-3,21,6,[],[[35,[],[[34,[-3]]]]]],[[[5,[-1,-2]],-4],-3,1,6,[],[[35,[],[[34,[-3]]]]]],[[[7,[-1,-2,-3]],-5],-4,1,4,6,[],[[35,[],[[34,[-4]]]]]],[[[8,[-1,-2]],-4],-3,9,6,[],[[35,[],[[34,[-3]]]]]],[[[10,[-1,-2]],-4],-3,9,6,[],[[35,[],[[34,[-3]]]]]],[[[11,[-1,-2]],-4],-3,12,6,[],[[35,[],[[34,[-3]]]]]],[[[15,[-1,-2]]],[[11,[-1,-2]]],21,6],[21,2],[[[11,[-1,-2]]],[[10,[-1,-2]]],21,6],[[[11,[-1,-2]],-4],-3,25,6,[],[[35,[-2],[[34,[-3]]]]]],[[[15,[-1,-2]]],[[10,[-1,-2]]],17,6]],"c":[],"p":[[10,"RawMutexFair",0],[1,"tuple"],[5,"RawReentrantMutex",0],[10,"GetThreadId",0],[5,"MutexGuard",0],[10,"Sized",372],[5,"ReentrantMutexGuard",0],[5,"RwLockReadGuard",0],[10,"RawRwLockFair",0],[5,"RwLockWriteGuard",0],[5,"RwLockUpgradableReadGuard",0],[10,"RawRwLockUpgradeFair",0],[5,"Mutex",0],[5,"ReentrantMutex",0],[5,"RwLock",0],[10,"RawMutex",0],[10,"RawRwLock",0],[10,"Default",373],[5,"MappedMutexGuard",0],[5,"MappedReentrantMutexGuard",0],[10,"RawRwLockUpgrade",0],[5,"MappedRwLockReadGuard",0],[5,"MappedRwLockWriteGuard",0],[10,"RawRwLockDowngrade",0],[10,"RawRwLockUpgradeDowngrade",0],[5,"Formatter",374],[8,"Result",374],[10,"Debug",374],[10,"Display",374],[1,"never"],[17,"GuardMarker"],[1,"bool"],[10,"RawRwLockRecursive",0],[17,"Output"],[10,"FnOnce",375],[5,"NonZeroUsize",376],[6,"Result",377],[6,"Option",378],[17,"Duration"],[17,"Instant"],[10,"RawRwLockTimed",0],[10,"RawMutexTimed",0],[10,"RawRwLockRecursiveTimed",0],[10,"RawRwLockUpgradeTimed",0],[5,"TypeId",379],[5,"GuardSend",0],[5,"GuardNoSend",0]],"b":[[123,"impl-Debug-for-MutexGuard%3C\'a,+R,+T%3E"],[124,"impl-Display-for-MutexGuard%3C\'a,+R,+T%3E"],[125,"impl-Display-for-MappedMutexGuard%3C\'a,+R,+T%3E"],[126,"impl-Debug-for-MappedMutexGuard%3C\'a,+R,+T%3E"],[127,"impl-Display-for-ReentrantMutexGuard%3C\'a,+R,+G,+T%3E"],[128,"impl-Debug-for-ReentrantMutexGuard%3C\'a,+R,+G,+T%3E"],[129,"impl-Debug-for-MappedReentrantMutexGuard%3C\'a,+R,+G,+T%3E"],[130,"impl-Display-for-MappedReentrantMutexGuard%3C\'a,+R,+G,+T%3E"],[131,"impl-Debug-for-RwLockReadGuard%3C\'a,+R,+T%3E"],[132,"impl-Display-for-RwLockReadGuard%3C\'a,+R,+T%3E"],[133,"impl-Display-for-RwLockWriteGuard%3C\'a,+R,+T%3E"],[134,"impl-Debug-for-RwLockWriteGuard%3C\'a,+R,+T%3E"],[135,"impl-Display-for-RwLockUpgradableReadGuard%3C\'a,+R,+T%3E"],[136,"impl-Debug-for-RwLockUpgradableReadGuard%3C\'a,+R,+T%3E"],[137,"impl-Display-for-MappedRwLockReadGuard%3C\'a,+R,+T%3E"],[138,"impl-Debug-for-MappedRwLockReadGuard%3C\'a,+R,+T%3E"],[139,"impl-Display-for-MappedRwLockWriteGuard%3C\'a,+R,+T%3E"],[140,"impl-Debug-for-MappedRwLockWriteGuard%3C\'a,+R,+T%3E"]]}],\
["log",{"doc":"A lightweight logging facade.","t":"PPPPPPGGKFFPFFFSFPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQNNMNNNNNNNQNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNQNNNNNNNNNNNNNNNNMQQHNNHNNNNNNNNNNNNNNHHHHNNNNNNQNNNNNNNNNNNNNNNNNNNNNNNNQ","n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","cmp","cmp","cmp","cmp","debug","default","default","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","iter","iter","level","level","level","level","line","line","log","log","log_enabled","logger","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_logger","set_logger_racy","set_max_level","set_max_level_racy","target","target","target","target","to_level","to_level_filter","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":[[0,"log"],[170,"core::fmt"],[171,"core::cmp"],[172,"core::option"],[173,"core::fmt"],[174,"core::hash"],[175,"core::iter::traits::iterator"],[176,"core::any"]],"d":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","Logs a message at the debug level.","","","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>file</code> to a <code>&#39;static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Logs a message at the info level.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate through all supported logging levels.","Iterate through all supported filtering levels.","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>module_path</code> to a <code>&#39;static</code> string","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>&amp;&#39;static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","A thread-unsafe version of <code>set_max_level</code>.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[4,6,4,6,4,6,0,0,0,0,0,6,0,0,0,0,0,4,6,4,6,1,3,4,6,4,6,1,3,8,7,17,12,4,6,1,3,8,7,17,12,3,7,1,8,4,6,1,8,4,6,8,7,0,3,7,10,4,4,6,6,8,7,12,0,1,3,1,3,10,4,4,6,6,1,3,8,7,17,17,12,12,4,6,1,3,8,7,17,12,4,6,4,6,8,7,0,4,6,1,3,8,7,17,12,4,6,1,3,8,7,1,3,10,0,0,0,4,6,0,1,3,1,3,1,3,3,7,4,4,6,6,8,7,0,0,0,0,1,3,8,7,6,4,0,4,6,1,3,8,7,17,12,4,6,1,3,8,7,17,12,4,6,1,3,8,7,17,12,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,2],3],[4,5],[6,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,1],[7,8],[[],3],[[],7],[4,4],[6,6],[1,1],[8,8],[[4,4],9],[[6,6],9],[[8,8],9],[[7,7],9],0,[[],3],[[],7],[[10,8],11],[[4,6],11],[[4,4],11],[[6,4],11],[[6,6],11],[[8,8],11],[[7,7],11],[[12,12],11],0,[1,[[13,[5]]]],[[3,[13,[5]]],3],[1,[[13,[5]]]],[[3,[13,[5]]],3],[10,14],[[4,15],16],[[4,15],16],[[6,15],16],[[6,15],16],[[1,15],16],[[3,15],16],[[8,15],16],[[7,15],16],[[17,15],16],[[17,15],16],[[12,15],16],[[12,15],16],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[5,[[18,[4,-1]]],[]],[5,[[18,[6,-1]]],[]],[[4,-1],14,19],[[6,-1],14,19],[[8,-1],14,19],[[7,-1],14,19],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[0,[[21,[],[[20,[4]]]]]]]],[[],[[0,[[21,[],[[20,[6]]]]]]]],[1,4],[[3,4],3],[8,4],[[7,4],7],[1,[[13,[22]]]],[[3,[13,[22]]],3],[[10,1],14],0,0,[[],10],[[],4],[[],6],[[],6],[1,8],[[3,8],3],[1,[[13,[5]]]],[[3,[13,[5]]],3],[1,[[13,[5]]]],[[3,[13,[5]]],3],[[],3],[[],7],[[4,6],[[13,[9]]]],[[4,4],[[13,[9]]]],[[6,4],[[13,[9]]]],[[6,6],[[13,[9]]]],[[8,8],[[13,[9]]]],[[7,7],[[13,[9]]]],[10,[[18,[14,17]]]],[10,[[18,[14,17]]]],[6,14],[6,14],[1,5],[[3,5],3],[8,5],[[7,5],7],[6,[[13,[4]]]],[4,6],0,[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],0],"c":[],"p":[[5,"Record",0],[5,"Arguments",170],[5,"RecordBuilder",0],[6,"Level",0],[1,"str"],[6,"LevelFilter",0],[5,"MetadataBuilder",0],[5,"Metadata",0],[6,"Ordering",171],[10,"Log",0],[1,"bool"],[5,"ParseLevelError",0],[6,"Option",172],[1,"tuple"],[5,"Formatter",170],[8,"Result",170],[5,"SetLoggerError",0],[6,"Result",173],[10,"Hasher",174],[17,"Item"],[10,"Iterator",175],[1,"u32"],[5,"TypeId",176]],"b":[[57,"impl-PartialEq%3CLevelFilter%3E-for-Level"],[58,"impl-PartialEq-for-Level"],[59,"impl-PartialEq%3CLevel%3E-for-LevelFilter"],[60,"impl-PartialEq-for-LevelFilter"],[70,"impl-Debug-for-Level"],[71,"impl-Display-for-Level"],[72,"impl-Debug-for-LevelFilter"],[73,"impl-Display-for-LevelFilter"],[78,"impl-Debug-for-SetLoggerError"],[79,"impl-Display-for-SetLoggerError"],[80,"impl-Debug-for-ParseLevelError"],[81,"impl-Display-for-ParseLevelError"],[128,"impl-PartialOrd%3CLevelFilter%3E-for-Level"],[129,"impl-PartialOrd-for-Level"],[130,"impl-PartialOrd%3CLevel%3E-for-LevelFilter"],[131,"impl-PartialOrd-for-LevelFilter"]]}],\
["memchr",{"doc":"This library provides heavily optimized routines for …","t":"FFFCNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHCHHHHHHNNNNNNNNNNNNNNNNNNNNNNNNCCHHHHCCCCCFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFKFNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNCCCCFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNCCFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNPFFFFFPGNNNNNNNNNNNNNNNNNNNNNNNNNNNHNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNHNNNNNNNNNNNNNNNNNNNNNNNN","n":["Memchr","Memchr2","Memchr3","arch","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","count","fmt","fmt","fmt","from","from","from","into","into","into","into_iter","into_iter","into_iter","memchr","memchr2","memchr2_iter","memchr3","memchr3_iter","memchr_iter","memmem","memrchr","memrchr2","memrchr2_iter","memrchr3","memrchr3_iter","memrchr_iter","new","new","new","next","next","next","next_back","next_back","next_back","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","all","x86_64","is_equal","is_equal_raw","is_prefix","is_suffix","memchr","packedpair","rabinkarp","shiftor","twoway","One","OneIter","Three","ThreeIter","Two","TwoIter","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count_raw","find","find","find","find_raw","find_raw","find_raw","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","iter","iter","iter","new","new","new","next","next","next","next_back","next_back","next_back","rfind","rfind","rfind","rfind_raw","rfind_raw","rfind_raw","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Finder","HeuristicFrequencyRank","Pair","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","find_prefilter","fmt","fmt","from","from","index1","index2","into","into","new","new","pair","rank","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","with_indices","with_pair","with_ranker","Finder","FinderRev","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","find","find_raw","fmt","fmt","from","from","into","into","new","new","rfind","rfind_raw","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Finder","borrow","borrow_mut","find","fmt","from","into","new","try_from","try_into","type_id","Finder","FinderRev","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","find","fmt","fmt","from","from","into","into","new","new","rfind","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","avx2","sse2","memchr","packedpair","One","OneIter","Three","ThreeIter","Two","TwoIter","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count_raw","find","find","find","find_raw","find_raw","find_raw","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_available","is_available","is_available","iter","iter","iter","new","new","new","new_unchecked","new_unchecked","new_unchecked","next","next","next","next_back","next_back","next_back","rfind","rfind","rfind","rfind_raw","rfind_raw","rfind_raw","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Finder","borrow","borrow_mut","clone","clone_into","find","find_prefilter","fmt","from","into","is_available","min_haystack_len","new","pair","to_owned","try_from","try_into","type_id","with_pair","memchr","packedpair","One","OneIter","Three","ThreeIter","Two","TwoIter","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count_raw","find","find","find","find_raw","find_raw","find_raw","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_available","is_available","is_available","iter","iter","iter","new","new","new","new_unchecked","new_unchecked","new_unchecked","next","next","next","next_back","next_back","next_back","rfind","rfind","rfind","rfind_raw","rfind_raw","rfind_raw","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Finder","borrow","borrow_mut","clone","clone_into","find","find_prefilter","fmt","from","into","is_available","min_haystack_len","new","pair","to_owned","try_from","try_into","type_id","with_pair","Auto","FindIter","FindRevIter","Finder","FinderBuilder","FinderRev","None","Prefilter","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_forward","build_forward_with_ranker","build_reverse","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","find","find","find_iter","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_owned","into_owned","into_owned","into_owned","needle","needle","new","new","new","next","next","prefilter","rfind","rfind","rfind_iter","rfind_iter","size_hint","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"memchr"],[66,"memchr::arch"],[68,"memchr::arch::all"],[77,"memchr::arch::all::memchr"],[182,"memchr::arch::all::packedpair"],[217,"memchr::arch::all::rabinkarp"],[247,"memchr::arch::all::shiftor"],[258,"memchr::arch::all::twoway"],[286,"memchr::arch::x86_64"],[288,"memchr::arch::x86_64::avx2"],[290,"memchr::arch::x86_64::avx2::memchr"],[401,"memchr::arch::x86_64::avx2::packedpair"],[420,"memchr::arch::x86_64::sse2"],[422,"memchr::arch::x86_64::sse2::memchr"],[533,"memchr::arch::x86_64::sse2::packedpair"],[552,"memchr::memmem"],[650,"core::fmt"],[651,"core::fmt"],[652,"core::iter::adapters::rev"],[653,"core::result"],[654,"core::any"],[655,"core::marker"],[656,"core::convert"]],"d":["An iterator over all occurrences of a single byte in a …","An iterator over all occurrences of two possible bytes in …","An iterator over all occurrences of three possible bytes …","A module with low-level architecture dependent routines.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Search for the first occurrence of a byte in a slice.","Search for the first occurrence of two possible bytes in a …","Returns an iterator over all occurrences of the needles in …","Search for the first occurrence of three possible bytes in …","Returns an iterator over all occurrences of the needles in …","Returns an iterator over all occurrences of the needle in …","This module provides forward and reverse substring search …","Search for the last occurrence of a byte in a slice.","Search for the last occurrence of two possible bytes in a …","Returns an iterator over all occurrences of the needles in …","Search for the last occurrence of three possible bytes in …","Returns an iterator over all occurrences of the needles in …","Returns an iterator over all occurrences of the needle in …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","","","","","","","","","","","","","","","","","","","","","","Contains architecture independent routines.","Vector algorithms for the <code>x86_64</code> target.","Compare corresponding bytes in <code>x</code> and <code>y</code> for equality.","Compare <code>n</code> bytes at the given pointers for equality.","Returns true if and only if <code>needle</code> is a prefix of <code>haystack</code>.","Returns true if and only if <code>needle</code> is a suffix of <code>haystack</code>.","Provides architecture independent implementations of <code>memchr</code>…","Provides an architecture independent implementation of the …","An implementation of the Rabin-Karp substring search …","An implementation of the Shift-Or substring search …","An implementation of the Two-Way substring search algorithm…","Finds all occurrences of a single byte in a haystack.","An iterator over all occurrences of a single byte in a …","Finds all occurrences of three bytes in a haystack.","An iterator over all occurrences of three possible bytes …","Finds all occurrences of two bytes in a haystack.","An iterator over all occurrences of two possible bytes in …","","","","","","","","","","","","","","","","","","","","","","","","","Counts all occurrences of this byte in the given haystack.","","Counts all occurrences of this byte in the given haystack …","Return the first occurrence of the needle in the given …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of one of the …","Returns an iterator over all occurrences of one of the …","Create a new searcher that finds occurrences of the byte …","Create a new searcher that finds occurrences of the two …","Create a new searcher that finds occurrences of the three …","","","","","","","Return the last occurrence of the needle in the given …","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","An architecture independent “packed pair” finder.","This trait allows the user to customize the heuristic used …","A pair of byte offsets into a needle to use as a predicate.","","","","","","","","","Run this finder on the given haystack as a prefilter.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the first offset of the pair.","Returns the second offset of the pair.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new prefilter that reports possible locations …","Create a new pair of offsets from the given needle.","Returns the pair of offsets (into the needle) used to …","Return the heuristic frequency rank of the given byte. A …","","","","","","","","","Create a new pair using the offsets given for the needle …","Create a new prefilter using the pair given.","Create a new pair of offsets from the given needle and …","A forward substring searcher using the Rabin-Karp …","A reverse substring searcher using the Rabin-Karp …","","","","","","","","","Return the first occurrence of the <code>needle</code> in the <code>haystack</code> …","Like <code>find</code>, but accepts and returns raw pointers.","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new Rabin-Karp forward searcher for the given …","Create a new Rabin-Karp reverse searcher for the given …","Return the last occurrence of the <code>needle</code> in the <code>haystack</code> …","Like <code>rfind</code>, but accepts and returns raw pointers.","","","","","","","","","A forward substring searcher using the Shift-Or algorithm.","","","Return the first occurrence of the needle given to …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new Shift-Or forward searcher for the given <code>needle</code>…","","","","A forward substring searcher that uses the Two-Way …","A reverse substring searcher that uses the Two-Way …","","","","","","","","","Returns the first occurrence of <code>needle</code> in the given …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a searcher that finds occurrences of the given …","Create a searcher that finds occurrences of the given …","Returns the last occurrence of <code>needle</code> in the given <code>haystack</code>…","","","","","","","","","Algorithms for the <code>x86_64</code> target using 256-bit vectors via …","Algorithms for the <code>x86_64</code> target using 128-bit vectors via …","This module defines 256-bit vector implementations of …","A 256-bit vector implementation of the “packed pair” …","Finds all occurrences of a single byte in a haystack.","An iterator over all occurrences of a single byte in a …","Finds all occurrences of three bytes in a haystack.","An iterator over all occurrences of three possible bytes …","Finds all occurrences of two bytes in a haystack.","An iterator over all occurrences of two possible bytes in …","","","","","","","","","","","","","","","","","","","","","","","","","Counts all occurrences of this byte in the given haystack.","","Counts all occurrences of this byte in the given haystack …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns true when this implementation is available in the …","Returns true when this implementation is available in the …","Returns true when this implementation is available in the …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new finder specific to AVX2 vectors and routines …","Create a new finder specific to AVX2 vectors and routines …","Create a new finder specific to AVX2 vectors and routines …","","","","","","","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A “packed pair” finder that uses 256-bit vector …","","","","","Execute a search using AVX2 vectors and routines.","Run this finder on the given haystack as a prefilter.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns true when this implementation is available in the …","Returns the minimum haystack length that this <code>Finder</code> can …","Create a new pair searcher. The searcher returned can …","Returns the pair of offsets (into the needle) used to …","","","","","Create a new “packed pair” finder using the pair of …","This module defines 128-bit vector implementations of …","A 128-bit vector implementation of the “packed pair” …","Finds all occurrences of a single byte in a haystack.","An iterator over all occurrences of a single byte in a …","Finds all occurrences of three bytes in a haystack.","An iterator over all occurrences of three possible bytes …","Finds all occurrences of two bytes in a haystack.","An iterator over all occurrences of two possible bytes in …","","","","","","","","","","","","","","","","","","","","","","","","","Counts all occurrences of this byte in the given haystack.","","Counts all occurrences of this byte in the given haystack …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns true when this implementation is available in the …","Returns true when this implementation is available in the …","Returns true when this implementation is available in the …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new finder specific to SSE2 vectors and routines …","Create a new finder specific to SSE2 vectors and routines …","Create a new finder specific to SSE2 vectors and routines …","","","","","","","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A “packed pair” finder that uses 128-bit vector …","","","","","Execute a search using SSE2 vectors and routines.","Run this finder on the given haystack as a prefilter.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns true when this implementation is available in the …","Returns the minimum haystack length that this <code>Finder</code> can …","Create a new pair searcher. The searcher returned can …","Returns the pair of offsets (into the needle) used to …","","","","","Create a new “packed pair” finder using the pair of …","Automatically detect whether a heuristic prefilter should …","An iterator over non-overlapping substring matches.","An iterator over non-overlapping substring matches in …","A single substring searcher fixed to a particular needle.","A builder for constructing non-default forward or reverse …","A single substring reverse searcher fixed to a particular …","Never used a prefilter in substring search.","Prefilter controls whether heuristics are used to …","Convert this finder into its borrowed variant.","Convert this finder into its borrowed variant.","","","","","","","","","","","","","Build a forward finder using the given needle from the …","Build a forward finder using the given needle and a custom …","Build a reverse finder using the given needle from the …","","","","","","","","","","","Returns the index of the first occurrence of the given …","Returns the index of the first occurrence of this needle …","Returns an iterator over all non-overlapping occurrences …","Returns an iterator over all occurrences of a substring in …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Convert this iterator into its owned variant, such that it …","Convert this iterator into its owned variant, such that it …","Convert this finder into its owned variant, such that it …","Convert this finder into its owned variant, such that it …","Returns the needle that this finder searches for.","Returns the needle that this finder searches for.","Create a new finder for the given needle.","Create a new reverse finder for the given needle.","Create a new finder builder with default settings.","","","Configure the prefilter setting for the finder.","Returns the index of the last occurrence of the given …","Returns the index of the last occurrence of this needle in …","Returns a reverse iterator over all non-overlapping …","Returns a reverse iterator over all occurrences of a …","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,16,17,18,19,20,15,16,17,18,19,20,15,16,17,18,19,20,15,16,17,18,19,20,15,16,15,15,17,19,15,17,19,15,16,17,18,19,20,15,16,17,18,19,20,15,16,17,18,19,20,16,18,20,15,17,19,15,17,19,16,18,20,16,18,20,15,17,19,15,17,19,16,18,20,15,16,17,18,19,20,15,16,17,18,19,20,15,16,17,18,19,20,15,16,17,18,19,20,0,0,0,21,22,21,22,21,22,21,22,21,21,22,21,22,22,22,21,22,21,22,21,23,21,22,21,22,21,22,21,22,22,21,22,0,0,24,25,24,25,24,25,24,25,24,24,24,25,24,25,24,25,24,25,25,25,24,25,24,25,24,25,24,25,0,26,26,26,26,26,26,26,26,26,26,0,0,27,28,27,28,27,28,27,28,27,27,28,27,28,27,28,27,28,28,27,28,27,28,27,28,27,28,0,0,0,0,0,0,0,0,0,0,29,30,31,32,33,34,29,30,31,32,33,34,29,30,31,32,33,34,29,30,31,32,33,34,29,30,29,29,31,33,29,31,33,29,30,31,32,33,34,29,30,31,32,33,34,29,30,31,32,33,34,30,32,34,29,31,33,29,31,33,29,31,33,29,31,33,30,32,34,30,32,34,29,31,33,29,31,33,30,32,34,29,30,31,32,33,34,29,30,31,32,33,34,29,30,31,32,33,34,29,30,31,32,33,34,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,0,0,0,0,0,0,0,36,37,38,39,40,41,36,37,38,39,40,41,36,37,38,39,40,41,36,37,38,39,40,41,36,37,36,36,38,40,36,38,40,36,37,38,39,40,41,36,37,38,39,40,41,36,37,38,39,40,41,37,39,41,36,38,40,36,38,40,36,38,40,36,38,40,37,39,41,37,39,41,36,38,40,36,38,40,37,39,41,36,37,38,39,40,41,36,37,38,39,40,41,36,37,38,39,40,41,36,37,38,39,40,41,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,48,0,0,0,0,0,48,0,43,44,48,49,50,43,44,45,48,49,50,43,44,45,45,45,45,48,43,44,45,48,43,44,45,48,45,0,43,0,43,48,49,50,43,44,45,48,49,50,43,44,45,48,49,50,43,44,45,49,50,49,50,43,44,43,44,43,44,45,49,50,45,0,44,0,44,49,48,43,44,45,48,49,50,43,44,45,48,49,50,43,44,45,48,49,50,43,44,45],"f":[0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[1,5],[[1,6],7],[[2,6],7],[[3,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[8,[9,[8]]],[[10,[5]]]],[[8,8,[9,[8]]],[[10,[5]]]],[[8,8,[9,[8]]],2],[[8,8,8,[9,[8]]],[[10,[5]]]],[[8,8,8,[9,[8]]],3],[[8,[9,[8]]],1],0,[[8,[9,[8]]],[[10,[5]]]],[[8,8,[9,[8]]],[[10,[5]]]],[[8,8,[9,[8]]],[[11,[2]]]],[[8,8,8,[9,[8]]],[[10,[5]]]],[[8,8,8,[9,[8]]],[[11,[3]]]],[[8,[9,[8]]],[[11,[1]]]],[[8,[9,[8]]],1],[[8,8,[9,[8]]],2],[[8,8,8,[9,[8]]],3],[1,[[10,[5]]]],[2,[[10,[5]]]],[3,[[10,[5]]]],[1,[[10,[5]]]],[2,[[10,[5]]]],[3,[[10,[5]]]],[1,[[4,[5,[10,[5]]]]]],[2,[[4,[5,[10,[5]]]]]],[3,[[4,[5,[10,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,0,[[[9,[8]],[9,[8]]],14],[[8,8,5],14],[[[9,[8]],[9,[8]]],14],[[[9,[8]],[9,[8]]],14],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[15,[9,[8]]],5],[16,5],[[15,8,8],5],[[15,[9,[8]]],[[10,[5]]]],[[17,[9,[8]]],[[10,[5]]]],[[19,[9,[8]]],[[10,[5]]]],[[15,8,8],[[10,[8]]]],[[17,8,8],[[10,[8]]]],[[19,8,8],[[10,[8]]]],[[15,6],7],[[16,6],7],[[17,6],7],[[18,6],7],[[19,6],7],[[20,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[15,[9,[8]]],16],[[17,[9,[8]]],18],[[19,[9,[8]]],20],[8,15],[[8,8],17],[[8,8,8],19],[16,[[10,[5]]]],[18,[[10,[5]]]],[20,[[10,[5]]]],[16,[[10,[5]]]],[18,[[10,[5]]]],[20,[[10,[5]]]],[[15,[9,[8]]],[[10,[5]]]],[[17,[9,[8]]],[[10,[5]]]],[[19,[9,[8]]],[[10,[5]]]],[[15,8,8],[[10,[8]]]],[[17,8,8],[[10,[8]]]],[[19,8,8],[[10,[8]]]],[16,[[4,[5,[10,[5]]]]]],[18,[[4,[5,[10,[5]]]]]],[20,[[4,[5,[10,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,21],[22,22],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[21,[9,[8]]],[[10,[5]]]],[[21,6],7],[[22,6],7],[-1,-1,[]],[-1,-1,[]],[22,8],[22,8],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[8]]],[[10,[21]]]],[[[9,[8]]],[[10,[22]]]],[21,22],[[23,8],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[[[9,[8]],8,8],[[10,[22]]]],[[[9,[8]],22],[[10,[21]]]],[[[9,[8]],-1],[[10,[22]]],23],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[24,24],[25,25],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[24,[9,[8]],[9,[8]]],[[10,[5]]]],[[24,8,8,8,8],[[10,[8]]]],[[24,6],7],[[25,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[8]]],24],[[[9,[8]]],25],[[25,[9,[8]],[9,[8]]],[[10,[5]]]],[[25,8,8,8,8],[[10,[8]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[26,[9,[8]]],[[10,[5]]]],[[26,6],7],[-1,-1,[]],[-1,-2,[],[]],[[[9,[8]]],[[10,[26]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[27,27],[28,28],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[27,[9,[8]],[9,[8]]],[[10,[5]]]],[[27,6],7],[[28,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[8]]],27],[[[9,[8]]],28],[[28,[9,[8]],[9,[8]]],[[10,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[29,[9,[8]]],5],[30,5],[[29,8,8],5],[[29,[9,[8]]],[[10,[5]]]],[[31,[9,[8]]],[[10,[5]]]],[[33,[9,[8]]],[[10,[5]]]],[[29,8,8],[[10,[8]]]],[[31,8,8],[[10,[8]]]],[[33,8,8],[[10,[8]]]],[[29,6],7],[[30,6],7],[[31,6],7],[[32,6],7],[[33,6],7],[[34,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],14],[[],14],[[],14],[[29,[9,[8]]],30],[[31,[9,[8]]],32],[[33,[9,[8]]],34],[8,[[10,[29]]]],[[8,8],[[10,[31]]]],[[8,8,8],[[10,[33]]]],[8,29],[[8,8],31],[[8,8,8],33],[30,[[10,[5]]]],[32,[[10,[5]]]],[34,[[10,[5]]]],[30,[[10,[5]]]],[32,[[10,[5]]]],[34,[[10,[5]]]],[[29,[9,[8]]],[[10,[5]]]],[[31,[9,[8]]],[[10,[5]]]],[[33,[9,[8]]],[[10,[5]]]],[[29,8,8],[[10,[8]]]],[[31,8,8],[[10,[8]]]],[[33,8,8],[[10,[8]]]],[30,[[4,[5,[10,[5]]]]]],[32,[[4,[5,[10,[5]]]]]],[34,[[4,[5,[10,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[[-1,-2],4,[],[]],[[35,[9,[8]],[9,[8]]],[[10,[5]]]],[[35,[9,[8]]],[[10,[5]]]],[[35,6],7],[-1,-1,[]],[-1,-2,[],[]],[[],14],[35,5],[[[9,[8]]],[[10,[35]]]],[35,22],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[[[9,[8]],22],[[10,[35]]]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[36,[9,[8]]],5],[37,5],[[36,8,8],5],[[36,[9,[8]]],[[10,[5]]]],[[38,[9,[8]]],[[10,[5]]]],[[40,[9,[8]]],[[10,[5]]]],[[36,8,8],[[10,[8]]]],[[38,8,8],[[10,[8]]]],[[40,8,8],[[10,[8]]]],[[36,6],7],[[37,6],7],[[38,6],7],[[39,6],7],[[40,6],7],[[41,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],14],[[],14],[[],14],[[36,[9,[8]]],37],[[38,[9,[8]]],39],[[40,[9,[8]]],41],[8,[[10,[36]]]],[[8,8],[[10,[38]]]],[[8,8,8],[[10,[40]]]],[8,36],[[8,8],38],[[8,8,8],40],[37,[[10,[5]]]],[39,[[10,[5]]]],[41,[[10,[5]]]],[37,[[10,[5]]]],[39,[[10,[5]]]],[41,[[10,[5]]]],[[36,[9,[8]]],[[10,[5]]]],[[38,[9,[8]]],[[10,[5]]]],[[40,[9,[8]]],[[10,[5]]]],[[36,8,8],[[10,[8]]]],[[38,8,8],[[10,[8]]]],[[40,8,8],[[10,[8]]]],[37,[[4,[5,[10,[5]]]]]],[39,[[4,[5,[10,[5]]]]]],[41,[[4,[5,[10,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[42,42],[[-1,-2],4,[],[]],[[42,[9,[8]],[9,[8]]],[[10,[5]]]],[[42,[9,[8]]],[[10,[5]]]],[[42,6],7],[-1,-1,[]],[-1,-2,[],[]],[[],14],[42,5],[[[9,[8]]],[[10,[42]]]],[42,22],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[[[9,[8]],22],[[10,[42]]]],0,0,0,0,0,0,0,0,[43,43],[44,44],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[45,-1],43,[46,[47,[[9,[8]]]]]],[[45,-1,-2],43,23,[46,[47,[[9,[8]]]]]],[[45,-1],44,[46,[47,[[9,[8]]]]]],[48,48],[43,43],[44,44],[45,45],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],48],[[],45],[[[9,[8]],[9,[8]]],[[10,[5]]]],[[43,[9,[8]]],[[10,[5]]]],[[[9,[8]],-1],49,[46,[47,[[9,[8]]]]]],[[43,[9,[8]]],49],[[48,6],7],[[49,6],7],[[50,6],7],[[43,6],7],[[44,6],7],[[45,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[49,49],[50,50],[43,43],[44,44],[43,[[9,[8]]]],[44,[[9,[8]]]],[-1,43,[46,[47,[[9,[8]]]]]],[-1,44,[46,[47,[[9,[8]]]]]],[[],45],[49,[[10,[5]]]],[50,[[10,[5]]]],[[45,48],45],[[[9,[8]],[9,[8]]],[[10,[5]]]],[[44,-1],[[10,[5]]],[[47,[[9,[8]]]]]],[[[9,[8]],-1],50,[46,[47,[[9,[8]]]]]],[[44,[9,[8]]],50],[49,[[4,[5,[10,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]]],"c":[],"p":[[5,"Memchr",0],[5,"Memchr2",0],[5,"Memchr3",0],[1,"tuple"],[1,"usize"],[5,"Formatter",650],[8,"Result",650],[1,"u8"],[1,"slice"],[6,"Option",651],[5,"Rev",652],[6,"Result",653],[5,"TypeId",654],[1,"bool"],[5,"One",77],[5,"OneIter",77],[5,"Two",77],[5,"TwoIter",77],[5,"Three",77],[5,"ThreeIter",77],[5,"Finder",182],[5,"Pair",182],[10,"HeuristicFrequencyRank",182],[5,"Finder",217],[5,"FinderRev",217],[5,"Finder",247],[5,"Finder",258],[5,"FinderRev",258],[5,"One",290],[5,"OneIter",290],[5,"Two",290],[5,"TwoIter",290],[5,"Three",290],[5,"ThreeIter",290],[5,"Finder",401],[5,"One",422],[5,"OneIter",422],[5,"Two",422],[5,"TwoIter",422],[5,"Three",422],[5,"ThreeIter",422],[5,"Finder",533],[5,"Finder",552],[5,"FinderRev",552],[5,"FinderBuilder",552],[10,"Sized",655],[10,"AsRef",656],[6,"Prefilter",552],[5,"FindIter",552],[5,"FindRevIter",552]],"b":[]}],\
["memoffset",{"doc":"A crate used for calculating offsets of struct members and …","t":"QQQQQQQ","n":["offset_of","offset_of_tuple","offset_of_union","raw_field","raw_field_tuple","raw_field_union","span_of"],"q":[[0,"memoffset"]],"d":["Calculates the offset of the specified field from the …","Calculates the offset of the specified field from the …","Calculates the offset of the specified union member from …","Computes a const raw pointer to the given field of the …","Computes a const raw pointer to the given field of the …","Computes a const raw pointer to the given field of the …","Produces a range instance representing the sub-slice …"],"i":[0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0],"c":[],"p":[],"b":[]}],\
["miette",{"doc":"You run miette? You run her code like the software? Oh. …","t":"PIKFKYPFPIFKPFFFGFFFPPFKIGKFFKPKNNNNNNNNQNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOMNMMNMNMNNNNNNNNNQNNNNNNNNNNQNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNMNNNNNNNNONNMNMNOQNNNNNNNNNNNNNNNNNNNNNMNNNNNNNHNNNONNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNMMNNNNNNNNNMMNMM","n":["Advice","ByteOffset","Context","DebugReportHandler","Diagnostic","Diagnostic","Err","Error","Error","ErrorHook","InstallError","IntoDiagnostic","IoError","JSONReportHandler","LabeledSpan","MietteDiagnostic","MietteError","MietteSpanContents","NamedSource","NarratableReportHandler","Ok","OutOfBounds","Report","ReportHandler","Result","Severity","SourceCode","SourceOffset","SourceSpan","SpanContents","Warning","WrapErr","and_label","and_labels","as_ref","as_ref","as_ref","as_ref","at","at_offset","bail","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","code","code","code","code","code","column","column","context","context","context","data","data","debug","debug","debug","debug","default","default","default","default","deref","deref_mut","diagnostic","diagnostic_source","diagnostic_source","display","display","downcast","downcast_mut","downcast_mut","downcast_ref","downcast_ref","drop","ensure","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_current_location","from_location","handler","handler_mut","hash","hash","help","help","help","help","help","inner","inner","into","into","into","into","into","into","into","into","into","into","into","into","into","into_diagnostic","is","is","is_empty","is_empty","label","labels","labels","labels","labels","len","len","line","line","line_count","line_count","message","miette","msg","name","name","name","name","new","new","new","new","new","new","new","new","new","new_boxed","new_named","new_with_span","offset","offset","offset","partial_cmp","read_span","read_span","related","related","render_report","render_report","render_report","root_cause","set_hook","severity","severity","severity","severity","source","source_code","source_code","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","track_caller","track_caller","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","underline","url","url","url","url","url","with_cause_chain","with_code","with_context","with_context","with_context_lines","with_footer","with_help","with_label","with_labels","with_severity","with_source_code","with_url","without_cause_chain","wrap_err","wrap_err","wrap_err","wrap_err_with","wrap_err_with"],"q":[[0,"miette"],[326,"core::convert"],[327,"core::iter::traits::collect"],[328,"core::error"],[329,"alloc::string"],[330,"core::cmp"],[331,"core::fmt"],[332,"alloc::boxed"],[333,"core::option"],[334,"core::marker"],[335,"core::marker"],[336,"core::fmt"],[337,"core::ops::range"],[338,"core::convert"],[339,"core::iter::traits::iterator"],[340,"core::fmt"],[341,"core::any"],[342,"core::ops::function"]],"d":["Just some help. Here’s how you could be doing it better.","“Raw” type for the byte offset from the beginning of a …","Compatibility re-export of <code>WrapErr</code> for interop with <code>anyhow</code> …","<code>ReportHandler</code> that renders plain text and avoids …","Adds rich metadata to your Error that can be used by <code>Report</code>…","","Contains the error value","Compatibility re-export of <code>Report</code> for interop with <code>anyhow</code> …","Critical failure. The program cannot continue. This is the …","","Error indicating that <code>set_hook()</code> was unable to install the …","Convenience trait that adds a <code>.into_diagnostic()</code> method …","Wrapper around <code>std::io::Error</code>. This is returned when …","<code>ReportHandler</code> that renders JSON output. It’s a …","A labeled <code>SourceSpan</code>.","Diagnostic that can be created at runtime.","Error enum for miette. Used by certain operations in the …","Basic implementation of the <code>SpanContents</code> trait, for …","Utility struct for when you have a regular <code>SourceCode</code> type …","<code>ReportHandler</code> that renders plain text and avoids …","Contains the success value","Returned when a <code>SourceSpan</code> extends beyond the bounds of a …","Core Diagnostic wrapper type.","Error Report Handler trait for customizing <code>miette::Report</code>","type alias for <code>Result&lt;T, Report&gt;</code>","<code>Diagnostic</code> severity. Intended to be used by <code>ReportHandler</code>s …","Represents readable source code of some sort.","Newtype that represents the <code>ByteOffset</code> from the beginning …","Span within a <code>SourceCode</code>","Contents of a <code>SourceCode</code> covered by <code>SourceSpan</code>.","Warning. Please take note.","Provides the <code>wrap_err()</code> method for <code>Result</code>.","Return new diagnostic with new label added to the existing …","Return new diagnostic with new labels added to the …","","","","","Makes a new label at specified span","Makes a new label that points at a specific offset.","Return early with an error.","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator of the chain of source errors contained by …","","","","","","","","","","","","","","","","","","","","Unique diagnostic code that can be used to look up more …","Unique diagnostic code that can be used to look up more …","","","Unique diagnostic code to look up more information about …","The 0-indexed column in the associated <code>SourceCode</code> where …","","Compatibility re-export of <code>wrap_err()</code> for interop with …","Compatibility re-export of <code>wrap_err()</code> for interop with …","Compatibility re-export of wrap_err for interop with <code>anyhow</code>","Reference to the data inside the associated span, in bytes.","","Define the report format","","","","","","","","","","Construct a <code>MietteDiagnostic</code> in more user-friendly way.","The cause of the error.","The cause of the error.","Override for the <code>Display</code> format","Override for the <code>Display</code> format","Attempt to downcast the error object to a concrete type.","Downcast this error object by mutable reference.","","Downcast this error object by reference.","","","Return early with an error if a condition is not satisfied.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Returns an offset for the <em>file</em> location of wherever this …","Little utility to help convert 1-based line/column …","Get a reference to the Handler for this Report.","Get a mutable reference to the Handler for this Report.","","","Additional help text related to this <code>Diagnostic</code>. Do you …","Additional help text related to this <code>Diagnostic</code>. Do you …","","","Additional help text related to this Diagnostic","Returns a reference the inner <code>SourceCode</code> type for this …","Returns a reference to the inner <code>SourceSpan</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts <code>Result</code> types that return regular <code>std::error::Error</code>…","Returns true if <code>E</code> is the type held by this error object.","","True if this <code>LabeledSpan</code> is empty.","Whether this <code>SourceSpan</code> has a length of zero. It may still …","Gets the (optional) label string for this <code>LabeledSpan</code>.","Labels to apply to this <code>Diagnostic</code>’s …","Labels to apply to this <code>Diagnostic</code>’s …","","Labels to apply to this <code>Diagnostic</code>’s …","Returns the number of bytes this <code>LabeledSpan</code> spans.","Total length of the <code>SourceSpan</code>, in bytes.","The 0-indexed line in the associated <code>SourceCode</code> where the …","","Total number of lines covered by this <code>SpanContents</code>.","","Displayed diagnostic message","Construct an ad-hoc <code>Report</code>.","Create a new error object from a printable error message.","Gets the name of this <code>NamedSource</code>.","An optional (file?) name for the container of this …","An optional (file?) name for the container of this …","","Create a new error object from any error type.","Create a new <code>NamedSource</code> using a regular <code>SourceCode</code> and …","Create a new <code>NarratableReportHandler</code> There are no …","Create a new <code>JSONReportHandler</code>. There are no customization …","Create a new <code>NarratableReportHandler</code>. There are no …","Create a new dynamic diagnostic with the given message.","Makes a new labeled span.","Make a new <code>MietteSpanContents</code> object.","Create a new <code>SourceSpan</code>.","Create a new error object from a boxed <code>Diagnostic</code>.","Make a new <code>MietteSpanContents</code> object, with a name for its …","Makes a new labeled span using an existing span.","Returns the 0-based starting byte offset.","The absolute offset, in bytes, from the beginning of a …","Actual byte offset.","","Read the bytes for a specific span from this SourceCode, …","","Additional related <code>Diagnostic</code>s.","Additional related <code>Diagnostic</code>s.","Render a <code>Diagnostic</code>. This function is mostly internal and …","Render a <code>Diagnostic</code>. This function is mostly internal and …","Render a <code>Diagnostic</code>. This function is mostly internal and …","The lowest level cause of this error — this error’s …","Set the error hook.","Diagnostic severity. This may be used by <code>ReportHandler</code>s to …","Diagnostic severity. This may be used by <code>ReportHandler</code>s to …","","<code>Diagnostic</code> severity. Intended to be used by <code>ReportHandler</code>s …","","Source code to apply this <code>Diagnostic</code>’s <code>Diagnostic::labels</code>…","Source code to apply this <code>Diagnostic</code>’s <code>Diagnostic::labels</code>…","<code>SourceSpan</code> representing the span covered by this …","","","","","","","","","","","","","","","Store the location of the caller who constructed this …","Store the location of the caller who constructed this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Makes a new label without text, that underlines a specific …","URL to visit for a more detailed explanation/help about …","URL to visit for a more detailed explanation/help about …","","","URL to visit for a more detailed explanation/help about …","Include the cause chain of the top-level error in the …","Return new diagnostic with the given code.","Compatibility re-export of <code>wrap_err_with()</code> for interop …","Compatibility re-export of <code>wrap_err_with()</code> for interop …","Sets the number of lines of context to show around each …","Set the footer to be displayed at the end of the report.","Return new diagnostic with the given help message.","Return new diagnostic with the given label.","Return new diagnostic with the given labels.","Return new diagnostic with the given severity.","Provide source code for this error","Return new diagnostic with the given URL.","Do not include the cause chain of the top-level error in …","Wrap the error value with a new adhoc error","Wrap the error value with a new adhoc error","Create a new error from an error message to wrap the …","Wrap the error value with a new adhoc error that is …","Wrap the error value with a new adhoc error that is …"],"i":[15,0,0,0,0,0,27,0,15,0,0,0,23,0,0,0,0,0,0,0,27,23,0,0,0,0,0,0,0,0,15,0,1,1,6,6,6,6,2,2,0,6,6,38,23,39,12,13,14,1,15,2,16,9,17,6,38,23,39,12,13,14,1,15,2,16,9,17,6,12,13,14,1,15,2,16,9,17,12,13,14,1,15,2,16,9,17,15,7,7,23,1,1,24,16,26,26,6,24,16,32,12,13,14,12,13,14,15,6,6,0,7,7,32,32,6,6,32,6,32,6,0,1,15,2,9,17,6,6,38,23,23,39,39,12,13,14,1,1,15,2,16,9,17,6,6,38,23,23,39,12,13,14,1,15,2,16,9,9,9,9,9,9,17,17,17,17,6,6,9,17,7,7,23,1,1,38,2,6,38,23,39,12,13,14,1,15,2,16,9,17,46,6,32,2,9,2,7,7,1,1,2,9,24,16,24,16,1,0,6,38,24,24,16,6,38,12,13,14,1,2,16,9,6,16,2,2,9,17,15,45,38,7,7,12,13,14,6,0,7,7,1,1,23,7,7,24,16,12,13,14,1,15,2,16,9,17,6,23,39,1,32,32,6,38,23,39,12,13,14,1,15,2,16,9,17,6,38,23,39,12,13,14,1,15,2,16,9,17,6,38,23,39,12,13,14,1,15,2,16,9,17,2,7,7,23,1,1,14,1,26,26,14,14,1,1,1,1,6,1,14,26,26,6,26,26],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,-1],1,[[3,[2]]]],[[1,-1],1,[[5,[],[[4,[2]]]]]],[6,7],[6,7],[6,8],[6,8],[[-1,-2],2,[[3,[9]]],[[3,[10]]]],[[11,-1],2,[[3,[10]]]],0,[6,7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[12,12],[13,13],[14,14],[1,1],[15,15],[2,2],[16,16],[9,9],[17,17],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[15,15],19],[7,[[22,[[21,[20]]]]]],[7,[[22,[[21,[20]]]]]],[23,[[22,[[21,[20]]]]]],[1,[[22,[[21,[20]]]]]],0,[24,25],[16,25],[[26,-1],[[27,[-2,6]]],[20,28,29],[]],[[26,-1],[[27,[-2,6]]],[20,28,29],[]],[[6,-1],6,[20,28,29]],[24,[[31,[30]]]],[16,[[31,[30]]]],[[32,7,33],34],[[12,7,33],34],[[13,7,33],34],[[14,7,33],34],[[],12],[[],13],[[],14],[[],15],[6,-1,[]],[6,-1,[]],0,[7,[[22,[7]]]],[7,[[22,[7]]]],[[32,8,33],34],[[32,8,33],34],[6,[[35,[-1,6]]],[20,36,28,29]],[6,[[22,[-1]]],[20,36,28,29]],[32,[[22,[-1]]],32],[6,[[22,[-1]]],[20,36,28,29]],[32,[[22,[-1]]],32],[6,18],0,[[1,1],37],[[15,15],37],[[2,2],37],[[9,9],37],[[17,17],37],[[6,33],34],[[6,33],34],[[38,33],34],[[23,33],34],[[23,33],34],[[39,33],34],[[39,33],34],[[12,33],34],[[13,33],34],[[14,33],34],[[1,33],34],[[1,33],34],[[15,33],34],[[2,33],34],[[16,33],34],[[9,33],34],[[17,33],34],[-1,6,[7,28,29]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[40,23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[11,9],[[[18,[11,25]]],9],[17,9],[[[41,[11]]],9],[[[18,[17,17]]],9],[-1,-1,[]],[11,17],[[],[[35,[[18,[10,17]],23]]]],[[-1,25,25],17,[[43,[42]]]],[6,32],[6,32],[[9,-1],18,44],[[17,-1],18,44],[7,[[22,[[21,[20]]]]]],[7,[[22,[[21,[20]]]]]],[23,[[22,[[21,[20]]]]]],[1,[[22,[[21,[20]]]]]],0,[38,45],[2,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[46,[[35,[-1,6]]],[]],[6,37],[32,37],[2,37],[9,37],[2,[[22,[42]]]],[7,[[22,[[21,[47]]]]]],[7,[[22,[[21,[47]]]]]],[1,[[22,[[21,[47]]]]]],0,[2,25],[9,25],[24,25],[16,25],[24,25],[16,25],0,0,[-1,6,[20,36,28,29]],[38,42],[24,[[22,[42]]]],[24,[[22,[42]]]],[16,[[22,[42]]]],[-1,6,[7,28,29]],[[-1,-2],38,[[43,[42]]],[45,28,29]],[[],12],[[],13],[[],14],[-1,1,[[3,[10]]]],[[[22,[10]],11,25],2],[[[31,[30]],9,25,25,25],16],[[17,17],9],[[[21,[7]]],6],[[10,[31,[30]],9,25,25,25],16],[[[22,[10]],-1],2,[[3,[9]]]],[2,25],[9,25],[17,11],[[15,15],[[22,[19]]]],[[45,9,25,25],[[35,[[21,[24]],23]]]],[[38,9,25,25],[[35,[[21,[24]],23]]]],[7,[[22,[[21,[47]]]]]],[7,[[22,[[21,[47]]]]]],[[12,33,7],34],[[13,-1,7],34,48],[[14,-1,7],34,48],[6,8],[49,[[27,[18,39]]]],[7,[[22,[15]]]],[7,[[22,[15]]]],[1,[[22,[15]]]],0,[23,[[22,[8]]]],[7,[[22,[45]]]],[7,[[22,[45]]]],[24,9],[16,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[[32,50],18],[[32,50],18],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,2,[[3,[9]]]],[7,[[22,[[21,[20]]]]]],[7,[[22,[[21,[20]]]]]],[23,[[22,[[21,[20]]]]]],[1,[[22,[[21,[20]]]]]],0,[14,14],[[1,-1],1,[[3,[10]]]],[[26,-2],[[27,[-3,6]]],[20,28,29],[[53,[],[[52,[-1]]]]],[]],[[26,-2],[[27,[-3,6]]],[20,28,29],[[53,[],[[52,[-1]]]]],[]],[[14,25],14],[[14,10],14],[[1,-1],1,[[3,[10]]]],[[1,-1],1,[[3,[2]]]],[[1,-1],1,[[5,[],[[4,[2]]]]]],[[1,15],1],[[6,-1],6,[45,28,29]],[[1,-1],1,[[3,[10]]]],[14,14],[[26,-1],[[27,[-2,6]]],[20,28,29],[]],[[26,-1],[[27,[-2,6]]],[20,28,29],[]],[[6,-1],6,[20,28,29]],[[26,-2],[[27,[-3,6]]],[20,28,29],[[53,[],[[52,[-1]]]]],[]],[[26,-2],[[27,[-3,6]]],[20,28,29],[[53,[],[[52,[-1]]]]],[]]],"c":[],"p":[[5,"MietteDiagnostic",0],[5,"LabeledSpan",0],[10,"Into",326],[17,"Item"],[10,"IntoIterator",327],[5,"Error",0],[10,"Diagnostic",0],[10,"Error",328],[5,"SourceSpan",0],[5,"String",329],[8,"ByteOffset",0],[5,"DebugReportHandler",0],[5,"JSONReportHandler",0],[5,"NarratableReportHandler",0],[6,"Severity",0],[5,"MietteSpanContents",0],[5,"SourceOffset",0],[1,"tuple"],[6,"Ordering",330],[10,"Display",331],[5,"Box",332],[6,"Option",333],[6,"MietteError",0],[10,"SpanContents",0],[1,"usize"],[10,"Context",0],[8,"Result",0],[10,"Send",334],[10,"Sync",334],[1,"u8"],[1,"slice"],[10,"ReportHandler",0],[5,"Formatter",331],[8,"Result",331],[6,"Result",335],[10,"Debug",331],[1,"bool"],[5,"NamedSource",0],[5,"InstallError",0],[5,"Error",336],[5,"Range",337],[1,"str"],[10,"AsRef",326],[10,"Hasher",338],[10,"SourceCode",0],[10,"IntoDiagnostic",0],[10,"Iterator",339],[10,"Write",331],[8,"ErrorHook",0],[5,"Location",340],[5,"TypeId",341],[17,"Output"],[10,"FnOnce",342]],"b":[[34,"impl-AsRef%3Cdyn+Diagnostic+%2B+Send+%2B+Sync%3E-for-Report"],[35,"impl-AsRef%3Cdyn+Diagnostic%3E-for-Report"],[36,"impl-AsRef%3Cdyn+Error%3E-for-Report"],[37,"impl-AsRef%3Cdyn+Error+%2B+Send+%2B+Sync%3E-for-Report"],[127,"impl-Debug-for-Report"],[128,"impl-Display-for-Report"],[130,"impl-Debug-for-MietteError"],[131,"impl-Display-for-MietteError"],[132,"impl-Debug-for-InstallError"],[133,"impl-Display-for-InstallError"],[137,"impl-Debug-for-MietteDiagnostic"],[138,"impl-Display-for-MietteDiagnostic"],[158,"impl-From%3Cusize%3E-for-SourceSpan"],[159,"impl-From%3C(usize,+usize)%3E-for-SourceSpan"],[160,"impl-From%3CSourceOffset%3E-for-SourceSpan"],[161,"impl-From%3CRange%3Cusize%3E%3E-for-SourceSpan"],[162,"impl-From%3C(SourceOffset,+SourceOffset)%3E-for-SourceSpan"]]}],\
["miette_derive",{"doc":"","t":"Y","n":["Diagnostic"],"q":[[0,"miette_derive"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[],"b":[]}],\
["neon",{"doc":"The Neon crate provides bindings for writing Node.js addons","t":"CCXCCCCCCPFGFPKFIFIFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFIPFKPFNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNMNNNNNNNNNNNSSSSSHKKKMNNMNNNNNNNNNNMEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEHPPIKIPPKFNNNNNNMMNNNNFGPKFFFFFFFFFFFFFFFTTPPFIPKNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFRFFKMMNNNNNNNNNNNNNNNNNNNNNNNMMNNNNNNNNNKFFNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["context","handle","main","meta","object","prelude","reflect","result","types","Call","CallContext","CallKind","ComputeContext","Construct","Context","ExecuteContext","FunctionContext","Lock","MethodContext","ModuleContext","TaskContext","argument","argument_opt","array_buffer","boolean","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boxed","buffer","clone","clone_into","compute_scoped","date","empty_array","empty_object","error","execute_scoped","export_function","export_value","exports_object","fmt","fmt","from","from","from","from","from","from","from","global","into","into","into","into","into","into","into","is_empty","kind","len","lock","new","null","number","range_error","string","this","throw","throw_error","throw_range_error","throw_type_error","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_string","type_error","type_id","type_id","type_id","type_id","type_id","type_id","type_id","undefined","DowncastError","DowncastResult","Err","Handle","Managed","Ok","Root","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","cmp","deref","deref_mut","downcast","downcast_or_throw","drop","drop","eq","finalize","fmt","fmt","fmt","fmt","from","from","from","from_raw","get_from","into","into","into","into_inner","is_a","new","or_throw","partial_cmp","set_from","strict_equals","to_inner","to_owned","to_owned","to_raw","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","BUILD_PROFILE","MAJOR","MINOR","PATCH","VERSION","version","Object","PropertyKey","This","as_this","get","get","get_from","get_opt","get_opt","get_own_property_names","get_own_property_names","get_value","get_value","root","root","set","set","set_from","CallContext","CallKind","ComputeContext","Context","ExecuteContext","Finalize","FunctionContext","Handle","JsArray","JsArrayBuffer","JsBoolean","JsBox","JsBuffer","JsError","JsFunction","JsNull","JsNumber","JsObject","JsResult","JsResultExt","JsString","JsTypedArray","JsUndefined","JsValue","MethodContext","ModuleContext","NeonResult","NeonResultExt","Object","Root","TaskContext","Value","register_module","eval","Err","Err","JsResult","JsResultExt","NeonResult","Ok","Ok","ResultExt","Throw","borrow","borrow_mut","fmt","fmt","from","into","or_throw","or_throw","to_string","try_from","try_into","type_id","DateError","DateErrorKind","Err","Finalize","JsArray","JsArrayBuffer","JsBoolean","JsBox","JsBuffer","JsDate","JsError","JsFunction","JsNull","JsNumber","JsObject","JsString","JsTypedArray","JsUndefined","JsValue","MAX_VALUE","MIN_VALUE","Ok","Overflow","StringOverflow","StringResult","Underflow","Value","as_mut_slice","as_mut_slice","as_mut_slice","as_slice","as_slice","as_slice","as_this","as_this","as_this","as_value","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","call","call_with","clone","clone","clone_into","clone_into","cmp","construct","construct_with","deref","eq","eq","error","exec","external","external","finalize","finalize","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","function","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","is_valid","kind","len","new","new","new","new","new","new","new","new","new","new","new","new","new_lossy","or_throw","partial_cmp","range_error","size","to_owned","to_owned","to_raw","to_raw","to_raw","to_raw","to_raw","to_raw","to_raw","to_raw","to_raw","to_raw","to_raw","to_raw","to_raw","to_raw","to_raw","to_string","to_string","to_string","to_vec","try_borrow","try_borrow","try_borrow","try_borrow_mut","try_borrow_mut","try_borrow_mut","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","type_error","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uninitialized","value","value","value","value","BorrowError","Item","Ref","RefMut","TypedArray","as_mut_slice","as_slice","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref_mut","drop","drop","eq","fmt","fmt","fmt","fmt","from","from","from","into","into","into","to_string","try_borrow","try_borrow_mut","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Arguments","CallOptions","ConstructOptions","apply","apply","arg","arg","args","args","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","exec","from","from","into","into","this","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"neon"],[9,"neon::context"],[108,"neon::handle"],[169,"neon::meta"],[175,"neon::object"],[193,"neon::prelude"],[226,"neon::reflect"],[227,"neon::result"],[248,"neon::types"],[521,"neon::types::buffer"],[562,"neon::types::function"],[593,"core::option"],[594,"core::marker"],[595,"core::ops::function"],[596,"core::result"],[597,"core::convert"],[598,"core::convert"],[599,"core::fmt"],[600,"core::clone"],[601,"core::cmp"],[602,"core::cmp"],[603,"core::cmp"],[604,"semver::version"],[605,"core::marker"]],"d":["Provides runtime access to the JavaScript engine.","References to garbage-collected JavaScript values.","Marks a function as the main entry point for …","Metadata about the Neon version and build.","Traits for working with JavaScript objects.","Convenience module for the most common Neon imports.","Exposes JavaScript’s reflection API to Rust.","Represents JavaScript exceptions as a Rust <code>Result</code> type.","Representations of JavaScript’s core builtin types.","","An execution context of a function call.","Indicates whether a function was called with <code>new</code>.","An execution context of a scope created by …","","An <em>execution context</em>, which represents the current state …","An execution context of a scope created by …","A shorthand for a <code>CallContext</code> with <code>this</code>-type <code>JsObject</code>.","A temporary lock of an execution context.","An alias for <code>CallContext</code>, useful for indicating that the …","An execution context of module initialization.","An execution context of a task completion callback.","Produces the <code>i</code>th argument and casts it to the type <code>V</code>, or …","Produces the <code>i</code>th argument, or <code>None</code> if <code>i</code> is greater than or …","Convenience method for creating an empty <code>JsArrayBuffer</code> …","Convenience method for creating a <code>JsBoolean</code> value.","","","","","","","","","","","","","","","Convenience method for wrapping a value in a <code>JsBox</code>.","Convenience method for creating an empty <code>JsBuffer</code> value.","","","Executes a computation in a new memory management scope …","Convenience method for creating a <code>JsDate</code> value.","Convenience method for creating an empty <code>JsArray</code> value.","Convenience method for creating an empty <code>JsObject</code> value.","Creates a direct instance of the <code>Error</code> class.","Executes a computation in a new memory management scope.","Convenience method for exporting a Neon function from a …","Exports a JavaScript value from a Neon module.","Produces a handle to a module’s exports object.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Produces a handle to the JavaScript global object.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Indicates if no arguments were passed to the function.","Indicates whether the function was called with <code>new</code>.","Indicates the number of arguments that were passed to the …","Lock the JavaScript engine, returning an RAII guard that …","Constructs a new <code>Lock</code> and locks the VM. See also …","Convenience method for creating a <code>JsNull</code> value.","Convenience method for creating a <code>JsNumber</code> value.","Creates an instance of the <code>RangeError</code> class.","Convenience method for creating a <code>JsString</code> value.","Produces a handle to the <code>this</code>-binding.","Throws a JS value.","Throws a direct instance of the <code>Error</code> class.","Throws an instance of the <code>RangeError</code> class.","Throws an instance of the <code>TypeError</code> class.","","","","","","","","","","","","","","","","Convenience method for creating a <code>JsString</code> value.","Creates an instance of the <code>TypeError</code> class.","","","","","","","","Convenience method for creating a <code>JsUndefined</code> value.","An error representing a failed downcast.","The result of a call to <code>Handle::downcast()</code>.","Contains the error value","A handle to a JavaScript value that is owned by the …","The trait of data owned by the JavaScript engine and that …","Contains the success value","A thread-safe handle that holds a reference to a …","","","","","","","Clone a reference to the contained JavaScript object. This …","","","","","","","","Attempts to downcast a handle to another type, which may …","Attempts to downcast a handle to another type, raising a …","Safely drop a <code>Root&lt;T&gt;</code> without returning the referenced …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the referenced JavaScript object and allow it to be …","Tests whether this value is an instance of the given type.","Create a reference to a JavaScript object. The object will …","","","","","Access the inner JavaScript object without consuming the …","","","","","","","","","","","","","","Safely upcast a handle to a supertype.","The current build profile (either <code>&quot;release&quot;</code> or <code>&quot;debug&quot;</code>).","The Neon major version.","The Neon minor version.","The Neon patch version.","The Neon version.","Produces a <code>semver::Version</code> data structure representing the …","The trait of all object types.","A property key in a JavaScript object.","The trait of types that can be a function’s <code>this</code> binding.","","Gets a property from a JavaScript object and attempts to …","Gets a property from a JavaScript object and attempts to …","","Gets a property from a JavaScript object that may be …","Gets a property from a JavaScript object that may be …","","","Gets a property from a JavaScript object as a <code>JsValue</code>.","Gets a property from a JavaScript object as a <code>JsValue</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains the error value","Contains the error value","Shorthand for a <code>NeonResult</code> that produces JavaScript values.","Extension trait for converting Rust <code>Result</code> values into …","The result type for throwing APIs.","Contains the success value","Contains the success value","Extension trait for converting Rust <code>Result</code> values into …","A unit type indicating that the JavaScript thread is …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","The Error struct for a Date","The error kinds corresponding to <code>DateError</code>","Contains the error value","Finalize is executed on the main JavaScript thread and …","A JavaScript array object, i.e. a value for which …","The standard JS <code>ArrayBuffer</code> type.","A JavaScript boolean primitive value.","A smart pointer for Rust data managed by the JavaScript …","The Node <code>Buffer</code> type.","A JavaScript Date object","A JS <code>Error</code> object.","A JavaScript function object.","The JavaScript <code>null</code> value.","A JavaScript number value.","A JavaScript object.","A JavaScript string primitive value.","The standard JS <code>TypedArray</code> type.","The JavaScript <code>undefined</code> value.","A JavaScript value of any type.","The largest possible Date value, defined by ECMAScript. …","The smallest possible Date value, defined by ECMAScript. …","Contains the success value","","An error produced when constructing a string that exceeds …","The result of constructing a new <code>JsString</code>.","","The trait shared by all JavaScript values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a <code>CallOptions</code> for calling this function.","","","","","","","Create a <code>ConstructOptions</code> for calling this function as a …","","","","Creates a direct instance of the <code>Error</code> class.","","Construct a new <code>Buffer</code> from bytes allocated by Rust","Construct a new <code>JsArrayBuffer</code> from bytes allocated by Rust","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","Types and traits for working with JavaScript functions.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if the Date’s value is valid. A Date is valid if …","","","Constructs a new <code>JsBox</code> containing <code>value</code>.","Constructs a new <code>Buffer</code> object, safely zero-filled.","Constructs a new <code>JsArrayBuffer</code> object, safely zero-filled.","Creates a new Date. It errors when <code>value</code> is outside the …","","","","","","","","","Creates a new Date with lossy conversion for out of bounds …","","","Creates an instance of the <code>RangeError</code> class.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an instance of the <code>TypeError</code> class.","","","","","","","","","","","","","","","","","","","Constructs a new <code>Buffer</code> object with uninitialized memory","Gets the Date’s value. An invalid Date will return …","","","","An error returned by <code>TypedArray::try_borrow</code> or …","","Wraps binary data immutably borrowed from a JavaScript …","Wraps binary data mutably borrowed from a JavaScript value.","A trait for borrowing binary data from JavaScript values","Statically checked mutable borrow of binary data.","Statically checked immutable borrow of binary data.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Dynamically checked immutable borrow of binary data, …","Dynamically checked mutable borrow of binary data, …","","","","","","","","","","The trait for specifying arguments for a function call. …","A builder for making a JavaScript function call like …","A builder for making a JavaScript constructor call like …","Make the function call. If the function returns without …","Make the constructor call. If the function returns without …","Add an argument to the arguments list.","Add an argument to the arguments list.","Replaces the arguments list with the given arguments.","Replaces the arguments list with the given arguments.","","","","","","","","","Make the function call for side effect, discarding the …","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Set the value of <code>this</code> for the function call.","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,1,1,9,9,34,33,20,1,85,18,40,34,33,20,1,85,18,40,9,9,18,18,9,9,9,9,9,9,34,34,34,18,40,34,33,20,1,85,18,40,9,34,33,20,1,85,18,40,1,1,1,9,40,9,9,9,9,1,9,9,9,9,18,34,33,20,1,85,18,40,34,33,20,1,85,18,40,9,9,34,33,20,1,85,18,40,9,0,0,55,0,0,55,0,48,7,51,48,7,51,48,7,51,7,51,51,7,7,7,7,48,48,51,48,48,7,51,51,48,7,51,50,7,48,7,51,48,7,48,55,51,7,7,48,7,51,50,51,48,7,51,48,7,51,48,7,51,7,0,0,0,0,0,0,0,0,0,4,49,49,62,49,49,49,49,49,49,49,49,49,49,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,3,0,0,0,35,3,0,0,63,63,63,63,63,63,64,65,63,63,63,63,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,23,45,71,0,0,71,0,17,11,67,17,11,67,6,47,29,5,14,17,11,67,23,24,71,30,6,47,42,13,44,72,43,29,28,69,14,17,11,67,23,24,71,30,6,47,42,13,44,72,43,29,28,69,0,69,69,71,72,71,72,72,69,69,14,71,72,30,69,17,11,15,15,14,17,11,67,23,24,24,71,30,6,47,42,13,44,72,72,43,29,28,69,14,17,11,67,23,24,71,30,6,47,42,13,44,72,43,29,28,69,14,17,11,67,23,30,6,47,42,13,44,43,29,28,69,0,14,17,11,67,23,24,71,30,6,47,42,13,44,72,43,29,28,69,28,23,24,28,14,17,11,23,47,42,13,44,43,29,28,69,23,45,72,30,44,71,72,14,17,11,67,23,30,6,47,42,13,44,43,29,28,69,5,24,72,28,17,11,67,17,11,67,14,17,11,67,23,24,71,30,6,47,42,13,44,72,43,29,28,69,14,17,11,67,23,24,71,30,6,47,42,13,44,72,43,29,28,69,44,30,14,17,11,67,23,24,71,30,6,47,42,13,44,72,43,29,28,69,17,23,13,44,43,0,83,0,0,0,83,83,79,81,80,79,81,80,79,81,81,79,81,80,79,81,80,80,79,81,80,79,81,80,80,83,83,79,81,80,79,81,80,79,81,80,0,0,0,70,73,70,73,70,73,70,73,70,73,70,73,70,73,70,70,73,70,73,70,70,73,70,73,70,73,70,73],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[-1]],2],[[3,[-2]]],4,5],[[[1,[-1]],2],[[8,[[7,[6]]]]],4],[[9,10],[[3,[11]]]],[[9,12],[[7,[13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[9,-1],[[7,[[14,[-1]]]]],[15,16]],[[9,10],[[3,[17]]]],[18,18],[[-1,-2],19,[],[]],[[9,-2],[[3,[-1]]],5,[[22,[20],[[21,[[3,[-1]]]]]]]],[[9,-1],[[25,[[7,[23]],24]]],[[27,[26]]]],[9,[[7,[28]]]],[9,[[7,[29]]]],[[9,-1],[[3,[30]]],[[32,[31]]]],[[9,-2],-1,[],[[22,[33],[[21,[-1]]]]]],[[34,31,-2],[[35,[19]]],5,[[37,[36],[[21,[[3,[-1]]]]]]]],[[34,31,[7,[-1]]],[[35,[19]]],5],[34,[[3,[29]]]],[[18,38],39],[[[40,[-1]],38],39,41],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[9,[[7,[29]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],12,4],[[[1,[-1]]],18,4],[[[1,[-1]]],2,4],[9,[[40,[9]]]],[-1,[[40,[-1]]],9],[9,[[7,[42]]]],[[9,-1],[[7,[43]]],[[27,[26]]]],[[9,-1],[[3,[30]]],[[32,[31]]]],[[9,-1],[[7,[44]]],[[32,[31]]]],[[[1,[-1]]],[[7,[-1]]],4],[[9,[7,[-1]]],[[35,[-2]]],5,[]],[[9,-1],[[35,[-2]]],[[32,[31]]],[]],[[9,-1],[[35,[-2]]],[[32,[31]]],[]],[[9,-1],[[35,[-2]]],[[32,[31]]],[]],[-1,-2,[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[[9,-1],45,[[32,[31]]]],[[9,-1],[[3,[30]]],[[32,[31]]]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[9,[[7,[47]]]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[48,[-1]],-2],[[48,[-1]]],49,9],[[[7,[-1]]],[[7,[-1]]],50],[[[51,[-1,-2]]],[[51,[-1,-2]]],[52,5],[52,5]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[[51,[-1,-2]],[51,[-1,-2]]],53,[54,5],[54,5]],[[[7,[-1]]],-1,50],[[[7,[-1]]],-1,50],[[[7,[-1]],-2],[[55,[-1,-3]]],5,9,5],[[[7,[-1]],-2],[[3,[-3]]],5,9,5],[[[48,[-1]],-2],19,49,9],[[[48,[-1]]],19,[]],[[[51,[-1,-2]],[51,[-1,-2]]],12,[56,5],[56,5]],[[[48,[-1]],-2],19,49,9],[[[48,[-1]],38],39,[]],[[[7,[-1]],38],39,[41,50]],[[[51,[-1,-2]],38],[[25,[19,57]]],5,5],[[[51,[-1,-2]],38],[[25,[19,57]]],5,5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[[7,[-1]],-2,58,58],12,5,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[48,[-1]],-2],[[7,[-1]]],49,9],[[[7,[-1]],-2],12,5,9],[[-1,-2],[[48,[-2]]],9,49],[[[55,[-1,-2]],-3],[[3,[-2]]],5,5,9],[[[51,[-1,-2]],[51,[-1,-2]]],[[8,[53]]],[59,5],[59,5]],[[[7,[-1]],-2,12,58,58],12,5,9],[[[7,[-1]],-2,[7,[-3]]],12,5,9,5],[[[48,[-1]],-2],[[7,[-1]]],49,9],[-1,-2,[],[]],[-1,-2,[],[]],[50,58],[-1,60,[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[[[7,[-1]]],[[7,[-2]]],5,[5,[0,[-1]]]],0,0,0,0,0,[[],61],0,0,0,0,[[49,-1,-2],[[35,[[7,[-3]]]]],9,62,5],[[49,-1,-2],[[35,[[7,[-3]]]]],9,62,5],[[62,-1,58,58],12,9],[[49,-1,-2],[[35,[[8,[[7,[-3]]]]]]],9,62,5],[[49,-1,-2],[[35,[[8,[[7,[-3]]]]]]],9,62,5],[[49,-1],[[3,[28]]],9],[[49,-1],[[3,[28]]],9],[[49,-1,-2],[[35,[[7,[6]]]]],9,62],[[49,-1,-2],[[35,[[7,[6]]]]],9,62],[[49,-1],[[48,[49]]],9],[[49,-1],[[48,[49]]],9],[[49,-1,-2,[7,[-3]]],[[35,[12]]],9,62,5],[[49,-1,-2,[7,[-3]]],[[35,[12]]],9,62,5],[[62,-1,12,58,58],12,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,[7,[44]]],[[3,[6]]],9],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[63,38],39],[[63,38],39],[-1,-1,[]],[-1,-2,[],[]],[[64,-1],[[3,[-2]]],9,5],[[65,-1],[[35,[-2]]],9,[]],[-1,60,[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,46,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[17,-1],[[66,[-2]]],9,[]],[[11,-1],[[66,[-2]]],9,[]],[[[67,[-1]],-2],[[66,[-3]]],68,9,[]],[[17,-1],[[66,[-2]]],9,[]],[[11,-1],[[66,[-2]]],9,[]],[[[67,[-1]],-2],[[66,[-3]]],68,9,[]],0,0,0,[[5,-1],[[7,[6]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[69,[-1]],-2,[7,[-3]],-4],[[3,[6]]],49,9,5,[[32,[[66,[[7,[6]]]]]]]],[[69,-1],70,9],[71,71],[72,72],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[72,72],53],[[[69,[-1]],-2,-3],[[3,[-1]]],49,9,[[32,[[66,[[7,[6]]]]]]]],[[69,-1],73,9],[[[14,[-1]]],-2,16,[]],[[71,71],12],[[72,72],12],[[-1,-2],[[35,[[7,[30]]]]],9,[[32,[31]]]],[[[69,[-1]],-2,[7,[-3]],-4],[[35,[19]]],49,9,5,[[32,[[66,[[7,[6]]]]]]]],[[-1,-2],[[7,[17]]],9,[[75,[[66,[74]]]],16]],[[-1,-2],[[7,[11]]],9,[[75,[[66,[74]]]],16]],[[15,-1],19,9],[[15,-1],19,9],[[[14,[-1]],38],39,16],[[17,38],39],[[11,38],39],[[[67,[-1]],38],39,41],[[23,38],39],[[24,38],39],[[24,38],39],[[71,38],39],[[30,38],39],[[6,38],39],[[47,38],39],[[42,38],39],[[13,38],39],[[44,38],39],[[72,38],39],[[72,38],39],[[43,38],39],[[29,38],39],[[28,38],39],[[[69,[-1]],38],39,[41,49]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[28,-1],12,9],[[23,-1],12,9],[24,71],[[28,-1],76,9],[[-1,-2],[[7,[[14,[-2]]]]],9,[16,15,16]],[[-1,10],[[3,[17]]],9],[[-1,10],[[3,[11]]],9],[[-1,-2],[[25,[[7,[23]],24]]],9,[[27,[26]]]],[-1,[[7,[47]]],9],[-1,[[7,[42]]],9],[[-1,12],[[7,[13]]],9],[[-1,-2],[[7,[44]]],9,[[32,[31]]]],[[-1,-2],[[7,[43]]],9,[[27,[26]]]],[-1,[[7,[29]]],9],[[-1,76],[[7,[28]]],9],[[-1,-3],[[3,[69]]],9,5,[[37,[36],[[21,[[3,[-2]]]]]]]],[[-1,-2],[[7,[23]]],9,[[27,[26]]]],[[45,-1],[[3,[44]]],9],[[72,72],[[8,[53]]]],[[-1,-2],[[35,[[7,[30]]]]],9,[[32,[31]]]],[[44,-1],77,9],[-1,-2,[],[]],[-1,-2,[],[]],[[[14,[-1]]],58,16],[17,58],[11,58],[[[67,[-1]]],58,[]],[23,58],[30,58],[6,58],[47,58],[42,58],[13,58],[44,58],[43,58],[29,58],[28,58],[[[69,[-1]]],58,49],[[5,-1],[[3,[44]]],9],[-1,60,[]],[-1,60,[]],[[28,-1],[[35,[[78,[[7,[6]]]]]]],9],[[17,[40,[-1]]],[[25,[[79,[-2]],80]]],9,[]],[[11,[40,[-1]]],[[25,[[79,[-2]],80]]],9,[]],[[[67,[-1]],[40,[-2]]],[[25,[[79,[-3]],80]]],68,9,[]],[[17,[40,[-1]]],[[25,[[81,[-2]],80]]],9,[]],[[11,[40,[-1]]],[[25,[[81,[-2]],80]]],9,[]],[[[67,[-1]],[40,[-2]]],[[25,[[81,[-3]],80]]],68,9,[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[[-1,-2],45,9,[[32,[31]]]],[[-1,-2],[[35,[[7,[30]]]]],9,[[32,[31]]]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[[-1,10],[[3,[17]]],9],[[23,-1],26,9],[[13,-1],12,9],[[44,-1],60,9],[[43,-1],26,9],0,0,0,0,0,[[[83,[],[[82,[-1]]]],-2],[[66,[-1]]],[],9],[[[83,[],[[82,[-1]]]],-2],[[66,[-1]]],[],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[79,[-1]]],-2,[],[]],[[[81,[-1]]],-2,[],[]],[[[81,[-1]]],-2,[],[]],[[[79,[-1]]],19,[]],[[[81,[-1]]],19,[]],[[80,80],12],[[[79,[-1]],38],39,41],[[[81,[-1]],38],39,41],[[80,38],39],[[80,38],39],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,60,[]],[[[83,[],[[82,[-1]]]],[40,[-2]]],[[25,[[79,[-1]],80]]],[],9],[[[83,[],[[82,[-1]]]],[40,[-2]]],[[25,[[81,[-1]],80]]],[],9],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],0,0,0,[[70,-1],[[3,[-2]]],9,5],[[73,-1],[[3,[-2]]],9,49],[[70,[7,[-1]]],70,5],[[73,[7,[-1]]],73,5],[[70,-1],70,84],[[73,-1],73,84],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[70,70],[73,73],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[70,-1],[[35,[19]]],9],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[70,[7,[-1]]],70,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,46,[]],[-1,46,[]]],"c":[],"p":[[5,"CallContext",9],[1,"i32"],[8,"JsResult",227],[10,"This",175],[10,"Value",248],[5,"JsValue",248],[5,"Handle",108],[6,"Option",593],[10,"Context",9],[1,"usize"],[5,"JsArrayBuffer",248],[1,"bool"],[5,"JsBoolean",248],[5,"JsBox",248],[10,"Finalize",248],[10,"Send",594],[5,"JsBuffer",248],[6,"CallKind",9],[1,"tuple"],[5,"ComputeContext",9],[17,"Output"],[10,"FnOnce",595],[5,"JsDate",248],[5,"DateError",248],[6,"Result",596],[1,"f64"],[10,"Into",597],[5,"JsArray",248],[5,"JsObject",248],[5,"JsError",248],[1,"str"],[10,"AsRef",597],[5,"ExecuteContext",9],[5,"ModuleContext",9],[8,"NeonResult",227],[8,"FunctionContext",9],[10,"Fn",595],[5,"Formatter",598],[8,"Result",598],[5,"Lock",9],[10,"Debug",598],[5,"JsNull",248],[5,"JsNumber",248],[5,"JsString",248],[8,"StringResult",248],[5,"TypeId",599],[5,"JsUndefined",248],[5,"Root",108],[10,"Object",175],[10,"Managed",108],[5,"DowncastError",108],[10,"Clone",600],[6,"Ordering",601],[10,"Ord",601],[8,"DowncastResult",108],[10,"PartialEq",601],[5,"Error",598],[8,"Local",602],[10,"PartialOrd",601],[5,"String",603],[5,"Version",604],[10,"PropertyKey",175],[5,"Throw",227],[10,"JsResultExt",227],[10,"ResultExt",227],[1,"slice"],[5,"JsTypedArray",248],[10,"Copy",594],[5,"JsFunction",248],[5,"CallOptions",562],[6,"DateErrorKind",248],[5,"StringOverflow",248],[5,"ConstructOptions",562],[1,"u8"],[10,"AsMut",597],[1,"u32"],[1,"isize"],[5,"Vec",605],[5,"Ref",521],[5,"BorrowError",521],[5,"RefMut",521],[17,"Item"],[10,"TypedArray",521],[10,"Arguments",562],[5,"TaskContext",9]],"b":[[131,"impl-Root%3CT%3E"],[132,"impl-Drop-for-Root%3CT%3E"],[137,"impl-Debug-for-DowncastError%3CF,+T%3E"],[138,"impl-Display-for-DowncastError%3CF,+T%3E"],[238,"impl-Display-for-Throw"],[239,"impl-Debug-for-Throw"],[345,"impl-Debug-for-DateError"],[346,"impl-Display-for-DateError"],[354,"impl-Debug-for-StringOverflow"],[355,"impl-Display-for-StringOverflow"],[542,"impl-Display-for-BorrowError"],[543,"impl-Debug-for-BorrowError"]]}],\
["neon_macros",{"doc":"Procedural macros supporting Neon","t":"X","n":["main"],"q":[[0,"neon_macros"]],"d":["Marks a function as the main entry point for …"],"i":[0],"f":[0],"c":[],"p":[],"b":[]}],\
["neon_runtime",{"doc":"","t":"CIPPPPPPGPPPPPCCCNNCCNNCCNCCNNCNNCCCCCCCCCHCCNNNCNCHHHHHHHHHHHHFHNNHNNNHNHNHNNNHHHHHHHHHHHHHHHHHHHHFNNONONNONNNHHHHHHHHHHHHHHHHHHIFIFFINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOHHHHKMMHMHHHHHHHHHHHHHHHHHHHFFNNNNNNNNNNNNNNNNNNNNNNNFNNOONNHNOONNON","n":["napi","Deferred","F32","F64","I16","I32","I64","I8","TypedArrayType","U16","U32","U64","U8","U8Clamped","array","arraybuffer","async_work","borrow","borrow_mut","buffer","call","clone","clone_into","convert","date","eq","error","external","fmt","from","fun","hash","into","lifecycle","mem","no_panic","object","primitive","promise","raw","reference","scope","setup","string","tag","to_owned","try_from","try_into","tsfn","type_id","typedarray","len","new","as_mut_slice","data","new","new_external","schedule","as_mut_slice","data","new","new_external","uninitialized","Arguments","argv","borrow","borrow_mut","data","from","get","into","is_construct","is_empty","len","len","this","try_from","try_into","type_id","to_object","to_string","new_date","value","catch_error","clear_exception","is_throwing","new_error","new_range_error","new_type_error","throw","throw_error_from_utf8","create","deref","call","construct","new","get_instance_data","set_instance_data","strict_equals","FailureBoundary","borrow","borrow_mut","both","catch_failure","exception","from","into","panic","try_from","try_into","type_id","get","get_index","get_own_property_names","get_string","new","set","set_index","set_string","boolean","boolean_value","null","number","number_value","undefined","create","reject","reject_err_message","resolve","Env","EscapableHandleScope","FunctionCallbackInfo","HandleScope","InheritedHandleScope","Local","allocate","allocate","allocate","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","enter","enter","enter","exit","exit","exit","from","from","from","into","into","into","new","new","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","word","word","get","new","reference","unreference","Root","allocate","enter","escape","exit","get_global","data","new","run_script","utf8_len","is_array","is_arraybuffer","is_boolean","is_buffer","is_date","is_error","is_function","is_null","is_number","is_object","is_promise","is_string","is_typedarray","is_undefined","CallError","ThreadsafeFunction","borrow","borrow","borrow_mut","borrow_mut","call","drop","fmt","from","from","into","into","into_inner","kind","new","reference","try_from","try_from","try_into","try_into","type_id","type_id","unref","with_capacity","TypedArrayInfo","borrow","borrow_mut","buf","data","fmt","from","info","into","length","offset","try_from","try_into","typ","type_id"],"q":[[0,"neon_runtime"],[1,"neon_runtime::napi"],[51,"neon_runtime::napi::array"],[53,"neon_runtime::napi::arraybuffer"],[57,"neon_runtime::napi::async_work"],[58,"neon_runtime::napi::buffer"],[63,"neon_runtime::napi::call"],[79,"neon_runtime::napi::convert"],[81,"neon_runtime::napi::date"],[83,"neon_runtime::napi::error"],[91,"neon_runtime::napi::external"],[93,"neon_runtime::napi::fun"],[96,"neon_runtime::napi::lifecycle"],[98,"neon_runtime::napi::mem"],[99,"neon_runtime::napi::no_panic"],[111,"neon_runtime::napi::object"],[119,"neon_runtime::napi::primitive"],[125,"neon_runtime::napi::promise"],[129,"neon_runtime::napi::raw"],[180,"neon_runtime::napi::reference"],[184,"neon_runtime::napi::scope"],[190,"neon_runtime::napi::string"],[194,"neon_runtime::napi::tag"],[208,"neon_runtime::napi::tsfn"],[233,"neon_runtime::napi::typedarray"],[248,"core::fmt"],[249,"core::fmt"],[250,"core::result"],[251,"core::any"],[252,"std::os::raw"],[253,"core::convert"],[254,"core::marker"],[255,"core::option"],[256,"core::ops::function"],[257,"core::ops::function"]],"d":["","","","","","","","","","","","","","","Facilities for working with Array <code>napi_value</code>s.","","Rust wrappers for Node-API simple asynchronous operations","","","","","","","","","","","","","Returns the argument unchanged.","Facilities for working with JS functions.","","Calls <code>U::from(self)</code>.","Environment life cycle APIs","","Utilities that <em>will</em> not panic for use in contexts where …","","","JavaScript Promise and Deferred handle","","","","Loads N-API symbols from host process. Must be called at …","","","","","","Idiomatic Rust wrappers for N-API threadsafe functions","","","Gets the length of a <code>napi_value</code> containing a JavaScript …","","Safety","","","","Schedule work to execute on the libuv thread pool","Safety","","","","","List of JavaScript arguments to a function","Returns the function arguments for a call","","","Mutates the <code>out</code> argument provided to refer to the …","Returns the argument unchanged.","Get an argument at a specific position","Calls <code>U::from(self)</code>.","","<code>true</code> if there are no arguments","Gets the number of arguments passed to the function.","Returns the number of arguments","","","","","This API is currently unused, see …","","Create a new date object","Get the value of a date object","","","","","","","","","Creates a <code>napi_external</code> from a Rust type","Returns a pointer to data stored in a <code>napi_external</code> …","","","","Safety","Safety","","<code>FailureBoundary</code>] acts as boundary between Rust and FFI …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Mutates <code>out</code> to refer to the value of the property of <code>object</code>…","Mutate the <code>out</code> argument to refer to the value at <code>index</code> in …","Mutates the <code>out</code> argument to refer to a <code>napi_value</code> …","Mutate the <code>out</code> argument to refer to the value at a named …","Mutates the <code>out</code> argument to refer to a <code>napi_value</code> …","Sets the property value of an <code>napi_value</code> object, named by …","Sets the key value of a <code>napi_value</code> at the <code>index</code> provided. …","Sets the key value of a <code>napi_value</code> at a named key. Returns …","Mutates the <code>out</code> argument provided to refer to one of the …","Get the boolean value out of a <code>Local</code> object. If the <code>Local</code> …","Mutates the <code>out</code> argument provided to refer to the global …","Mutates the <code>out</code> argument provided to refer to a newly …","Gets the underlying value of an <code>Local</code> object containing a …","Mutates the <code>out</code> argument provided to refer to the global …","Create a <code>Promise</code> and a <code>napi::Deferred</code> handle for resolving …","Rejects a promise from a <code>napi::Deferred</code> handle","Rejects a promise from a <code>napi::Deferred</code> handle with a …","Resolve a promise from a <code>napi::Deferred</code> handle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Safety","","Safety","Safety","","","","","","","","","","","","Is <code>val</code> an ArrayBuffer instance?","Is <code>val</code> a JavaScript boolean?","Is <code>val</code> a Node.js Buffer instance?","","","","","Is <code>val</code> a JavaScript number?","","Is <code>val</code> a Promise?","Is <code>val</code> a JavaScript string?","Is <code>val</code> a TypedArray instance?","","Error returned when scheduling a threadsafe function with …","Threadsafe Function encapsulate a Rust function pointer …","","","","","Schedule a threadsafe function to be executed with some …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the data that was sent when scheduling to allow …","The specific error that occurred","Creates a new unbounded N-API Threadsafe Function Safety: …","References a threadsafe function to prevent exiting the …","","","","","","","Unreferences a threadsafe function to allow exiting the …","Creates a bounded N-API Threadsafe Function Safety: <code>Env</code> …","Information describing a JavaScript <code>TypedArray</code>","","","","","","Returns the argument unchanged.","Get information describing a JavaScript <code>TypedArray</code>","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,19,0,19,19,19,0,19,0,19,0,19,19,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,26,26,26,26,26,26,26,26,26,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,31,32,30,31,32,30,31,32,30,31,32,30,31,32,30,31,30,31,32,30,31,32,30,31,32,30,31,32,30,31,30,31,32,30,31,32,30,31,32,30,31,32,30,31,0,0,0,0,0,33,33,0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,35,36,35,35,35,35,36,35,36,35,36,36,35,35,36,35,36,35,36,35,35,35,0,38,38,38,38,38,38,0,38,38,38,38,38,38,38],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[1,1],[[-1,-2],2,[],[]],0,0,[[1,1],3],0,0,[[1,4],5],[-1,-1,[]],0,[[1,-1],2,6],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],0,[-1,8,[]],0,[[9,10],11],[[10,9,11],2],[[9,10],[[13,[12]]]],[[9,14,10],15],[[9,15],[[7,[10,0]]]],[[9,-1],10,[[16,[[13,[12]]]],17]],[[9,-1,-2],2,17,17],[[9,10],[[13,[12]]]],[[9,14,10],15],[[9,15],[[7,[10,0]]]],[[9,-1],10,[[16,[[13,[12]]]],17]],[[9,15],[[7,[[2,[10,12]],0]]]],0,[[9,18],19],[-1,-2,[],[]],[-1,-2,[],[]],[[9,18,14],2],[-1,-1,[]],[[19,15],[[20,[10]]]],[-1,-2,[],[]],[[9,18],3],[19,3],[[9,18],21],[19,15],[[9,18,10],2],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[[10,9,10],3],[[10,9,10],3],[[9,22],10],[[9,10],22],[[9,10],3],[9,2],[9,3],[[9,10,10],2],[[9,10,10],2],[[9,10,10],2],[[9,10],2],[[9,12,21],2],[[9,-1],10,17],[[9,10],20],[[10,9,10,10,21,14],3],[[10,9,10,21,14],3],[[9,23,-1],[[7,[10,0]]],[[25,[9,0],[[24,[10]]]]]],[9],[[9,-1],[],17],[[9,10,10],3],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[26,9,[20,[27]],-1],2,[[28,[[20,[9]]],[[24,[10]]]]]],0,[-1,-1,[]],[-1,-2,[],[]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[[10,9,10,10],3],[[10,9,10,11],3],[[10,9,10],3],[[9,10,10,12,21],3],[[10,9],2],[[3,9,10,10,10],3],[[3,9,10,11,10],3],[[9,3,10,12,21,10],3],[[10,9,3],2],[[9,10],3],[[10,9],2],[[10,9,22],2],[[9,10],22],[[10,9],2],[9,[[2,[27,0]]]],0,[[9,27,-1],2,[[29,[23]]]],0,0,0,0,0,0,0,[[],30],[[],31],[[],32],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[30,30],[31,31],[32,32],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[],30],[[],31],[[30,9],2],[[31,9],2],[[32,9],2],[[30,9],2],[[31,9],2],[[32,9],2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],30],[[],31],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],0,0,0,0,0,0,0,[[],33],[[33,9],2],[[9,10,31,10],2],[[33,9],2],[[9,10],2],[[9,12,34,10],34],[[10,9,12,21],3],[[10,9,10],3],[[9,10],34],[[9,10],3],[[9,10],3],[[9,10],3],[[9,10],3],[[9,10],3],[[9,10],3],[[9,10],3],[[9,10],3],[[9,10],3],[[9,10],3],[[9,10],3],[[9,10],3],[[9,10],3],[[9,10],3],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[-1]],-1,[20,[0]]],[[7,[2,[36,[-1]]]]],17],[[[35,[-1]]],2,[]],[[[35,[-1]],4],5,37],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[36,[-1]]],-1,[]],0,[9,[[35,[-1]]],17],[[[35,[-1]],9],2,17],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],[[[35,[-1]],9],2,17],[[9,15],[[35,[-1]]],17],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[38,4],5],[-1,-1,[]],[[9,10],38],[-1,-2,[],[]],0,0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],0,[-1,8,[]]],"c":[],"p":[[6,"TypedArrayType",1],[1,"tuple"],[1,"bool"],[5,"Formatter",248],[8,"Result",248],[10,"Hasher",249],[6,"Result",250],[5,"TypeId",251],[8,"Env",129],[8,"Local",129],[1,"u32"],[1,"u8"],[1,"slice"],[8,"c_void",252],[1,"usize"],[10,"AsMut",253],[10,"Send",254],[8,"FunctionCallbackInfo",129],[5,"Arguments",63],[6,"Option",255],[1,"i32"],[1,"f64"],[1,"str"],[17,"Output"],[10,"Fn",256],[5,"FailureBoundary",99],[8,"Deferred",1],[10,"FnOnce",256],[10,"AsRef",253],[5,"HandleScope",129],[5,"EscapableHandleScope",129],[5,"InheritedHandleScope",129],[10,"Root",184],[1,"isize"],[5,"ThreadsafeFunction",208],[5,"CallError",208],[10,"Debug",248],[5,"TypedArrayInfo",233]],"b":[]}],\
["num_bigint",{"doc":"Big Integer Types for Rust","tn":["BigInt","BigUint","Minus","NoSign","ParseBigIntError","Plus","Sign","ToBigInt","ToBigUint","TryFromBigIntError","U32Digits","U64Digits","abs","abs_sub","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","assign_from_slice","assign_from_slice","average_ceil","average_ceil","average_floor","average_floor","bit","bit","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","cbrt","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_div_euclid","checked_div_euclid","checked_mul","checked_mul","checked_mul","checked_rem_euclid","checked_rem_euclid","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","count","count","count_ones","default","default","description","description","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_ceil","div_ceil","div_euclid","div_euclid","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","divides","eq","eq","eq","eq","eq","extended_gcd_lcm","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be_bytes","from_be_bytes","from_biguint","from_bytes_be","from_bytes_be","from_bytes_le","from_bytes_le","from_f64","from_f64","from_i128","from_i128","from_i64","from_i64","from_le_bytes","from_le_bytes","from_radix_be","from_radix_be","from_radix_le","from_radix_le","from_signed_bytes_be","from_signed_bytes_le","from_slice","from_slice","from_str","from_str","from_str_radix","from_str_radix","from_u128","from_u128","from_u64","from_u64","gcd","gcd","gcd_lcm","gcd_lcm","hash","hash","hash","into","into","into","into","into","into","into","into_iter","into_iter","into_original","into_parts","is_even","is_even","is_multiple_of","is_multiple_of","is_negative","is_odd","is_odd","is_one","is_one","is_positive","is_zero","is_zero","iter_u32_digits","iter_u32_digits","iter_u64_digits","iter_u64_digits","last","last","lcm","lcm","len","len","magnitude","mod_floor","mod_floor","modpow","modpow","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","new","new","next","next","next_back","next_back","next_multiple_of","next_multiple_of","not","not","nth","nth_root","nth_root","nth_root","nth_root","one","one","parse_bytes","parse_bytes","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","prev_multiple_of","prev_multiple_of","product","product","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","set_bit","set_bit","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","sign","signum","size_hint","size_hint","sqrt","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_be_bytes","to_be_bytes","to_bigint","to_bigint","to_bigint","to_biguint","to_biguint","to_biguint","to_biguint","to_bytes_be","to_bytes_be","to_bytes_le","to_bytes_le","to_f32","to_f32","to_f64","to_f64","to_i128","to_i128","to_i64","to_i64","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_radix_be","to_radix_be","to_radix_le","to_radix_le","to_signed_bytes_be","to_signed_bytes_le","to_str_radix","to_str_radix","to_string","to_string","to_string","to_string","to_u128","to_u128","to_u32_digits","to_u32_digits","to_u64","to_u64","to_u64_digits","to_u64_digits","trailing_ones","trailing_zeros","trailing_zeros","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","zero"],"q":[[0,"num_bigint"],[1241,"core::option"],[1242,"core::clone"],[1243,"core::cmp"],[1244,"core::fmt"],[1245,"core::cmp"],[1246,"core::fmt"],[1247,"core::hash"],[1248,"alloc::vec"],[1249,"core::iter::traits::iterator"],[1250,"alloc::string"],[1251,"core::any"]],"d":["A big signed integer type.","A big unsigned integer type.","","","","","A <code>Sign</code> is a <code>BigInt</code>’s composing element.","A generic trait for converting a value to a <code>BigInt</code>. This …","A generic trait for converting a value to a <code>BigUint</code>.","The error type returned when a checked conversion …","An iterator of <code>u32</code> digits representation of a <code>BigUint</code> or …","An iterator of <code>u64</code> digits representation of a <code>BigUint</code> or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reinitializes a <code>BigInt</code>.","Assign a value to a <code>BigUint</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns whether the bit in position <code>bit</code> is set, using the …","Returns whether the bit in the given position is set","","","","","","","","","","","","","","","","","","","","","","","","","Determines the fewest bits necessary to express the <code>BigInt</code>,","Determines the fewest bits necessary to express the <code>BigUint</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the truncated principal cube root of <code>self</code> – see …","","","Returns the truncated principal cube root of <code>self</code> – see …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of one bits.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","","","","","","Greatest common divisor, least common multiple, and …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","","","","","","","Creates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …","Creates and initializes a <code>BigUint</code>. Each <code>u8</code> of the input …","Creates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …","Creates and initializes a <code>BigUint</code>. Each <code>u8</code> of the input …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","","","Calculates the Greatest Common Divisor (GCD) of the number …","Calculates the Greatest Common Divisor (GCD) of the number …","Calculates the Greatest Common Divisor (GCD) and Lowest …","Calculates the Greatest Common Divisor (GCD) and Lowest …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Extract the original value, if available. The value will …","Convert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","","","","","","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","","","Calculates the Lowest Common Multiple (LCM) of the number …","Calculates the Lowest Common Multiple (LCM) of the number …","","","Returns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.","","","Returns <code>(self ^ exponent) mod modulus</code>","Returns <code>(self ^ exponent) % modulus</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Negate <code>Sign</code> value.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","","","Rounds up to nearest multiple of argument.","Rounds up to nearest multiple of argument.","","","","","Returns the truncated principal <code>n</code>th root of <code>self</code> – See …","","Returns the truncated principal <code>n</code>th root of <code>self</code> – see …","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>. The input slice must …","","","","","","","","","","","","","","","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self ^ exponent</code>.","Rounds down to nearest multiple of argument.","Rounds down to nearest multiple of argument.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets or clears the bit in the given position, using the two…","Sets or clears the bit in the given position","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the sign of the <code>BigInt</code> as a <code>Sign</code>.","","","","Returns the truncated principal square root of <code>self</code> – …","","Returns the truncated principal square root of <code>self</code> – …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts the value of <code>self</code> to a <code>BigInt</code>.","","","Converts the value of <code>self</code> to a <code>BigUint</code>.","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …","","","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","","","","","","","","","","","","","","","","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in little-endian …","Returns the integer in the requested base in little-endian …","Returns the two’s-complement byte representation of the …","Returns the two’s-complement byte representation of the …","Returns the integer formatted as a string in the given …","Returns the integer formatted as a string in the given …","","","","","","","Returns the sign and the <code>u32</code> digits representation of the …","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …","","","Returns the sign and the <code>u64</code> digits representation of the …","Returns the <code>u64</code> digits representation of the <code>BigUint</code> …","Returns the number of least-significant bits that are ones.","Returns the number of least-significant bits that are zero,","Returns the number of least-significant bits that are zero,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,16,16,0,16,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,1,14,1,14,1,1,1,1,14,14,14,14,1,1,14,14,1,1,1,1,14,14,14,14,1,1,14,14,1,14,1,1,1,1,14,14,14,14,1,1,14,14,1,24,25,14,16,20,21,1,24,25,14,16,20,21,1,1,14,14,1,1,14,1,1,14,1,14,1,1,14,1,14,1,1,14,1,14,16,20,21,1,14,1,14,16,20,21,1,14,16,24,25,14,1,14,20,21,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,16,20,21,1,1,1,1,1,1,1,14,14,14,14,14,14,16,20,20,21,21,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,24,25,14,14,14,14,14,14,14,14,16,20,21,1,14,1,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,1,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,16,1,24,25,14,16,20,21,24,25,21,1,1,14,1,14,1,1,14,1,14,1,1,14,1,14,1,14,24,25,1,14,24,25,1,1,14,1,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,16,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,1,16,1,14,24,25,24,25,1,14,1,1,25,1,1,14,14,1,14,1,14,1,14,16,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,14,1,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,1,14,1,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,24,25,1,1,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,38,1,14,39,1,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,16,20,21,1,14,1,14,1,1,1,14,1,14,20,21,1,14,1,14,1,14,1,14,14,1,14,1,24,25,14,14,14,14,14,14,14,14,14,16,20,21,1,24,25,14,16,20,21,1,24,25,14,16,20,21,1,14],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[[1,1],1],[[1,2],1],[[1,3],1],[[1,4],1],[[1,5],1],[[1,6],1],[[1,1],1],[[1,7],1],[[1,8],1],[[1,8],1],[[1,2],1],[[1,9],1],[[1,10],1],[[1,9],1],[[1,10],1],[[1,6],1],[[1,9],1],[[1,6],1],[[1,8],1],[[1,9],1],[[1,7],1],[[1,5],1],[[1,3],1],[[1,11],1],[[1,12],1],[[1,7],1],[[1,4],1],[[1,13],1],[[1,2],1],[[1,1],1],[[1,2],1],[[1,11],1],[[1,12],1],[[1,6],1],[[1,11],1],[[1,13],1],[[1,13],1],[[1,7],1],[[1,12],1],[[1,11],1],[[1,1],1],[[1,4],1],[[1,10],1],[[1,3],1],[[1,10],1],[[1,5],1],[[1,8],1],[[1,1],1],[[1,3],1],[[1,4],1],[[1,13],1],[[1,12],1],[[1,5],1],[[14,6],14],[[14,6],14],[[14,11],14],[[14,2],14],[[14,2],14],[[14,3],14],[[14,8],14],[[14,3],14],[[14,14],14],[[14,11],14],[[14,8],14],[[14,8],14],[[14,11],14],[[14,14],14],[[14,5],14],[[14,3],14],[[14,6],14],[[14,14],14],[[14,11],14],[[14,14],14],[[14,2],14],[[14,5],14],[[14,6],14],[[14,5],14],[[14,2],14],[[14,5],14],[[14,8],14],[[14,3],14],[[1,4],15],[[1,8],15],[[1,12],15],[[1,6],15],[[1,5],15],[[1,13],15],[[1,7],15],[[1,3],15],[[1,11],15],[[1,1],15],[[1,10],15],[[1,1],15],[[1,2],15],[[1,9],15],[[14,14],15],[[14,5],15],[[14,11],15],[[14,2],15],[[14,3],15],[[14,6],15],[[14,8],15],[[14,14],15],[[1,16,[17,[11]]],15],[[14,[17,[11]]],15],[[-1,-2],-2,[],[]],[[-1,-2],-2,[],[]],[[-1,-2],-2,[],[]],[[-1,-2],-2,[],[]],[[1,8],18],[[14,8],18],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[1,1],15],[[1,1],15],[[14,14],15],[[14,14],15],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[1,1],15],[[1,1],15],[[14,14],15],[[14,14],15],[1,8],[14,8],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[1,1],15],[[1,1],15],[[14,14],15],[[14,14],15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[1,1],[14,14],[14,14],[[1,1],[[19,[1]]]],[[1,1],[[19,[1]]]],[[14,14],[[19,[14]]]],[[1,1],[[19,[1]]]],[[1,1],[[19,[1]]]],[[14,14],[[19,[14]]]],[[1,1],[[19,[1]]]],[[14,14],[[19,[14]]]],[[1,1],[[19,[1]]]],[[1,1],[[19,[1]]]],[[14,14],[[19,[14]]]],[[1,1],[[19,[1]]]],[[14,14],[[19,[14]]]],[[1,1],[[19,[1]]]],[[1,1],[[19,[1]]]],[[14,14],[[19,[14]]]],[1,1],[14,14],[16,16],[20,20],[[[21,[-1]]],[[21,[-1]]],22],[[1,1],15],[[14,14],15],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[1,1],23],[[14,14],23],[[16,16],23],[24,5],[25,5],[14,8],[[],1],[[],14],[20,26],[[[21,[-1]]],26,27],[[1,12],1],[[1,6],1],[[1,9],1],[[1,1],1],[[1,11],1],[[1,4],1],[[1,5],1],[[1,7],1],[[1,3],1],[[1,8],1],[[1,9],1],[[1,2],1],[[1,6],1],[[1,11],1],[[1,10],1],[[1,6],1],[[1,3],1],[[1,10],1],[[1,13],1],[[1,8],1],[[1,9],1],[[1,5],1],[[1,1],1],[[1,3],1],[[1,5],1],[[1,9],1],[[1,13],1],[[1,1],1],[[1,11],1],[[1,2],1],[[1,12],1],[[1,7],1],[[1,13],1],[[1,7],1],[[1,8],1],[[1,2],1],[[1,12],1],[[1,4],1],[[1,4],1],[[1,13],1],[[1,3],1],[[1,2],1],[[1,10],1],[[1,12],1],[[1,8],1],[[1,11],1],[[1,10],1],[[1,6],1],[[1,7],1],[[1,4],1],[[1,1],1],[[1,5],1],[[14,14],14],[[14,8],14],[[14,2],14],[[14,5],14],[[14,6],14],[[14,11],14],[[14,8],14],[[14,14],14],[[14,5],14],[[14,6],14],[[14,3],14],[[14,14],14],[[14,5],14],[[14,3],14],[[14,11],14],[[14,3],14],[[14,8],14],[[14,14],14],[[14,8],14],[[14,3],14],[[14,11],14],[[14,2],14],[[14,5],14],[[14,6],14],[[14,2],14],[[14,11],14],[[14,2],14],[[14,6],14],[[1,10],15],[[1,1],15],[[1,11],15],[[1,13],15],[[1,7],15],[[1,9],15],[[1,2],15],[[1,8],15],[[1,1],15],[[1,3],15],[[1,5],15],[[1,12],15],[[1,4],15],[[1,6],15],[[14,8],15],[[14,14],15],[[14,14],15],[[14,11],15],[[14,3],15],[[14,2],15],[[14,6],15],[[14,5],15],[[1,1],1],[[14,14],14],[[1,1],1],[[14,14],14],[[1,1],1],[[14,14],14],[[1,1],[[15,[1,1]]]],[[14,14],[[15,[14,14]]]],[[1,1],[[15,[1,1]]]],[[14,14],[[15,[14,14]]]],[[1,1],18],[[14,14],18],[[1,1],18],[[14,14],18],[[16,16],18],[[20,20],18],[[[21,[-1]],[21,[-1]]],18,28],[[1,1],[[15,[[29,[1]],1]]]],[[1,30],31],[[1,30],31],[[1,30],31],[[1,30],31],[[1,30],31],[[1,30],31],[[14,30],31],[[14,30],31],[[14,30],31],[[14,30],31],[[14,30],31],[[14,30],31],[[16,30],31],[[20,30],31],[[20,30],31],[[[21,[-1]],30],31,[]],[[[21,[-1]],30],31,27],[8,1],[4,1],[11,1],[6,1],[5,1],[13,1],[10,1],[-1,-1,[]],[2,1],[7,1],[12,1],[9,1],[18,1],[3,1],[14,1],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[8,14],[11,14],[5,14],[6,14],[2,14],[18,14],[3,14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,1,[]],[-1,14,[]],[[16,14],1],[[16,[17,[3]]],1],[[[17,[3]]],14],[[16,[17,[3]]],1],[[[17,[3]]],14],[32,[[19,[1]]]],[32,[[19,[14]]]],[10,[[19,[1]]]],[10,[[19,[14]]]],[4,[[19,[1]]]],[4,[[19,[14]]]],[-1,1,[]],[-1,14,[]],[[16,[17,[3]],11],[[19,[1]]]],[[[17,[3]],11],[[19,[14]]]],[[16,[17,[3]],11],[[19,[1]]]],[[[17,[3]],11],[[19,[14]]]],[[[17,[3]]],1],[[[17,[3]]],1],[[16,[17,[11]]],1],[[[17,[11]]],14],[26,[[33,[1,20]]]],[26,[[33,[14,20]]]],[[26,11],[[33,[1,20]]]],[[26,11],[[33,[14,20]]]],[2,[[19,[1]]]],[2,[[19,[14]]]],[8,[[19,[1]]]],[8,[[19,[14]]]],[[1,1],1],[[14,14],14],[[1,1],[[15,[1,1]]]],[[14,14],[[15,[14,14]]]],[[1,-1],15,34],[[14,-1],15,34],[[16,-1],15,34],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[21,[-1]]],-1,[]],[1,[[15,[16,14]]]],[1,18],[14,18],[[1,1],18],[[14,14],18],[1,18],[1,18],[14,18],[1,18],[14,18],[1,18],[1,18],[14,18],[1,24],[14,24],[1,25],[14,25],[24,[[19,[11]]]],[25,[[19,[8]]]],[[1,1],1],[[14,14],14],[24,5],[25,5],[1,14],[[1,1],1],[[14,14],14],[[1,1,1],1],[[14,14,14],14],[[1,11],1],[[1,5],1],[[1,4],1],[[1,6],1],[[1,11],1],[[1,2],1],[[1,13],1],[[1,2],1],[[1,8],1],[[1,8],1],[[1,10],1],[[1,6],1],[[1,2],1],[[1,1],1],[[1,1],1],[[1,11],1],[[1,8],1],[[1,7],1],[[1,4],1],[[1,1],1],[[1,10],1],[[1,10],1],[[1,6],1],[[1,8],1],[[1,9],1],[[1,3],1],[[1,4],1],[[1,5],1],[[1,5],1],[[1,7],1],[[1,10],1],[[1,9],1],[[1,7],1],[[1,3],1],[[1,12],1],[[1,11],1],[[1,12],1],[[1,2],1],[[1,4],1],[[1,12],1],[[1,13],1],[[1,13],1],[[1,5],1],[[1,7],1],[[1,3],1],[[1,6],1],[[1,9],1],[[1,1],1],[[1,12],1],[[1,9],1],[[1,13],1],[[1,3],1],[[14,5],14],[[14,8],14],[[14,8],14],[[14,2],14],[[14,5],14],[[14,11],14],[[14,2],14],[[14,3],14],[[14,5],14],[[14,2],14],[[14,8],14],[[14,11],14],[[14,11],14],[[14,2],14],[[14,6],14],[[14,3],14],[[14,6],14],[[14,14],14],[[14,8],14],[[14,6],14],[[14,11],14],[[14,3],14],[[14,14],14],[[14,5],14],[[14,14],14],[[14,14],14],[[14,6],14],[[14,3],14],[[16,16],16],[[1,1],15],[[1,3],15],[[1,12],15],[[1,1],15],[[1,2],15],[[1,11],15],[[1,9],15],[[1,5],15],[[1,7],15],[[1,6],15],[[1,10],15],[[1,13],15],[[1,8],15],[[1,4],15],[[14,14],15],[[14,3],15],[[14,6],15],[[14,14],15],[[14,2],15],[[14,5],15],[[14,8],15],[[14,11],15],[1,1],[1,1],[16,16],[[16,[35,[11]]],1],[[[35,[11]]],14],[24,[[19,[11]]]],[25,[[19,[8]]]],[24,[[19,[-1]]],[]],[25,[[19,[-1]]],[]],[[1,1],1],[[14,14],14],[1,1],[1,1],[[25,5],[[19,[8]]]],[[1,11],1],[[1,11],1],[[14,11],14],[[14,11],14],[[],1],[[],14],[[[17,[3]],11],[[19,[1]]]],[[[17,[3]],11],[[19,[14]]]],[[1,1],[[19,[23]]]],[[14,14],[[19,[23]]]],[[16,16],[[19,[23]]]],[[1,14],1],[[1,3],1],[[1,11],1],[[1,6],1],[[1,11],1],[[1,14],1],[[1,3],1],[[1,5],1],[[1,8],1],[[1,2],1],[[1,6],1],[[1,14],1],[[1,11],1],[[1,11],1],[[1,8],1],[[1,2],1],[[1,11],1],[[1,14],1],[[1,2],1],[[1,8],1],[[1,3],1],[[1,6],1],[[1,3],1],[[1,5],1],[[1,5],1],[[1,8],1],[[1,5],1],[[1,6],1],[[1,2],1],[[14,14],14],[[14,11],14],[[14,3],14],[[14,6],14],[[14,6],14],[[14,2],14],[[14,3],14],[[14,11],14],[[14,8],14],[[14,5],14],[[14,5],14],[[14,14],14],[[14,6],14],[[14,2],14],[[14,5],14],[[14,14],14],[[14,8],14],[[14,8],14],[[14,2],14],[[14,2],14],[[14,11],14],[[14,3],14],[[14,6],14],[[14,14],14],[[14,11],14],[[14,3],14],[[14,8],14],[[14,5],14],[[14,11],14],[[1,1],1],[[14,14],14],[-2,1,[],[[37,[],[[36,[-1]]]]]],[-2,14,[],[[37,[],[[36,[-1]]]]]],[[1,10],1],[[1,7],1],[[1,12],1],[[1,1],1],[[1,5],1],[[1,13],1],[[1,3],1],[[1,8],1],[[1,9],1],[[1,2],1],[[1,10],1],[[1,4],1],[[1,6],1],[[1,3],1],[[1,5],1],[[1,3],1],[[1,7],1],[[1,9],1],[[1,13],1],[[1,12],1],[[1,9],1],[[1,11],1],[[1,7],1],[[1,2],1],[[1,12],1],[[1,13],1],[[1,11],1],[[1,5],1],[[1,4],1],[[1,8],1],[[1,8],1],[[1,12],1],[[1,2],1],[[1,11],1],[[1,11],1],[[1,7],1],[[1,1],1],[[1,13],1],[[1,1],1],[[1,6],1],[[1,5],1],[[1,4],1],[[1,9],1],[[1,10],1],[[1,4],1],[[1,2],1],[[1,10],1],[[1,3],1],[[1,6],1],[[1,8],1],[[1,1],1],[[1,6],1],[[14,11],14],[[14,5],14],[[14,3],14],[[14,8],14],[[14,3],14],[[14,8],14],[[14,2],14],[[14,8],14],[[14,6],14],[[14,14],14],[[14,11],14],[[14,6],14],[[14,5],14],[[14,3],14],[[14,11],14],[[14,2],14],[[14,6],14],[[14,14],14],[[14,6],14],[[14,14],14],[[14,11],14],[[14,5],14],[[14,5],14],[[14,2],14],[[14,3],14],[[14,14],14],[[14,2],14],[[14,8],14],[[1,7],15],[[1,11],15],[[1,1],15],[[1,13],15],[[1,6],15],[[1,4],15],[[1,5],15],[[1,12],15],[[1,2],15],[[1,1],15],[[1,8],15],[[1,9],15],[[1,10],15],[[1,3],15],[[14,14],15],[[14,2],15],[[14,8],15],[[14,6],15],[[14,11],15],[[14,5],15],[[14,14],15],[[14,3],15],[[1,1],1],[[14,14],14],[[1,8,18],15],[[14,8,18],15],[1,15],[14,15],[1,15],[14,15],[[1,4],1],[[1,6],1],[[1,4],1],[[1,5],1],[[1,7],1],[[1,13],1],[[1,8],1],[[1,11],1],[[1,10],1],[[1,6],1],[[1,11],1],[[1,6],1],[[1,13],1],[[1,10],1],[[1,6],1],[[1,5],1],[[1,13],1],[[1,3],1],[[1,3],1],[[1,7],1],[[1,7],1],[[1,9],1],[[1,2],1],[[1,12],1],[[1,3],1],[[1,10],1],[[1,9],1],[[1,8],1],[[1,8],1],[[1,2],1],[[1,11],1],[[1,2],1],[[1,11],1],[[1,13],1],[[1,4],1],[[1,9],1],[[1,5],1],[[1,9],1],[[1,7],1],[[1,4],1],[[1,12],1],[[1,5],1],[[1,12],1],[[1,8],1],[[1,3],1],[[1,2],1],[[1,10],1],[[1,12],1],[[14,3],14],[[14,6],14],[[14,6],14],[[14,10],14],[[14,13],14],[[14,10],14],[[14,12],14],[[14,7],14],[[14,2],14],[[14,5],14],[[14,4],14],[[14,12],14],[[14,4],14],[[14,3],14],[[14,4],14],[[14,10],14],[[14,11],14],[[14,12],14],[[14,12],14],[[14,7],14],[[14,9],14],[[14,8],14],[[14,6],14],[[14,11],14],[[14,9],14],[[14,9],14],[[14,9],14],[[14,2],14],[[14,7],14],[[14,5],14],[[14,8],14],[[14,2],14],[[14,13],14],[[14,13],14],[[14,10],14],[[14,7],14],[[14,5],14],[[14,6],14],[[14,11],14],[[14,3],14],[[14,3],14],[[14,8],14],[[14,11],14],[[14,4],14],[[14,2],14],[[14,5],14],[[14,13],14],[[14,8],14],[[1,7],15],[[1,13],15],[[1,5],15],[[1,8],15],[[1,10],15],[[1,6],15],[[1,9],15],[[1,10],15],[[1,13],15],[[1,12],15],[[1,8],15],[[1,3],15],[[1,4],15],[[1,2],15],[[1,11],15],[[1,9],15],[[1,7],15],[[1,5],15],[[1,6],15],[[1,2],15],[[1,3],15],[[1,4],15],[[1,12],15],[[1,11],15],[[14,7],15],[[14,12],15],[[14,7],15],[[14,9],15],[[14,2],15],[[14,3],15],[[14,6],15],[[14,4],15],[[14,5],15],[[14,6],15],[[14,8],15],[[14,10],15],[[14,8],15],[[14,4],15],[[14,3],15],[[14,2],15],[[14,10],15],[[14,13],15],[[14,5],15],[[14,12],15],[[14,9],15],[[14,11],15],[[14,13],15],[[14,11],15],[[1,9],1],[[1,4],1],[[1,7],1],[[1,7],1],[[1,5],1],[[1,11],1],[[1,13],1],[[1,7],1],[[1,6],1],[[1,12],1],[[1,11],1],[[1,9],1],[[1,8],1],[[1,7],1],[[1,4],1],[[1,12],1],[[1,6],1],[[1,13],1],[[1,2],1],[[1,3],1],[[1,9],1],[[1,8],1],[[1,13],1],[[1,11],1],[[1,2],1],[[1,10],1],[[1,5],1],[[1,3],1],[[1,5],1],[[1,13],1],[[1,10],1],[[1,11],1],[[1,8],1],[[1,4],1],[[1,2],1],[[1,4],1],[[1,10],1],[[1,12],1],[[1,6],1],[[1,5],1],[[1,3],1],[[1,2],1],[[1,6],1],[[1,12],1],[[1,3],1],[[1,8],1],[[1,10],1],[[1,9],1],[[14,4],14],[[14,10],14],[[14,2],14],[[14,6],14],[[14,7],14],[[14,4],14],[[14,10],14],[[14,9],14],[[14,10],14],[[14,8],14],[[14,12],14],[[14,13],14],[[14,3],14],[[14,8],14],[[14,2],14],[[14,8],14],[[14,9],14],[[14,4],14],[[14,10],14],[[14,13],14],[[14,9],14],[[14,9],14],[[14,3],14],[[14,5],14],[[14,3],14],[[14,6],14],[[14,13],14],[[14,11],14],[[14,12],14],[[14,13],14],[[14,2],14],[[14,5],14],[[14,5],14],[[14,2],14],[[14,7],14],[[14,7],14],[[14,6],14],[[14,6],14],[[14,5],14],[[14,11],14],[[14,7],14],[[14,11],14],[[14,12],14],[[14,3],14],[[14,4],14],[[14,8],14],[[14,11],14],[[14,12],14],[[1,13],15],[[1,9],15],[[1,8],15],[[1,7],15],[[1,11],15],[[1,6],15],[[1,4],15],[[1,6],15],[[1,11],15],[[1,5],15],[[1,10],15],[[1,8],15],[[1,2],15],[[1,7],15],[[1,2],15],[[1,4],15],[[1,5],15],[[1,3],15],[[1,9],15],[[1,12],15],[[1,13],15],[[1,12],15],[[1,10],15],[[1,3],15],[[14,12],15],[[14,5],15],[[14,6],15],[[14,12],15],[[14,7],15],[[14,2],15],[[14,3],15],[[14,3],15],[[14,10],15],[[14,10],15],[[14,9],15],[[14,6],15],[[14,2],15],[[14,4],15],[[14,4],15],[[14,9],15],[[14,5],15],[[14,13],15],[[14,8],15],[[14,11],15],[[14,11],15],[[14,13],15],[[14,8],15],[[14,7],15],[1,16],[1,1],[24,[[15,[5,[19,[5]]]]]],[25,[[15,[5,[19,[5]]]]]],[1,1],[1,1],[14,14],[14,14],[[1,4],1],[[1,3],1],[[1,1],1],[[1,2],1],[[1,8],1],[[1,12],1],[[1,10],1],[[1,2],1],[[1,11],1],[[1,3],1],[[1,13],1],[[1,12],1],[[1,7],1],[[1,5],1],[[1,1],1],[[1,7],1],[[1,10],1],[[1,3],1],[[1,1],1],[[1,2],1],[[1,3],1],[[1,9],1],[[1,13],1],[[1,7],1],[[1,8],1],[[1,6],1],[[1,9],1],[[1,11],1],[[1,1],1],[[1,13],1],[[1,6],1],[[1,8],1],[[1,4],1],[[1,11],1],[[1,5],1],[[1,6],1],[[1,9],1],[[1,6],1],[[1,2],1],[[1,11],1],[[1,8],1],[[1,10],1],[[1,10],1],[[1,4],1],[[1,9],1],[[1,4],1],[[1,12],1],[[1,7],1],[[1,12],1],[[1,5],1],[[1,13],1],[[1,5],1],[[14,5],14],[[14,5],14],[[14,3],14],[[14,3],14],[[14,6],14],[[14,11],14],[[14,3],14],[[14,6],14],[[14,8],14],[[14,11],14],[[14,6],14],[[14,2],14],[[14,8],14],[[14,11],14],[[14,2],14],[[14,11],14],[[14,14],14],[[14,14],14],[[14,5],14],[[14,3],14],[[14,2],14],[[14,14],14],[[14,6],14],[[14,8],14],[[14,2],14],[[14,5],14],[[14,14],14],[[14,8],14],[[1,8],15],[[1,6],15],[[1,3],15],[[1,10],15],[[1,1],15],[[1,13],15],[[1,12],15],[[1,4],15],[[1,2],15],[[1,9],15],[[1,5],15],[[1,7],15],[[1,11],15],[[1,1],15],[[14,6],15],[[14,3],15],[[14,14],15],[[14,5],15],[[14,2],15],[[14,11],15],[[14,8],15],[[14,14],15],[-2,1,[],[[37,[],[[36,[-1]]]]]],[-2,14,[],[[37,[],[[36,[-1]]]]]],[1,-1,[]],[14,-1,[]],[38,[[19,[1]]]],[1,[[19,[1]]]],[14,[[19,[1]]]],[39,[[19,[14]]]],[1,[[19,[14]]]],[1,[[19,[14]]]],[14,[[19,[14]]]],[1,[[15,[16,[35,[3]]]]]],[14,[[35,[3]]]],[1,[[15,[16,[35,[3]]]]]],[14,[[35,[3]]]],[1,[[19,[40]]]],[14,[[19,[40]]]],[1,[[19,[32]]]],[14,[[19,[32]]]],[1,[[19,[10]]]],[14,[[19,[10]]]],[1,[[19,[4]]]],[14,[[19,[4]]]],[1,-1,[]],[14,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,11],[[15,[16,[35,[3]]]]]],[[14,11],[[35,[3]]]],[[1,11],[[15,[16,[35,[3]]]]]],[[14,11],[[35,[3]]]],[1,[[35,[3]]]],[1,[[35,[3]]]],[[1,11],41],[[14,11],41],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[1,[[19,[2]]]],[14,[[19,[2]]]],[1,[[15,[16,[35,[11]]]]]],[14,[[35,[11]]]],[1,[[19,[8]]]],[14,[[19,[8]]]],[1,[[15,[16,[35,[8]]]]]],[14,[[35,[8]]]],[14,8],[1,[[19,[8]]]],[14,[[19,[8]]]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[4,[[33,[14,[21,[15]]]]]],[12,[[33,[14,[21,[15]]]]]],[1,[[33,[14,[21,[15]]]]]],[7,[[33,[14,[21,[15]]]]]],[-1,[[33,[-2]]],[],[]],[13,[[33,[14,[21,[15]]]]]],[1,[[33,[14,[21,[1]]]]]],[10,[[33,[14,[21,[15]]]]]],[9,[[33,[14,[21,[15]]]]]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[[],1],[[],14]],"c":[],"p":[[5,"BigInt",0],[1,"u128"],[1,"u8"],[1,"i64"],[1,"usize"],[1,"u16"],[1,"i32"],[1,"u64"],[1,"i8"],[1,"i128"],[1,"u32"],[1,"isize"],[1,"i16"],[5,"BigUint",0],[1,"tuple"],[6,"Sign",0],[1,"slice"],[1,"bool"],[6,"Option",1241],[5,"ParseBigIntError",0],[5,"TryFromBigIntError",0],[10,"Clone",1242],[6,"Ordering",1243],[5,"U32Digits",0],[5,"U64Digits",0],[1,"str"],[10,"Debug",1244],[10,"PartialEq",1243],[5,"ExtendedGcd",1245],[5,"Formatter",1244],[8,"Result",1244],[1,"f64"],[6,"Result",1246],[10,"Hasher",1247],[5,"Vec",1248],[17,"Item"],[10,"Iterator",1249],[10,"ToBigInt",0],[10,"ToBigUint",0],[1,"f32"],[5,"String",1250],[5,"TypeId",1251]],"b":[[14,"impl-Add%3C%26u128%3E-for-BigInt"],[15,"impl-Add%3Cu8%3E-for-%26BigInt"],[16,"impl-Add%3C%26i64%3E-for-BigInt"],[17,"impl-Add%3Cusize%3E-for-BigInt"],[18,"impl-Add%3Cu16%3E-for-BigInt"],[19,"impl-Add%3C%26BigInt%3E-for-%26BigInt"],[20,"impl-Add%3Ci32%3E-for-%26BigInt"],[21,"impl-Add%3Cu64%3E-for-%26BigInt"],[22,"impl-Add%3C%26u64%3E-for-%26BigInt"],[23,"impl-Add%3C%26u128%3E-for-%26BigInt"],[24,"impl-Add%3C%26i8%3E-for-%26BigInt"],[25,"impl-Add%3C%26i128%3E-for-%26BigInt"],[26,"impl-Add%3Ci8%3E-for-%26BigInt"],[27,"impl-Add%3Ci128%3E-for-BigInt"],[28,"impl-Add%3Cu16%3E-for-%26BigInt"],[29,"impl-Add%3C%26i8%3E-for-BigInt"],[30,"impl-Add%3C%26u16%3E-for-%26BigInt"],[31,"impl-Add%3Cu64%3E-for-BigInt"],[32,"impl-Add%3Ci8%3E-for-BigInt"],[33,"impl-Add%3C%26i32%3E-for-BigInt"],[34,"impl-Add%3Cusize%3E-for-%26BigInt"],[35,"impl-Add%3C%26u8%3E-for-%26BigInt"],[36,"impl-Add%3C%26u32%3E-for-BigInt"],[37,"impl-Add%3C%26isize%3E-for-BigInt"],[38,"impl-Add%3C%26i32%3E-for-%26BigInt"],[39,"impl-Add%3Ci64%3E-for-BigInt"],[40,"impl-Add%3C%26i16%3E-for-%26BigInt"],[41,"impl-Add%3Cu128%3E-for-BigInt"],[42,"impl-Add-for-BigInt"],[43,"impl-Add%3Cu128%3E-for-%26BigInt"],[44,"impl-Add%3C%26u32%3E-for-%26BigInt"],[45,"impl-Add%3Cisize%3E-for-%26BigInt"],[46,"impl-Add%3C%26u16%3E-for-BigInt"],[47,"impl-Add%3Cu32%3E-for-BigInt"],[48,"impl-Add%3Ci16%3E-for-BigInt"],[49,"impl-Add%3Ci16%3E-for-%26BigInt"],[50,"impl-Add%3Ci32%3E-for-BigInt"],[51,"impl-Add%3Cisize%3E-for-BigInt"],[52,"impl-Add%3Cu32%3E-for-%26BigInt"],[53,"impl-Add%3CBigInt%3E-for-%26BigInt"],[54,"impl-Add%3C%26i64%3E-for-%26BigInt"],[55,"impl-Add%3C%26i128%3E-for-BigInt"],[56,"impl-Add%3C%26u8%3E-for-BigInt"],[57,"impl-Add%3Ci128%3E-for-%26BigInt"],[58,"impl-Add%3C%26usize%3E-for-BigInt"],[59,"impl-Add%3C%26u64%3E-for-BigInt"],[60,"impl-Add%3C%26BigInt%3E-for-BigInt"],[61,"impl-Add%3Cu8%3E-for-BigInt"],[62,"impl-Add%3Ci64%3E-for-%26BigInt"],[63,"impl-Add%3C%26i16%3E-for-BigInt"],[64,"impl-Add%3C%26isize%3E-for-%26BigInt"],[65,"impl-Add%3C%26usize%3E-for-%26BigInt"],[66,"impl-Add%3C%26u16%3E-for-%26BigUint"],[67,"impl-Add%3Cu16%3E-for-BigUint"],[68,"impl-Add%3Cu32%3E-for-BigUint"],[69,"impl-Add%3Cu128%3E-for-BigUint"],[70,"impl-Add%3C%26u128%3E-for-BigUint"],[71,"impl-Add%3Cu8%3E-for-BigUint"],[72,"impl-Add%3C%26u64%3E-for-%26BigUint"],[73,"impl-Add%3C%26u8%3E-for-%26BigUint"],[74,"impl-Add%3C%26BigUint%3E-for-BigUint"],[75,"impl-Add%3C%26u32%3E-for-%26BigUint"],[76,"impl-Add%3Cu64%3E-for-%26BigUint"],[77,"impl-Add%3C%26u64%3E-for-BigUint"],[78,"impl-Add%3C%26u32%3E-for-BigUint"],[79,"impl-Add%3C%26BigUint%3E-for-%26BigUint"],[80,"impl-Add%3Cusize%3E-for-%26BigUint"],[81,"impl-Add%3C%26u8%3E-for-BigUint"],[82,"impl-Add%3C%26u16%3E-for-BigUint"],[83,"impl-Add-for-BigUint"],[84,"impl-Add%3Cu32%3E-for-%26BigUint"],[85,"impl-Add%3CBigUint%3E-for-%26BigUint"],[86,"impl-Add%3C%26u128%3E-for-%26BigUint"],[87,"impl-Add%3C%26usize%3E-for-%26BigUint"],[88,"impl-Add%3Cu16%3E-for-%26BigUint"],[89,"impl-Add%3C%26usize%3E-for-BigUint"],[90,"impl-Add%3Cu128%3E-for-%26BigUint"],[91,"impl-Add%3Cusize%3E-for-BigUint"],[92,"impl-Add%3Cu64%3E-for-BigUint"],[93,"impl-Add%3Cu8%3E-for-%26BigUint"],[94,"impl-AddAssign%3Ci64%3E-for-BigInt"],[95,"impl-AddAssign%3Cu64%3E-for-BigInt"],[96,"impl-AddAssign%3Cisize%3E-for-BigInt"],[97,"impl-AddAssign%3Cu16%3E-for-BigInt"],[98,"impl-AddAssign%3Cusize%3E-for-BigInt"],[99,"impl-AddAssign%3Ci16%3E-for-BigInt"],[100,"impl-AddAssign%3Ci32%3E-for-BigInt"],[101,"impl-AddAssign%3Cu8%3E-for-BigInt"],[102,"impl-AddAssign%3Cu32%3E-for-BigInt"],[103,"impl-AddAssign%3C%26BigInt%3E-for-BigInt"],[104,"impl-AddAssign%3Ci128%3E-for-BigInt"],[105,"impl-AddAssign-for-BigInt"],[106,"impl-AddAssign%3Cu128%3E-for-BigInt"],[107,"impl-AddAssign%3Ci8%3E-for-BigInt"],[108,"impl-AddAssign%3C%26BigUint%3E-for-BigUint"],[109,"impl-AddAssign%3Cusize%3E-for-BigUint"],[110,"impl-AddAssign%3Cu32%3E-for-BigUint"],[111,"impl-AddAssign%3Cu128%3E-for-BigUint"],[112,"impl-AddAssign%3Cu8%3E-for-BigUint"],[113,"impl-AddAssign%3Cu16%3E-for-BigUint"],[114,"impl-AddAssign%3Cu64%3E-for-BigUint"],[115,"impl-AddAssign-for-BigUint"],[124,"impl-BitAnd-for-BigInt"],[125,"impl-BitAnd%3CBigInt%3E-for-%26BigInt"],[126,"impl-BitAnd%3C%26BigInt%3E-for-BigInt"],[127,"impl-BitAnd%3C%26BigInt%3E-for-%26BigInt"],[128,"impl-BitAnd%3C%26BigUint%3E-for-%26BigUint"],[129,"impl-BitAnd%3C%26BigUint%3E-for-BigUint"],[130,"impl-BitAnd-for-BigUint"],[131,"impl-BitAnd%3CBigUint%3E-for-%26BigUint"],[132,"impl-BitAndAssign-for-BigInt"],[133,"impl-BitAndAssign%3C%26BigInt%3E-for-BigInt"],[134,"impl-BitAndAssign%3C%26BigUint%3E-for-BigUint"],[135,"impl-BitAndAssign-for-BigUint"],[136,"impl-BitOr-for-BigInt"],[137,"impl-BitOr%3C%26BigInt%3E-for-BigInt"],[138,"impl-BitOr%3CBigInt%3E-for-%26BigInt"],[139,"impl-BitOr%3C%26BigInt%3E-for-%26BigInt"],[140,"impl-BitOr%3CBigUint%3E-for-%26BigUint"],[141,"impl-BitOr%3C%26BigUint%3E-for-%26BigUint"],[142,"impl-BitOr%3C%26BigUint%3E-for-BigUint"],[143,"impl-BitOr-for-BigUint"],[144,"impl-BitOrAssign%3C%26BigInt%3E-for-BigInt"],[145,"impl-BitOrAssign-for-BigInt"],[146,"impl-BitOrAssign-for-BigUint"],[147,"impl-BitOrAssign%3C%26BigUint%3E-for-BigUint"],[150,"impl-BitXor%3C%26BigInt%3E-for-%26BigInt"],[151,"impl-BitXor%3C%26BigInt%3E-for-BigInt"],[152,"impl-BitXor%3CBigInt%3E-for-%26BigInt"],[153,"impl-BitXor-for-BigInt"],[154,"impl-BitXor%3C%26BigUint%3E-for-%26BigUint"],[155,"impl-BitXor%3CBigUint%3E-for-%26BigUint"],[156,"impl-BitXor%3C%26BigUint%3E-for-BigUint"],[157,"impl-BitXor-for-BigUint"],[158,"impl-BitXorAssign-for-BigInt"],[159,"impl-BitXorAssign%3C%26BigInt%3E-for-BigInt"],[160,"impl-BitXorAssign%3C%26BigUint%3E-for-BigUint"],[161,"impl-BitXorAssign-for-BigUint"],[176,"impl-BigInt"],[177,"impl-Roots-for-BigInt"],[178,"impl-Roots-for-BigUint"],[179,"impl-BigUint"],[180,"impl-BigInt"],[181,"impl-CheckedAdd-for-BigInt"],[183,"impl-BigInt"],[184,"impl-CheckedDiv-for-BigInt"],[188,"impl-BigInt"],[189,"impl-CheckedMul-for-BigInt"],[193,"impl-CheckedSub-for-BigInt"],[194,"impl-BigInt"],[218,"impl-Div%3C%26isize%3E-for-BigInt"],[219,"impl-Div%3Cu16%3E-for-BigInt"],[220,"impl-Div%3Ci8%3E-for-BigInt"],[221,"impl-Div%3C%26BigInt%3E-for-BigInt"],[222,"impl-Div%3Cu32%3E-for-BigInt"],[223,"impl-Div%3C%26i64%3E-for-%26BigInt"],[224,"impl-Div%3C%26usize%3E-for-BigInt"],[225,"impl-Div%3Ci32%3E-for-%26BigInt"],[226,"impl-Div%3C%26u8%3E-for-%26BigInt"],[227,"impl-Div%3Cu64%3E-for-BigInt"],[228,"impl-Div%3Ci8%3E-for-%26BigInt"],[229,"impl-Div%3Cu128%3E-for-BigInt"],[230,"impl-Div%3C%26u16%3E-for-BigInt"],[231,"impl-Div%3Cu32%3E-for-%26BigInt"],[232,"impl-Div%3Ci128%3E-for-BigInt"],[233,"impl-Div%3C%26u16%3E-for-%26BigInt"],[234,"impl-Div%3Cu8%3E-for-%26BigInt"],[235,"impl-Div%3C%26i128%3E-for-%26BigInt"],[236,"impl-Div%3C%26i16%3E-for-BigInt"],[237,"impl-Div%3C%26u64%3E-for-%26BigInt"],[238,"impl-Div%3C%26i8%3E-for-%26BigInt"],[239,"impl-Div%3C%26usize%3E-for-%26BigInt"],[240,"impl-Div%3C%26BigInt%3E-for-%26BigInt"],[241,"impl-Div%3C%26u8%3E-for-BigInt"],[242,"impl-Div%3Cusize%3E-for-BigInt"],[243,"impl-Div%3C%26i8%3E-for-BigInt"],[244,"impl-Div%3C%26i16%3E-for-%26BigInt"],[245,"impl-Div%3CBigInt%3E-for-%26BigInt"],[246,"impl-Div%3C%26u32%3E-for-BigInt"],[247,"impl-Div%3C%26u128%3E-for-%26BigInt"],[248,"impl-Div%3Cisize%3E-for-%26BigInt"],[249,"impl-Div%3C%26i32%3E-for-BigInt"],[250,"impl-Div%3Ci16%3E-for-%26BigInt"],[251,"impl-Div%3C%26i32%3E-for-%26BigInt"],[252,"impl-Div%3C%26u64%3E-for-BigInt"],[253,"impl-Div%3Cu128%3E-for-%26BigInt"],[254,"impl-Div%3C%26isize%3E-for-%26BigInt"],[255,"impl-Div%3Ci64%3E-for-BigInt"],[256,"impl-Div%3C%26i64%3E-for-BigInt"],[257,"impl-Div%3Ci16%3E-for-BigInt"],[258,"impl-Div%3Cu8%3E-for-BigInt"],[259,"impl-Div%3C%26u128%3E-for-BigInt"],[260,"impl-Div%3C%26i128%3E-for-BigInt"],[261,"impl-Div%3Cisize%3E-for-BigInt"],[262,"impl-Div%3Cu64%3E-for-%26BigInt"],[263,"impl-Div%3C%26u32%3E-for-%26BigInt"],[264,"impl-Div%3Ci128%3E-for-%26BigInt"],[265,"impl-Div%3Cu16%3E-for-%26BigInt"],[266,"impl-Div%3Ci32%3E-for-BigInt"],[267,"impl-Div%3Ci64%3E-for-%26BigInt"],[268,"impl-Div-for-BigInt"],[269,"impl-Div%3Cusize%3E-for-%26BigInt"],[270,"impl-Div%3C%26BigUint%3E-for-BigUint"],[271,"impl-Div%3Cu64%3E-for-%26BigUint"],[272,"impl-Div%3C%26u128%3E-for-%26BigUint"],[273,"impl-Div%3C%26usize%3E-for-BigUint"],[274,"impl-Div%3C%26u16%3E-for-BigUint"],[275,"impl-Div%3C%26u32%3E-for-BigUint"],[276,"impl-Div%3C%26u64%3E-for-%26BigUint"],[277,"impl-Div%3C%26BigUint%3E-for-%26BigUint"],[278,"impl-Div%3C%26usize%3E-for-%26BigUint"],[279,"impl-Div%3Cu16%3E-for-%26BigUint"],[280,"impl-Div%3C%26u8%3E-for-BigUint"],[281,"impl-Div-for-BigUint"],[282,"impl-Div%3Cusize%3E-for-BigUint"],[283,"impl-Div%3C%26u8%3E-for-%26BigUint"],[284,"impl-Div%3C%26u32%3E-for-%26BigUint"],[285,"impl-Div%3Cu8%3E-for-BigUint"],[286,"impl-Div%3Cu64%3E-for-BigUint"],[287,"impl-Div%3CBigUint%3E-for-%26BigUint"],[288,"impl-Div%3C%26u64%3E-for-BigUint"],[289,"impl-Div%3Cu8%3E-for-%26BigUint"],[290,"impl-Div%3Cu32%3E-for-%26BigUint"],[291,"impl-Div%3Cu128%3E-for-BigUint"],[292,"impl-Div%3Cusize%3E-for-%26BigUint"],[293,"impl-Div%3C%26u16%3E-for-%26BigUint"],[294,"impl-Div%3Cu128%3E-for-%26BigUint"],[295,"impl-Div%3Cu32%3E-for-BigUint"],[296,"impl-Div%3C%26u128%3E-for-BigUint"],[297,"impl-Div%3Cu16%3E-for-BigUint"],[298,"impl-DivAssign%3Ci128%3E-for-BigInt"],[299,"impl-DivAssign%3C%26BigInt%3E-for-BigInt"],[300,"impl-DivAssign%3Cu32%3E-for-BigInt"],[301,"impl-DivAssign%3Ci16%3E-for-BigInt"],[302,"impl-DivAssign%3Ci32%3E-for-BigInt"],[303,"impl-DivAssign%3Ci8%3E-for-BigInt"],[304,"impl-DivAssign%3Cu128%3E-for-BigInt"],[305,"impl-DivAssign%3Cu64%3E-for-BigInt"],[306,"impl-DivAssign-for-BigInt"],[307,"impl-DivAssign%3Cu8%3E-for-BigInt"],[308,"impl-DivAssign%3Cusize%3E-for-BigInt"],[309,"impl-DivAssign%3Cisize%3E-for-BigInt"],[310,"impl-DivAssign%3Ci64%3E-for-BigInt"],[311,"impl-DivAssign%3Cu16%3E-for-BigInt"],[312,"impl-DivAssign%3Cu64%3E-for-BigUint"],[313,"impl-DivAssign%3C%26BigUint%3E-for-BigUint"],[314,"impl-DivAssign-for-BigUint"],[315,"impl-DivAssign%3Cu32%3E-for-BigUint"],[316,"impl-DivAssign%3Cu8%3E-for-BigUint"],[317,"impl-DivAssign%3Cu128%3E-for-BigUint"],[318,"impl-DivAssign%3Cu16%3E-for-BigUint"],[319,"impl-DivAssign%3Cusize%3E-for-BigUint"],[338,"impl-UpperHex-for-BigInt"],[339,"impl-Display-for-BigInt"],[340,"impl-Debug-for-BigInt"],[341,"impl-Binary-for-BigInt"],[342,"impl-Octal-for-BigInt"],[343,"impl-LowerHex-for-BigInt"],[344,"impl-LowerHex-for-BigUint"],[345,"impl-Octal-for-BigUint"],[346,"impl-UpperHex-for-BigUint"],[347,"impl-Debug-for-BigUint"],[348,"impl-Display-for-BigUint"],[349,"impl-Binary-for-BigUint"],[351,"impl-Display-for-ParseBigIntError"],[352,"impl-Debug-for-ParseBigIntError"],[353,"impl-Display-for-TryFromBigIntError%3CT%3E"],[354,"impl-Debug-for-TryFromBigIntError%3CT%3E"],[355,"impl-From%3Cu64%3E-for-BigInt"],[356,"impl-From%3Ci64%3E-for-BigInt"],[357,"impl-From%3Cu32%3E-for-BigInt"],[358,"impl-From%3Cu16%3E-for-BigInt"],[359,"impl-From%3Cusize%3E-for-BigInt"],[360,"impl-From%3Ci16%3E-for-BigInt"],[361,"impl-From%3Ci128%3E-for-BigInt"],[363,"impl-From%3Cu128%3E-for-BigInt"],[364,"impl-From%3Ci32%3E-for-BigInt"],[365,"impl-From%3Cisize%3E-for-BigInt"],[366,"impl-From%3Ci8%3E-for-BigInt"],[367,"impl-From%3Cbool%3E-for-BigInt"],[368,"impl-From%3Cu8%3E-for-BigInt"],[369,"impl-From%3CBigUint%3E-for-BigInt"],[373,"impl-From%3Cu64%3E-for-BigUint"],[374,"impl-From%3Cu32%3E-for-BigUint"],[375,"impl-From%3Cusize%3E-for-BigUint"],[376,"impl-From%3Cu16%3E-for-BigUint"],[377,"impl-From%3Cu128%3E-for-BigUint"],[378,"impl-From%3Cbool%3E-for-BigUint"],[379,"impl-From%3Cu8%3E-for-BigUint"],[459,"impl-Mul%3Cu32%3E-for-%26BigInt"],[460,"impl-Mul%3C%26usize%3E-for-BigInt"],[461,"impl-Mul%3Ci64%3E-for-%26BigInt"],[462,"impl-Mul%3Cu16%3E-for-BigInt"],[463,"impl-Mul%3Cu32%3E-for-BigInt"],[464,"impl-Mul%3Cu128%3E-for-%26BigInt"],[465,"impl-Mul%3C%26i16%3E-for-%26BigInt"],[466,"impl-Mul%3Cu128%3E-for-BigInt"],[467,"impl-Mul%3Cu64%3E-for-%26BigInt"],[468,"impl-Mul%3C%26u64%3E-for-%26BigInt"],[469,"impl-Mul%3Ci128%3E-for-%26BigInt"],[470,"impl-Mul%3Cu16%3E-for-%26BigInt"],[471,"impl-Mul%3C%26u128%3E-for-%26BigInt"],[472,"impl-Mul-for-BigInt"],[473,"impl-Mul%3C%26BigInt%3E-for-%26BigInt"],[474,"impl-Mul%3C%26u32%3E-for-%26BigInt"],[475,"impl-Mul%3C%26u64%3E-for-BigInt"],[476,"impl-Mul%3C%26i32%3E-for-BigInt"],[477,"impl-Mul%3C%26i64%3E-for-BigInt"],[478,"impl-Mul%3CBigInt%3E-for-%26BigInt"],[479,"impl-Mul%3C%26i128%3E-for-%26BigInt"],[480,"impl-Mul%3Ci128%3E-for-BigInt"],[481,"impl-Mul%3C%26u16%3E-for-%26BigInt"],[482,"impl-Mul%3Cu64%3E-for-BigInt"],[483,"impl-Mul%3Ci8%3E-for-%26BigInt"],[484,"impl-Mul%3C%26u8%3E-for-BigInt"],[485,"impl-Mul%3Ci64%3E-for-BigInt"],[486,"impl-Mul%3Cusize%3E-for-%26BigInt"],[487,"impl-Mul%3C%26usize%3E-for-%26BigInt"],[488,"impl-Mul%3Ci32%3E-for-BigInt"],[489,"impl-Mul%3C%26i128%3E-for-BigInt"],[490,"impl-Mul%3Ci8%3E-for-BigInt"],[491,"impl-Mul%3Ci32%3E-for-%26BigInt"],[492,"impl-Mul%3Cu8%3E-for-BigInt"],[493,"impl-Mul%3C%26isize%3E-for-BigInt"],[494,"impl-Mul%3C%26u32%3E-for-BigInt"],[495,"impl-Mul%3Cisize%3E-for-%26BigInt"],[496,"impl-Mul%3C%26u128%3E-for-BigInt"],[497,"impl-Mul%3C%26i64%3E-for-%26BigInt"],[498,"impl-Mul%3C%26isize%3E-for-%26BigInt"],[499,"impl-Mul%3C%26i16%3E-for-BigInt"],[500,"impl-Mul%3Ci16%3E-for-BigInt"],[501,"impl-Mul%3Cusize%3E-for-BigInt"],[502,"impl-Mul%3C%26i32%3E-for-%26BigInt"],[503,"impl-Mul%3C%26u8%3E-for-%26BigInt"],[504,"impl-Mul%3C%26u16%3E-for-BigInt"],[505,"impl-Mul%3C%26i8%3E-for-BigInt"],[506,"impl-Mul%3C%26BigInt%3E-for-BigInt"],[507,"impl-Mul%3Cisize%3E-for-BigInt"],[508,"impl-Mul%3C%26i8%3E-for-%26BigInt"],[509,"impl-Mul%3Ci16%3E-for-%26BigInt"],[510,"impl-Mul%3Cu8%3E-for-%26BigInt"],[511,"impl-Mul%3Cusize%3E-for-BigUint"],[512,"impl-Mul%3Cu64%3E-for-BigUint"],[513,"impl-Mul%3Cu64%3E-for-%26BigUint"],[514,"impl-Mul%3C%26u128%3E-for-BigUint"],[515,"impl-Mul%3C%26usize%3E-for-BigUint"],[516,"impl-Mul%3C%26u32%3E-for-%26BigUint"],[517,"impl-Mul%3Cu128%3E-for-%26BigUint"],[518,"impl-Mul%3Cu8%3E-for-%26BigUint"],[519,"impl-Mul%3C%26usize%3E-for-%26BigUint"],[520,"impl-Mul%3Cu128%3E-for-BigUint"],[521,"impl-Mul%3C%26u64%3E-for-%26BigUint"],[522,"impl-Mul%3Cu32%3E-for-BigUint"],[523,"impl-Mul%3C%26u32%3E-for-BigUint"],[524,"impl-Mul%3C%26u128%3E-for-%26BigUint"],[525,"impl-Mul%3Cu16%3E-for-%26BigUint"],[526,"impl-Mul%3Cu8%3E-for-BigUint"],[527,"impl-Mul%3Cu16%3E-for-BigUint"],[528,"impl-Mul%3C%26BigUint%3E-for-BigUint"],[529,"impl-Mul%3C%26u64%3E-for-BigUint"],[530,"impl-Mul%3C%26u16%3E-for-%26BigUint"],[531,"impl-Mul%3Cu32%3E-for-%26BigUint"],[532,"impl-Mul%3C%26u8%3E-for-%26BigUint"],[533,"impl-Mul-for-BigUint"],[534,"impl-Mul%3Cusize%3E-for-%26BigUint"],[535,"impl-Mul%3C%26BigUint%3E-for-%26BigUint"],[536,"impl-Mul%3CBigUint%3E-for-%26BigUint"],[537,"impl-Mul%3C%26u16%3E-for-BigUint"],[538,"impl-Mul%3C%26u8%3E-for-BigUint"],[540,"impl-MulAssign-for-BigInt"],[541,"impl-MulAssign%3Cu8%3E-for-BigInt"],[542,"impl-MulAssign%3Cisize%3E-for-BigInt"],[543,"impl-MulAssign%3C%26BigInt%3E-for-BigInt"],[544,"impl-MulAssign%3Cu128%3E-for-BigInt"],[545,"impl-MulAssign%3Cu32%3E-for-BigInt"],[546,"impl-MulAssign%3Ci8%3E-for-BigInt"],[547,"impl-MulAssign%3Cusize%3E-for-BigInt"],[548,"impl-MulAssign%3Ci32%3E-for-BigInt"],[549,"impl-MulAssign%3Cu16%3E-for-BigInt"],[550,"impl-MulAssign%3Ci128%3E-for-BigInt"],[551,"impl-MulAssign%3Ci16%3E-for-BigInt"],[552,"impl-MulAssign%3Cu64%3E-for-BigInt"],[553,"impl-MulAssign%3Ci64%3E-for-BigInt"],[554,"impl-MulAssign%3C%26BigUint%3E-for-BigUint"],[555,"impl-MulAssign%3Cu8%3E-for-BigUint"],[556,"impl-MulAssign%3Cu16%3E-for-BigUint"],[557,"impl-MulAssign-for-BigUint"],[558,"impl-MulAssign%3Cu128%3E-for-BigUint"],[559,"impl-MulAssign%3Cusize%3E-for-BigUint"],[560,"impl-MulAssign%3Cu64%3E-for-BigUint"],[561,"impl-MulAssign%3Cu32%3E-for-BigUint"],[562,"impl-Neg-for-BigInt"],[563,"impl-Neg-for-%26BigInt"],[573,"impl-Not-for-%26BigInt"],[574,"impl-Not-for-BigInt"],[576,"impl-Roots-for-BigInt"],[577,"impl-BigInt"],[578,"impl-Roots-for-BigUint"],[579,"impl-BigUint"],[587,"impl-Pow%3CBigUint%3E-for-%26BigInt"],[588,"impl-Pow%3Cu8%3E-for-BigInt"],[589,"impl-Pow%3Cu32%3E-for-%26BigInt"],[590,"impl-Pow%3C%26u16%3E-for-%26BigInt"],[591,"impl-Pow%3C%26u32%3E-for-BigInt"],[592,"impl-Pow%3C%26BigUint%3E-for-%26BigInt"],[593,"impl-Pow%3C%26u8%3E-for-BigInt"],[594,"impl-Pow%3C%26usize%3E-for-%26BigInt"],[595,"impl-Pow%3C%26u64%3E-for-BigInt"],[596,"impl-Pow%3C%26u128%3E-for-%26BigInt"],[597,"impl-Pow%3C%26u16%3E-for-BigInt"],[598,"impl-Pow%3C%26BigUint%3E-for-BigInt"],[599,"impl-Pow%3C%26u32%3E-for-%26BigInt"],[600,"impl-BigInt"],[601,"impl-Pow%3Cu64%3E-for-BigInt"],[602,"impl-Pow%3C%26u128%3E-for-BigInt"],[603,"impl-Pow%3Cu32%3E-for-BigInt"],[604,"impl-Pow%3CBigUint%3E-for-BigInt"],[605,"impl-Pow%3Cu128%3E-for-BigInt"],[606,"impl-Pow%3Cu64%3E-for-%26BigInt"],[607,"impl-Pow%3C%26u8%3E-for-%26BigInt"],[608,"impl-Pow%3Cu16%3E-for-%26BigInt"],[609,"impl-Pow%3Cu8%3E-for-%26BigInt"],[610,"impl-Pow%3C%26usize%3E-for-BigInt"],[611,"impl-Pow%3Cusize%3E-for-%26BigInt"],[612,"impl-Pow%3C%26u64%3E-for-%26BigInt"],[613,"impl-Pow%3Cusize%3E-for-BigInt"],[614,"impl-Pow%3Cu16%3E-for-BigInt"],[615,"impl-Pow%3Cu128%3E-for-%26BigInt"],[616,"impl-Pow%3CBigUint%3E-for-BigUint"],[617,"impl-Pow%3C%26u32%3E-for-BigUint"],[618,"impl-Pow%3Cu8%3E-for-BigUint"],[619,"impl-Pow%3C%26u16%3E-for-BigUint"],[620,"impl-Pow%3Cu16%3E-for-BigUint"],[621,"impl-Pow%3C%26u128%3E-for-BigUint"],[622,"impl-Pow%3C%26u8%3E-for-%26BigUint"],[623,"impl-Pow%3C%26u32%3E-for-%26BigUint"],[624,"impl-Pow%3Cu64%3E-for-BigUint"],[625,"impl-Pow%3C%26usize%3E-for-BigUint"],[626,"impl-Pow%3C%26usize%3E-for-%26BigUint"],[627,"impl-Pow%3CBigUint%3E-for-%26BigUint"],[628,"impl-Pow%3C%26u16%3E-for-%26BigUint"],[629,"impl-Pow%3C%26u128%3E-for-%26BigUint"],[630,"impl-Pow%3Cusize%3E-for-BigUint"],[631,"impl-Pow%3C%26BigUint%3E-for-BigUint"],[632,"impl-Pow%3C%26u64%3E-for-BigUint"],[633,"impl-Pow%3C%26u64%3E-for-%26BigUint"],[634,"impl-Pow%3Cu128%3E-for-BigUint"],[635,"impl-Pow%3Cu128%3E-for-%26BigUint"],[636,"impl-Pow%3Cu32%3E-for-BigUint"],[637,"impl-Pow%3C%26u8%3E-for-BigUint"],[638,"impl-Pow%3Cu16%3E-for-%26BigUint"],[639,"impl-Pow%3C%26BigUint%3E-for-%26BigUint"],[640,"impl-Pow%3Cu32%3E-for-%26BigUint"],[641,"impl-Pow%3Cu8%3E-for-%26BigUint"],[642,"impl-Pow%3Cu64%3E-for-%26BigUint"],[643,"impl-Pow%3Cusize%3E-for-%26BigUint"],[644,"impl-BigUint"],[649,"impl-Rem%3Ci128%3E-for-%26BigInt"],[650,"impl-Rem%3Ci32%3E-for-%26BigInt"],[651,"impl-Rem%3Cisize%3E-for-%26BigInt"],[652,"impl-Rem%3CBigInt%3E-for-%26BigInt"],[653,"impl-Rem%3C%26usize%3E-for-%26BigInt"],[654,"impl-Rem%3C%26i16%3E-for-%26BigInt"],[655,"impl-Rem%3Cu8%3E-for-%26BigInt"],[656,"impl-Rem%3Cu64%3E-for-%26BigInt"],[657,"impl-Rem%3C%26i8%3E-for-%26BigInt"],[658,"impl-Rem%3C%26u128%3E-for-%26BigInt"],[659,"impl-Rem%3C%26i128%3E-for-BigInt"],[660,"impl-Rem%3C%26i64%3E-for-%26BigInt"],[661,"impl-Rem%3Cu16%3E-for-%26BigInt"],[662,"impl-Rem%3Cu8%3E-for-BigInt"],[663,"impl-Rem%3Cusize%3E-for-BigInt"],[664,"impl-Rem%3C%26u8%3E-for-%26BigInt"],[665,"impl-Rem%3C%26i32%3E-for-BigInt"],[666,"impl-Rem%3Ci8%3E-for-BigInt"],[667,"impl-Rem%3C%26i16%3E-for-BigInt"],[668,"impl-Rem%3Cisize%3E-for-BigInt"],[669,"impl-Rem%3Ci8%3E-for-%26BigInt"],[670,"impl-Rem%3C%26u32%3E-for-BigInt"],[671,"impl-Rem%3C%26i32%3E-for-%26BigInt"],[672,"impl-Rem%3C%26u128%3E-for-BigInt"],[673,"impl-Rem%3C%26isize%3E-for-BigInt"],[674,"impl-Rem%3Ci16%3E-for-BigInt"],[675,"impl-Rem%3Cu32%3E-for-BigInt"],[676,"impl-Rem%3Cusize%3E-for-%26BigInt"],[677,"impl-Rem%3C%26i64%3E-for-BigInt"],[678,"impl-Rem%3C%26u64%3E-for-%26BigInt"],[679,"impl-Rem%3C%26u64%3E-for-BigInt"],[680,"impl-Rem%3C%26isize%3E-for-%26BigInt"],[681,"impl-Rem%3Cu128%3E-for-BigInt"],[682,"impl-Rem%3C%26u32%3E-for-%26BigInt"],[683,"impl-Rem%3Cu32%3E-for-%26BigInt"],[684,"impl-Rem%3Ci32%3E-for-BigInt"],[685,"impl-Rem%3C%26BigInt%3E-for-BigInt"],[686,"impl-Rem%3Ci16%3E-for-%26BigInt"],[687,"impl-Rem-for-BigInt"],[688,"impl-Rem%3C%26u16%3E-for-BigInt"],[689,"impl-Rem%3C%26usize%3E-for-BigInt"],[690,"impl-Rem%3Ci64%3E-for-%26BigInt"],[691,"impl-Rem%3C%26i8%3E-for-BigInt"],[692,"impl-Rem%3C%26i128%3E-for-%26BigInt"],[693,"impl-Rem%3Ci64%3E-for-BigInt"],[694,"impl-Rem%3Cu128%3E-for-%26BigInt"],[695,"impl-Rem%3Ci128%3E-for-BigInt"],[696,"impl-Rem%3C%26u8%3E-for-BigInt"],[697,"impl-Rem%3Cu16%3E-for-BigInt"],[698,"impl-Rem%3Cu64%3E-for-BigInt"],[699,"impl-Rem%3C%26BigInt%3E-for-%26BigInt"],[700,"impl-Rem%3C%26u16%3E-for-%26BigInt"],[701,"impl-Rem%3Cu32%3E-for-BigUint"],[702,"impl-Rem%3Cusize%3E-for-%26BigUint"],[703,"impl-Rem%3C%26u8%3E-for-BigUint"],[704,"impl-Rem%3C%26u64%3E-for-%26BigUint"],[705,"impl-Rem%3C%26u8%3E-for-%26BigUint"],[706,"impl-Rem%3Cu64%3E-for-BigUint"],[707,"impl-Rem%3Cu128%3E-for-BigUint"],[708,"impl-Rem%3Cu64%3E-for-%26BigUint"],[709,"impl-Rem%3C%26u16%3E-for-%26BigUint"],[710,"impl-Rem%3C%26BigUint%3E-for-%26BigUint"],[711,"impl-Rem%3Cu32%3E-for-%26BigUint"],[712,"impl-Rem%3C%26u16%3E-for-BigUint"],[713,"impl-Rem%3C%26usize%3E-for-BigUint"],[714,"impl-Rem%3Cu8%3E-for-BigUint"],[715,"impl-Rem%3C%26u32%3E-for-%26BigUint"],[716,"impl-Rem%3Cu128%3E-for-%26BigUint"],[717,"impl-Rem%3Cu16%3E-for-%26BigUint"],[718,"impl-Rem-for-BigUint"],[719,"impl-Rem%3Cu16%3E-for-BigUint"],[720,"impl-Rem%3C%26BigUint%3E-for-BigUint"],[721,"impl-Rem%3C%26u32%3E-for-BigUint"],[722,"impl-Rem%3C%26usize%3E-for-%26BigUint"],[723,"impl-Rem%3Cusize%3E-for-BigUint"],[724,"impl-Rem%3C%26u128%3E-for-%26BigUint"],[725,"impl-Rem%3Cu8%3E-for-%26BigUint"],[726,"impl-Rem%3CBigUint%3E-for-%26BigUint"],[727,"impl-Rem%3C%26u128%3E-for-BigUint"],[728,"impl-Rem%3C%26u64%3E-for-BigUint"],[729,"impl-RemAssign%3Ci32%3E-for-BigInt"],[730,"impl-RemAssign%3Cu32%3E-for-BigInt"],[731,"impl-RemAssign%3C%26BigInt%3E-for-BigInt"],[732,"impl-RemAssign%3Ci16%3E-for-BigInt"],[733,"impl-RemAssign%3Cu16%3E-for-BigInt"],[734,"impl-RemAssign%3Ci64%3E-for-BigInt"],[735,"impl-RemAssign%3Cusize%3E-for-BigInt"],[736,"impl-RemAssign%3Cisize%3E-for-BigInt"],[737,"impl-RemAssign%3Cu128%3E-for-BigInt"],[738,"impl-RemAssign-for-BigInt"],[739,"impl-RemAssign%3Cu64%3E-for-BigInt"],[740,"impl-RemAssign%3Ci8%3E-for-BigInt"],[741,"impl-RemAssign%3Ci128%3E-for-BigInt"],[742,"impl-RemAssign%3Cu8%3E-for-BigInt"],[743,"impl-RemAssign%3C%26BigUint%3E-for-BigUint"],[744,"impl-RemAssign%3Cu128%3E-for-BigUint"],[745,"impl-RemAssign%3Cu64%3E-for-BigUint"],[746,"impl-RemAssign%3Cu16%3E-for-BigUint"],[747,"impl-RemAssign%3Cu32%3E-for-BigUint"],[748,"impl-RemAssign%3Cusize%3E-for-BigUint"],[749,"impl-RemAssign-for-BigUint"],[750,"impl-RemAssign%3Cu8%3E-for-BigUint"],[759,"impl-Shl%3C%26i64%3E-for-%26BigInt"],[760,"impl-Shl%3Cu16%3E-for-%26BigInt"],[761,"impl-Shl%3C%26i64%3E-for-BigInt"],[762,"impl-Shl%3C%26usize%3E-for-%26BigInt"],[763,"impl-Shl%3Ci32%3E-for-BigInt"],[764,"impl-Shl%3C%26i16%3E-for-%26BigInt"],[765,"impl-Shl%3C%26u64%3E-for-%26BigInt"],[766,"impl-Shl%3C%26u32%3E-for-%26BigInt"],[767,"impl-Shl%3C%26i128%3E-for-%26BigInt"],[768,"impl-Shl%3C%26u16%3E-for-BigInt"],[769,"impl-Shl%3Cu32%3E-for-BigInt"],[770,"impl-Shl%3Cu16%3E-for-BigInt"],[771,"impl-Shl%3Ci16%3E-for-BigInt"],[772,"impl-Shl%3Ci128%3E-for-%26BigInt"],[773,"impl-Shl%3C%26u16%3E-for-%26BigInt"],[774,"impl-Shl%3C%26usize%3E-for-BigInt"],[775,"impl-Shl%3C%26i16%3E-for-BigInt"],[776,"impl-Shl%3Cu8%3E-for-%26BigInt"],[777,"impl-Shl%3C%26u8%3E-for-%26BigInt"],[778,"impl-Shl%3C%26i32%3E-for-BigInt"],[779,"impl-Shl%3C%26i32%3E-for-%26BigInt"],[780,"impl-Shl%3Ci8%3E-for-%26BigInt"],[781,"impl-Shl%3Cu128%3E-for-%26BigInt"],[782,"impl-Shl%3C%26isize%3E-for-%26BigInt"],[783,"impl-Shl%3Cu8%3E-for-BigInt"],[784,"impl-Shl%3Ci128%3E-for-BigInt"],[785,"impl-Shl%3C%26i8%3E-for-%26BigInt"],[786,"impl-Shl%3C%26u64%3E-for-BigInt"],[787,"impl-Shl%3Cu64%3E-for-BigInt"],[788,"impl-Shl%3Cu128%3E-for-BigInt"],[789,"impl-Shl%3Cu32%3E-for-%26BigInt"],[790,"impl-Shl%3C%26u128%3E-for-BigInt"],[791,"impl-Shl%3C%26u32%3E-for-BigInt"],[792,"impl-Shl%3Ci16%3E-for-%26BigInt"],[793,"impl-Shl%3Ci64%3E-for-%26BigInt"],[794,"impl-Shl%3Ci8%3E-for-BigInt"],[795,"impl-Shl%3Cusize%3E-for-%26BigInt"],[796,"impl-Shl%3C%26i8%3E-for-BigInt"],[797,"impl-Shl%3Ci32%3E-for-%26BigInt"],[798,"impl-Shl%3Ci64%3E-for-BigInt"],[799,"impl-Shl%3Cisize%3E-for-%26BigInt"],[800,"impl-Shl%3Cusize%3E-for-BigInt"],[801,"impl-Shl%3C%26isize%3E-for-BigInt"],[802,"impl-Shl%3Cu64%3E-for-%26BigInt"],[803,"impl-Shl%3C%26u8%3E-for-BigInt"],[804,"impl-Shl%3C%26u128%3E-for-%26BigInt"],[805,"impl-Shl%3C%26i128%3E-for-BigInt"],[806,"impl-Shl%3Cisize%3E-for-BigInt"],[807,"impl-Shl%3Cu8%3E-for-BigUint"],[808,"impl-Shl%3C%26u16%3E-for-%26BigUint"],[809,"impl-Shl%3Cu16%3E-for-BigUint"],[810,"impl-Shl%3C%26i128%3E-for-BigUint"],[811,"impl-Shl%3C%26i16%3E-for-BigUint"],[812,"impl-Shl%3Ci128%3E-for-BigUint"],[813,"impl-Shl%3C%26isize%3E-for-%26BigUint"],[814,"impl-Shl%3Ci32%3E-for-%26BigUint"],[815,"impl-Shl%3Cu128%3E-for-BigUint"],[816,"impl-Shl%3C%26usize%3E-for-BigUint"],[817,"impl-Shl%3Ci64%3E-for-BigUint"],[818,"impl-Shl%3Cisize%3E-for-BigUint"],[819,"impl-Shl%3C%26i64%3E-for-%26BigUint"],[820,"impl-Shl%3C%26u8%3E-for-%26BigUint"],[821,"impl-Shl%3Ci64%3E-for-%26BigUint"],[822,"impl-Shl%3Ci128%3E-for-%26BigUint"],[823,"impl-Shl%3Cu32%3E-for-BigUint"],[824,"impl-Shl%3Cisize%3E-for-%26BigUint"],[825,"impl-Shl%3C%26isize%3E-for-BigUint"],[826,"impl-Shl%3Ci32%3E-for-BigUint"],[827,"impl-Shl%3Ci8%3E-for-BigUint"],[828,"impl-Shl%3Cu64%3E-for-BigUint"],[829,"impl-Shl%3C%26u16%3E-for-BigUint"],[830,"impl-Shl%3C%26u32%3E-for-BigUint"],[831,"impl-Shl%3C%26i8%3E-for-BigUint"],[832,"impl-Shl%3Ci8%3E-for-%26BigUint"],[833,"impl-Shl%3C%26i8%3E-for-%26BigUint"],[834,"impl-Shl%3C%26u128%3E-for-%26BigUint"],[835,"impl-Shl%3C%26i32%3E-for-BigUint"],[836,"impl-Shl%3C%26usize%3E-for-%26BigUint"],[837,"impl-Shl%3C%26u64%3E-for-BigUint"],[838,"impl-Shl%3C%26u128%3E-for-BigUint"],[839,"impl-Shl%3C%26i16%3E-for-%26BigUint"],[840,"impl-Shl%3Ci16%3E-for-BigUint"],[841,"impl-Shl%3C%26i128%3E-for-%26BigUint"],[842,"impl-Shl%3C%26i32%3E-for-%26BigUint"],[843,"impl-Shl%3Cusize%3E-for-BigUint"],[844,"impl-Shl%3Cu16%3E-for-%26BigUint"],[845,"impl-Shl%3C%26u32%3E-for-%26BigUint"],[846,"impl-Shl%3C%26u8%3E-for-BigUint"],[847,"impl-Shl%3Cu8%3E-for-%26BigUint"],[848,"impl-Shl%3Cu64%3E-for-%26BigUint"],[849,"impl-Shl%3Cu32%3E-for-%26BigUint"],[850,"impl-Shl%3C%26i64%3E-for-BigUint"],[851,"impl-Shl%3Cu128%3E-for-%26BigUint"],[852,"impl-Shl%3Cusize%3E-for-%26BigUint"],[853,"impl-Shl%3Ci16%3E-for-%26BigUint"],[854,"impl-Shl%3C%26u64%3E-for-%26BigUint"],[855,"impl-ShlAssign%3Ci32%3E-for-BigInt"],[856,"impl-ShlAssign%3C%26i16%3E-for-BigInt"],[857,"impl-ShlAssign%3Cusize%3E-for-BigInt"],[858,"impl-ShlAssign%3C%26u64%3E-for-BigInt"],[859,"impl-ShlAssign%3Ci128%3E-for-BigInt"],[860,"impl-ShlAssign%3C%26u16%3E-for-BigInt"],[861,"impl-ShlAssign%3Ci8%3E-for-BigInt"],[862,"impl-ShlAssign%3C%26i128%3E-for-BigInt"],[863,"impl-ShlAssign%3Ci16%3E-for-BigInt"],[864,"impl-ShlAssign%3Cisize%3E-for-BigInt"],[865,"impl-ShlAssign%3Cu64%3E-for-BigInt"],[866,"impl-ShlAssign%3C%26u8%3E-for-BigInt"],[867,"impl-ShlAssign%3C%26i64%3E-for-BigInt"],[868,"impl-ShlAssign%3Cu128%3E-for-BigInt"],[869,"impl-ShlAssign%3Cu32%3E-for-BigInt"],[870,"impl-ShlAssign%3C%26i8%3E-for-BigInt"],[871,"impl-ShlAssign%3C%26i32%3E-for-BigInt"],[872,"impl-ShlAssign%3C%26usize%3E-for-BigInt"],[873,"impl-ShlAssign%3Cu16%3E-for-BigInt"],[874,"impl-ShlAssign%3C%26u128%3E-for-BigInt"],[875,"impl-ShlAssign%3Cu8%3E-for-BigInt"],[876,"impl-ShlAssign%3Ci64%3E-for-BigInt"],[877,"impl-ShlAssign%3C%26isize%3E-for-BigInt"],[878,"impl-ShlAssign%3C%26u32%3E-for-BigInt"],[879,"impl-ShlAssign%3Ci32%3E-for-BigUint"],[880,"impl-ShlAssign%3C%26isize%3E-for-BigUint"],[881,"impl-ShlAssign%3C%26i32%3E-for-BigUint"],[882,"impl-ShlAssign%3Ci8%3E-for-BigUint"],[883,"impl-ShlAssign%3Cu128%3E-for-BigUint"],[884,"impl-ShlAssign%3Cu8%3E-for-BigUint"],[885,"impl-ShlAssign%3C%26u16%3E-for-BigUint"],[886,"impl-ShlAssign%3C%26i64%3E-for-BigUint"],[887,"impl-ShlAssign%3Cusize%3E-for-BigUint"],[888,"impl-ShlAssign%3Cu16%3E-for-BigUint"],[889,"impl-ShlAssign%3C%26u64%3E-for-BigUint"],[890,"impl-ShlAssign%3C%26i128%3E-for-BigUint"],[891,"impl-ShlAssign%3Cu64%3E-for-BigUint"],[892,"impl-ShlAssign%3Ci64%3E-for-BigUint"],[893,"impl-ShlAssign%3C%26u8%3E-for-BigUint"],[894,"impl-ShlAssign%3C%26u128%3E-for-BigUint"],[895,"impl-ShlAssign%3Ci128%3E-for-BigUint"],[896,"impl-ShlAssign%3Ci16%3E-for-BigUint"],[897,"impl-ShlAssign%3C%26usize%3E-for-BigUint"],[898,"impl-ShlAssign%3Cisize%3E-for-BigUint"],[899,"impl-ShlAssign%3C%26i8%3E-for-BigUint"],[900,"impl-ShlAssign%3Cu32%3E-for-BigUint"],[901,"impl-ShlAssign%3C%26i16%3E-for-BigUint"],[902,"impl-ShlAssign%3C%26u32%3E-for-BigUint"],[903,"impl-Shr%3Ci8%3E-for-BigInt"],[904,"impl-Shr%3Ci64%3E-for-BigInt"],[905,"impl-Shr%3Ci32%3E-for-BigInt"],[906,"impl-Shr%3C%26i32%3E-for-BigInt"],[907,"impl-Shr%3C%26usize%3E-for-BigInt"],[908,"impl-Shr%3Cu32%3E-for-%26BigInt"],[909,"impl-Shr%3Ci16%3E-for-BigInt"],[910,"impl-Shr%3Ci32%3E-for-%26BigInt"],[911,"impl-Shr%3C%26u16%3E-for-%26BigInt"],[912,"impl-Shr%3C%26isize%3E-for-%26BigInt"],[913,"impl-Shr%3Cu32%3E-for-BigInt"],[914,"impl-Shr%3C%26i8%3E-for-BigInt"],[915,"impl-Shr%3Cu64%3E-for-%26BigInt"],[916,"impl-Shr%3C%26i32%3E-for-%26BigInt"],[917,"impl-Shr%3C%26i64%3E-for-%26BigInt"],[918,"impl-Shr%3Cisize%3E-for-BigInt"],[919,"impl-Shr%3Cu16%3E-for-%26BigInt"],[920,"impl-Shr%3C%26i16%3E-for-BigInt"],[921,"impl-Shr%3C%26u128%3E-for-BigInt"],[922,"impl-Shr%3C%26u8%3E-for-%26BigInt"],[923,"impl-Shr%3Ci8%3E-for-%26BigInt"],[924,"impl-Shr%3Cu64%3E-for-BigInt"],[925,"impl-Shr%3C%26i16%3E-for-%26BigInt"],[926,"impl-Shr%3C%26u32%3E-for-%26BigInt"],[927,"impl-Shr%3C%26u128%3E-for-%26BigInt"],[928,"impl-Shr%3C%26i128%3E-for-%26BigInt"],[929,"impl-Shr%3Cusize%3E-for-BigInt"],[930,"impl-Shr%3C%26u8%3E-for-BigInt"],[931,"impl-Shr%3C%26usize%3E-for-%26BigInt"],[932,"impl-Shr%3Ci16%3E-for-%26BigInt"],[933,"impl-Shr%3Ci128%3E-for-BigInt"],[934,"impl-Shr%3C%26u32%3E-for-BigInt"],[935,"impl-Shr%3C%26u64%3E-for-%26BigInt"],[936,"impl-Shr%3Ci64%3E-for-%26BigInt"],[937,"impl-Shr%3Cu128%3E-for-%26BigInt"],[938,"impl-Shr%3C%26i64%3E-for-BigInt"],[939,"impl-Shr%3C%26i128%3E-for-BigInt"],[940,"impl-Shr%3Cisize%3E-for-%26BigInt"],[941,"impl-Shr%3C%26u16%3E-for-BigInt"],[942,"impl-Shr%3Cusize%3E-for-%26BigInt"],[943,"impl-Shr%3Cu8%3E-for-%26BigInt"],[944,"impl-Shr%3Cu128%3E-for-BigInt"],[945,"impl-Shr%3Cu16%3E-for-BigInt"],[946,"impl-Shr%3C%26isize%3E-for-BigInt"],[947,"impl-Shr%3Cu8%3E-for-BigInt"],[948,"impl-Shr%3C%26u64%3E-for-BigInt"],[949,"impl-Shr%3Ci128%3E-for-%26BigInt"],[950,"impl-Shr%3C%26i8%3E-for-%26BigInt"],[951,"impl-Shr%3Ci64%3E-for-%26BigUint"],[952,"impl-Shr%3Ci128%3E-for-BigUint"],[953,"impl-Shr%3C%26u128%3E-for-BigUint"],[954,"impl-Shr%3Cu16%3E-for-%26BigUint"],[955,"impl-Shr%3C%26i32%3E-for-%26BigUint"],[956,"impl-Shr%3C%26i64%3E-for-%26BigUint"],[957,"impl-Shr%3C%26i128%3E-for-%26BigUint"],[958,"impl-Shr%3C%26i8%3E-for-BigUint"],[959,"impl-Shr%3C%26i128%3E-for-BigUint"],[960,"impl-Shr%3Cu64%3E-for-BigUint"],[961,"impl-Shr%3C%26isize%3E-for-%26BigUint"],[962,"impl-Shr%3C%26i16%3E-for-BigUint"],[963,"impl-Shr%3C%26u8%3E-for-%26BigUint"],[964,"impl-Shr%3C%26u64%3E-for-%26BigUint"],[965,"impl-Shr%3Cu128%3E-for-%26BigUint"],[966,"impl-Shr%3Cu64%3E-for-%26BigUint"],[967,"impl-Shr%3C%26i8%3E-for-%26BigUint"],[968,"impl-Shr%3C%26i64%3E-for-BigUint"],[969,"impl-Shr%3Ci128%3E-for-%26BigUint"],[970,"impl-Shr%3Ci16%3E-for-BigUint"],[971,"impl-Shr%3Ci8%3E-for-%26BigUint"],[972,"impl-Shr%3Ci8%3E-for-BigUint"],[973,"impl-Shr%3C%26u8%3E-for-BigUint"],[974,"impl-Shr%3C%26usize%3E-for-BigUint"],[975,"impl-Shr%3Cu8%3E-for-BigUint"],[976,"impl-Shr%3C%26u16%3E-for-%26BigUint"],[977,"impl-Shr%3Ci16%3E-for-%26BigUint"],[978,"impl-Shr%3C%26u32%3E-for-BigUint"],[979,"impl-Shr%3Cisize%3E-for-BigUint"],[980,"impl-Shr%3C%26i16%3E-for-%26BigUint"],[981,"impl-Shr%3Cu128%3E-for-BigUint"],[982,"impl-Shr%3Cusize%3E-for-BigUint"],[983,"impl-Shr%3Cusize%3E-for-%26BigUint"],[984,"impl-Shr%3C%26u128%3E-for-%26BigUint"],[985,"impl-Shr%3Ci32%3E-for-%26BigUint"],[986,"impl-Shr%3C%26i32%3E-for-BigUint"],[987,"impl-Shr%3Cu16%3E-for-BigUint"],[988,"impl-Shr%3C%26u16%3E-for-BigUint"],[989,"impl-Shr%3C%26usize%3E-for-%26BigUint"],[990,"impl-Shr%3Cu32%3E-for-BigUint"],[991,"impl-Shr%3Ci32%3E-for-BigUint"],[992,"impl-Shr%3C%26u32%3E-for-%26BigUint"],[993,"impl-Shr%3C%26isize%3E-for-BigUint"],[994,"impl-Shr%3Cu8%3E-for-%26BigUint"],[995,"impl-Shr%3Ci64%3E-for-BigUint"],[996,"impl-Shr%3C%26u64%3E-for-BigUint"],[997,"impl-Shr%3Cu32%3E-for-%26BigUint"],[998,"impl-Shr%3Cisize%3E-for-%26BigUint"],[999,"impl-ShrAssign%3Ci16%3E-for-BigInt"],[1000,"impl-ShrAssign%3C%26i8%3E-for-BigInt"],[1001,"impl-ShrAssign%3Cu64%3E-for-BigInt"],[1002,"impl-ShrAssign%3C%26i32%3E-for-BigInt"],[1003,"impl-ShrAssign%3Cu32%3E-for-BigInt"],[1004,"impl-ShrAssign%3Cu16%3E-for-BigInt"],[1005,"impl-ShrAssign%3C%26i64%3E-for-BigInt"],[1006,"impl-ShrAssign%3C%26u16%3E-for-BigInt"],[1007,"impl-ShrAssign%3C%26u32%3E-for-BigInt"],[1008,"impl-ShrAssign%3Cusize%3E-for-BigInt"],[1009,"impl-ShrAssign%3Ci128%3E-for-BigInt"],[1010,"impl-ShrAssign%3C%26u64%3E-for-BigInt"],[1011,"impl-ShrAssign%3C%26u128%3E-for-BigInt"],[1012,"impl-ShrAssign%3Ci32%3E-for-BigInt"],[1013,"impl-ShrAssign%3Cu128%3E-for-BigInt"],[1014,"impl-ShrAssign%3Ci64%3E-for-BigInt"],[1015,"impl-ShrAssign%3C%26usize%3E-for-BigInt"],[1016,"impl-ShrAssign%3C%26u8%3E-for-BigInt"],[1017,"impl-ShrAssign%3Ci8%3E-for-BigInt"],[1018,"impl-ShrAssign%3C%26isize%3E-for-BigInt"],[1019,"impl-ShrAssign%3C%26i16%3E-for-BigInt"],[1020,"impl-ShrAssign%3Cisize%3E-for-BigInt"],[1021,"impl-ShrAssign%3C%26i128%3E-for-BigInt"],[1022,"impl-ShrAssign%3Cu8%3E-for-BigInt"],[1023,"impl-ShrAssign%3Cisize%3E-for-BigUint"],[1024,"impl-ShrAssign%3C%26usize%3E-for-BigUint"],[1025,"impl-ShrAssign%3C%26u16%3E-for-BigUint"],[1026,"impl-ShrAssign%3C%26isize%3E-for-BigUint"],[1027,"impl-ShrAssign%3Ci32%3E-for-BigUint"],[1028,"impl-ShrAssign%3Cu128%3E-for-BigUint"],[1029,"impl-ShrAssign%3C%26u8%3E-for-BigUint"],[1030,"impl-ShrAssign%3Cu8%3E-for-BigUint"],[1031,"impl-ShrAssign%3Ci128%3E-for-BigUint"],[1032,"impl-ShrAssign%3C%26i128%3E-for-BigUint"],[1033,"impl-ShrAssign%3Ci8%3E-for-BigUint"],[1034,"impl-ShrAssign%3Cu16%3E-for-BigUint"],[1035,"impl-ShrAssign%3C%26u128%3E-for-BigUint"],[1036,"impl-ShrAssign%3C%26i64%3E-for-BigUint"],[1037,"impl-ShrAssign%3Ci64%3E-for-BigUint"],[1038,"impl-ShrAssign%3C%26i8%3E-for-BigUint"],[1039,"impl-ShrAssign%3Cusize%3E-for-BigUint"],[1040,"impl-ShrAssign%3C%26i16%3E-for-BigUint"],[1041,"impl-ShrAssign%3C%26u64%3E-for-BigUint"],[1042,"impl-ShrAssign%3C%26u32%3E-for-BigUint"],[1043,"impl-ShrAssign%3Cu32%3E-for-BigUint"],[1044,"impl-ShrAssign%3Ci16%3E-for-BigUint"],[1045,"impl-ShrAssign%3Cu64%3E-for-BigUint"],[1046,"impl-ShrAssign%3C%26i32%3E-for-BigUint"],[1051,"impl-BigInt"],[1052,"impl-Roots-for-BigInt"],[1053,"impl-BigUint"],[1054,"impl-Roots-for-BigUint"],[1055,"impl-Sub%3Ci64%3E-for-%26BigInt"],[1056,"impl-Sub%3Cu8%3E-for-%26BigInt"],[1057,"impl-Sub%3C%26BigInt%3E-for-%26BigInt"],[1058,"impl-Sub%3C%26u128%3E-for-BigInt"],[1059,"impl-Sub%3C%26u64%3E-for-BigInt"],[1060,"impl-Sub%3Cisize%3E-for-BigInt"],[1061,"impl-Sub%3Ci128%3E-for-%26BigInt"],[1062,"impl-Sub%3Cu128%3E-for-BigInt"],[1063,"impl-Sub%3Cu32%3E-for-BigInt"],[1064,"impl-Sub%3C%26u8%3E-for-BigInt"],[1065,"impl-Sub%3Ci16%3E-for-BigInt"],[1066,"impl-Sub%3C%26isize%3E-for-%26BigInt"],[1067,"impl-Sub%3Ci32%3E-for-%26BigInt"],[1068,"impl-Sub%3Cusize%3E-for-%26BigInt"],[1069,"impl-Sub%3C%26BigInt%3E-for-BigInt"],[1070,"impl-Sub%3Ci32%3E-for-BigInt"],[1071,"impl-Sub%3C%26i128%3E-for-%26BigInt"],[1072,"impl-Sub%3Cu8%3E-for-BigInt"],[1073,"impl-Sub-for-BigInt"],[1074,"impl-Sub%3Cu128%3E-for-%26BigInt"],[1075,"impl-Sub%3C%26u8%3E-for-%26BigInt"],[1076,"impl-Sub%3C%26i8%3E-for-BigInt"],[1077,"impl-Sub%3C%26i16%3E-for-%26BigInt"],[1078,"impl-Sub%3C%26i32%3E-for-%26BigInt"],[1079,"impl-Sub%3Cu64%3E-for-%26BigInt"],[1080,"impl-Sub%3Cu16%3E-for-BigInt"],[1081,"impl-Sub%3Ci8%3E-for-BigInt"],[1082,"impl-Sub%3C%26u32%3E-for-%26BigInt"],[1083,"impl-Sub%3CBigInt%3E-for-%26BigInt"],[1084,"impl-Sub%3Ci16%3E-for-%26BigInt"],[1085,"impl-Sub%3C%26u16%3E-for-%26BigInt"],[1086,"impl-Sub%3Cu64%3E-for-BigInt"],[1087,"impl-Sub%3C%26i64%3E-for-BigInt"],[1088,"impl-Sub%3Cu32%3E-for-%26BigInt"],[1089,"impl-Sub%3C%26usize%3E-for-%26BigInt"],[1090,"impl-Sub%3Cu16%3E-for-%26BigInt"],[1091,"impl-Sub%3Ci8%3E-for-%26BigInt"],[1092,"impl-Sub%3C%26u16%3E-for-BigInt"],[1093,"impl-Sub%3C%26u128%3E-for-%26BigInt"],[1094,"impl-Sub%3C%26u32%3E-for-BigInt"],[1095,"impl-Sub%3C%26u64%3E-for-%26BigInt"],[1096,"impl-Sub%3C%26i128%3E-for-BigInt"],[1097,"impl-Sub%3Ci128%3E-for-BigInt"],[1098,"impl-Sub%3Ci64%3E-for-BigInt"],[1099,"impl-Sub%3C%26i8%3E-for-%26BigInt"],[1100,"impl-Sub%3C%26i64%3E-for-%26BigInt"],[1101,"impl-Sub%3C%26isize%3E-for-BigInt"],[1102,"impl-Sub%3C%26i32%3E-for-BigInt"],[1103,"impl-Sub%3Cisize%3E-for-%26BigInt"],[1104,"impl-Sub%3C%26usize%3E-for-BigInt"],[1105,"impl-Sub%3C%26i16%3E-for-BigInt"],[1106,"impl-Sub%3Cusize%3E-for-BigInt"],[1107,"impl-Sub%3C%26usize%3E-for-%26BigUint"],[1108,"impl-Sub%3Cusize%3E-for-%26BigUint"],[1109,"impl-Sub%3C%26u8%3E-for-BigUint"],[1110,"impl-Sub%3Cu8%3E-for-BigUint"],[1111,"impl-Sub%3C%26u16%3E-for-BigUint"],[1112,"impl-Sub%3Cu32%3E-for-%26BigUint"],[1113,"impl-Sub%3Cu8%3E-for-%26BigUint"],[1114,"impl-Sub%3Cu16%3E-for-%26BigUint"],[1115,"impl-Sub%3Cu64%3E-for-%26BigUint"],[1116,"impl-Sub%3C%26u32%3E-for-BigUint"],[1117,"impl-Sub%3Cu16%3E-for-BigUint"],[1118,"impl-Sub%3C%26u128%3E-for-BigUint"],[1119,"impl-Sub%3Cu64%3E-for-BigUint"],[1120,"impl-Sub%3C%26u32%3E-for-%26BigUint"],[1121,"impl-Sub%3C%26u128%3E-for-%26BigUint"],[1122,"impl-Sub%3Cu32%3E-for-BigUint"],[1123,"impl-Sub%3CBigUint%3E-for-%26BigUint"],[1124,"impl-Sub%3C%26BigUint%3E-for-BigUint"],[1125,"impl-Sub%3Cusize%3E-for-BigUint"],[1126,"impl-Sub%3C%26u8%3E-for-%26BigUint"],[1127,"impl-Sub%3Cu128%3E-for-%26BigUint"],[1128,"impl-Sub%3C%26BigUint%3E-for-%26BigUint"],[1129,"impl-Sub%3C%26u16%3E-for-%26BigUint"],[1130,"impl-Sub%3C%26u64%3E-for-%26BigUint"],[1131,"impl-Sub%3Cu128%3E-for-BigUint"],[1132,"impl-Sub%3C%26usize%3E-for-BigUint"],[1133,"impl-Sub-for-BigUint"],[1134,"impl-Sub%3C%26u64%3E-for-BigUint"],[1135,"impl-SubAssign%3Cu64%3E-for-BigInt"],[1136,"impl-SubAssign%3Cu16%3E-for-BigInt"],[1137,"impl-SubAssign%3Cu8%3E-for-BigInt"],[1138,"impl-SubAssign%3Ci128%3E-for-BigInt"],[1139,"impl-SubAssign%3C%26BigInt%3E-for-BigInt"],[1140,"impl-SubAssign%3Ci16%3E-for-BigInt"],[1141,"impl-SubAssign%3Cisize%3E-for-BigInt"],[1142,"impl-SubAssign%3Ci64%3E-for-BigInt"],[1143,"impl-SubAssign%3Cu128%3E-for-BigInt"],[1144,"impl-SubAssign%3Ci8%3E-for-BigInt"],[1145,"impl-SubAssign%3Cusize%3E-for-BigInt"],[1146,"impl-SubAssign%3Ci32%3E-for-BigInt"],[1147,"impl-SubAssign%3Cu32%3E-for-BigInt"],[1148,"impl-SubAssign-for-BigInt"],[1149,"impl-SubAssign%3Cu16%3E-for-BigUint"],[1150,"impl-SubAssign%3Cu8%3E-for-BigUint"],[1151,"impl-SubAssign%3C%26BigUint%3E-for-BigUint"],[1152,"impl-SubAssign%3Cusize%3E-for-BigUint"],[1153,"impl-SubAssign%3Cu128%3E-for-BigUint"],[1154,"impl-SubAssign%3Cu32%3E-for-BigUint"],[1155,"impl-SubAssign%3Cu64%3E-for-BigUint"],[1156,"impl-SubAssign-for-BigUint"],[1165,"impl-BigInt"],[1166,"impl-ToBigUint-for-BigInt"],[1213,"impl-TryFrom%3Ci64%3E-for-BigUint"],[1214,"impl-TryFrom%3Cisize%3E-for-BigUint"],[1215,"impl-TryFrom%3C%26BigInt%3E-for-BigUint"],[1216,"impl-TryFrom%3Ci32%3E-for-BigUint"],[1218,"impl-TryFrom%3Ci16%3E-for-BigUint"],[1219,"impl-TryFrom%3CBigInt%3E-for-BigUint"],[1220,"impl-TryFrom%3Ci128%3E-for-BigUint"],[1221,"impl-TryFrom%3Ci8%3E-for-BigUint"]]}],\
["num_integer",{"doc":"Integer trait and functions.","t":"KFKFKHMHMHNNNNHNNNNHNHMHNHMMNNNNNNHMOHNNNNMMMHMHMHNNNHMNHNNNNNNNNNOO","n":["Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","clone","clone_into","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","sqrt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y"],"q":[[0,"num_integer"],[68,"core::clone"],[69,"core::cmp"],[70,"core::fmt"],[71,"core::fmt"],[72,"core::result"],[73,"core::any"]],"d":["Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","","","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. Returns …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","Returns the argument unchanged.","Returns the argument unchanged.","Calculates the Greatest Common Divisor (GCD) of the number …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer – …","Returns the truncated principal <code>n</code>th root of an integer – …","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,1,0,13,5,13,5,0,4,4,5,5,0,2,0,2,0,2,0,2,2,5,2,2,5,13,5,0,2,5,0,2,13,5,13,2,2,2,0,2,0,2,0,13,13,2,0,4,2,0,4,4,5,13,5,13,5,13,5,5,5],"f":[0,0,0,0,0,[[-1,-1],-1,1],[[1,1],1],[[-1,-1],-1,1],[[1,1],1],[[-1,-1],-1,[2,3]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,4],[4,4],[4,4],[[[5,[-1]]],[[5,[-1]]],3],[[-1,-2],6,[],[]],[[-1,-1],-1,2],[[2,2],2],[[-1,-1],-1,2],[[2,2],2],[[-1,-1],[[6,[-1,-1]]],2],[[2,2],[[6,[2,2]]]],[[-1,-1],[[6,[-1,-1]]],2],[[2,2],[[6,[2,2]]]],[[2,2],7],[[[5,[-1]],[5,[-1]]],7,8],[[2,2],[[5,[2]]]],[[2,2],[[6,[[5,[2]],2]]]],[[[5,[-1]],9],10,11],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,2],[[2,2],2],0,[[-1,-1],[[6,[-1,-1]]],2],[[2,2],[[6,[2,2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,7],[[2,2],7],[2,7],[[-1,-1],-1,2],[[2,2],2],[[-1,-1],-1,2],[[2,2],2],[[[12,[-1]]],-1,[]],[-1,[[13,[-1]]],2],[[[13,[-1]]],[[14,[-1]]],[2,3]],[[2,2],2],[[-1,15],-1,4],[[4,15],4],[[2,2],2],[-1,-1,4],[4,4],[4,4],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],0,0],"c":[],"p":[[10,"Average",0],[10,"Integer",0],[10,"Clone",68],[10,"Roots",0],[5,"ExtendedGcd",0],[1,"tuple"],[1,"bool"],[10,"PartialEq",69],[5,"Formatter",70],[8,"Result",70],[10,"Debug",70],[1,"slice"],[5,"IterBinomial",0],[6,"Option",71],[1,"u32"],[6,"Result",72],[5,"TypeId",73]],"b":[]}],\
["num_traits",{"doc":"Numeric traits for generic mathematics","t":"EEEEEEEEEEEPEEEGEEREPEEKKKKEKKEFEEKEEEEEEEEEEEEEEEEENNNNCCEEHHHCNNNNNMCCNNOECCECCENNNNNNNEKKKMMMMKKKKMHMNNNNNMNNNNNMNNNNNNNMNNNNNMNNMMMMMMMMMMKKKMMNMNMMMNMNMMMMMMMMMMNMMNMMMNMMMMNMNMMMMMMNMNMNMNMNMNNNMMMMMMNMMMNMMMMMMMMMMMMMNMNMNMNMMMMMMMNMNMNKKNMHMNNHMKMMMMNMMNMMMMMMMNMMMCCCCCCCCRRKKKMMNMMNKKKKKKKKMMMMMMMMKKMMMMKRMKKRMMKKKMMMKKKKMMMMMKKKKKKMMMMMMRKHHMKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKKHMHMMMHM","n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","Empty","Euclid","Float","FloatConst","FloatErrorKind","FromBytes","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToBytes","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","real","sign","signum","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_subnormal","is_subnormal","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","bytes","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","Bytes","Bytes","FromBytes","NumBytes","ToBytes","from_be_bytes","from_le_bytes","from_ne_bytes","to_be_bytes","to_le_bytes","to_ne_bytes","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":[[0,"num_traits"],[90,"num_traits::bounds"],[97,"num_traits::cast"],[132,"num_traits::float"],[243,"num_traits::identities"],[253,"num_traits::int"],[273,"num_traits::ops"],[281,"num_traits::ops::bytes"],[292,"num_traits::ops::checked"],[308,"num_traits::ops::euclid"],[314,"num_traits::ops::inv"],[317,"num_traits::ops::mul_add"],[322,"num_traits::ops::overflowing"],[328,"num_traits::ops::saturating"],[337,"num_traits::ops::wrapping"],[349,"num_traits::pow"],[354,"num_traits::real"],[402,"num_traits::sign"],[412,"core::cmp"],[413,"core::fmt"],[414,"core::fmt"],[415,"alloc::string"],[416,"core::any"],[417,"core::marker"],[418,"core::option"],[419,"core::num"],[420,"core::marker"],[421,"core::ops::arith"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns <code>true</code> if the number is subnormal.","Returns <code>true</code> if the number is subnormal.","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","","","","","","","Create a number from its representation as a byte array in …","Create a number from its representation as a byte array in …","Create a number from its memory representation as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation …","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation <code>(self * a) + b</code>","Performs the fused multiply-add assignment operation …","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,9,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,9,0,0,2,5,5,0,0,0,0,0,0,0,5,2,5,2,5,2,5,0,0,0,0,13,14,13,15,0,0,0,0,16,0,19,22,22,22,22,22,22,22,22,22,22,22,22,22,22,20,20,20,20,20,20,20,20,20,20,20,20,20,20,35,35,35,35,35,35,35,35,35,35,0,0,0,35,35,35,35,35,35,35,35,35,36,37,36,36,36,36,36,36,36,36,36,36,37,37,36,36,36,36,37,36,36,36,36,36,37,36,37,36,37,36,37,36,36,37,36,37,36,37,36,37,36,37,36,37,37,36,36,36,36,36,36,36,37,37,36,36,37,37,36,37,36,36,37,36,37,36,37,36,36,36,37,36,37,36,37,36,37,36,36,36,36,36,36,37,36,37,36,36,37,0,0,41,42,0,41,41,42,0,42,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0,0,0,0,0,0,48,45,0,0,0,45,45,45,48,48,48,0,0,0,0,0,0,0,0,49,50,51,52,53,54,55,56,0,0,57,57,58,58,0,60,60,0,0,61,61,62,0,0,0,63,64,65,0,0,0,0,66,67,68,66,69,0,0,0,0,0,0,70,71,72,73,74,75,78,0,0,0,78,0,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,0,0,0,80,0,80,80,80,0,80],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[-1,-1,-1],-1,1],[[-1,-1],-1,1],[[-1,-1],-1,1],0,[[2,3],4],[[5,3],4],[[5,3],4],[-1,-1,[]],[-1,-1,[]],[[6,7],[[10,[[9,[],[[8,[-1]]]],-1]]],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,11,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],0,0,0,0,[[],13],[[],14],[[],13],[[],15],0,0,0,0,[16,-1,17],[-1,[[18,[-2]]],19,19],[-1,[[18,[19]]],20],[21,[[18,[22]]]],[23,[[18,[22]]]],[24,[[18,[22]]]],[25,[[18,[22]]]],[26,[[18,[22]]]],[27,[[18,[22]]]],[28,[[18,[22]]]],[29,[[18,[22]]]],[30,[[18,[22]]]],[31,[[18,[22]]]],[7,[[18,[22]]]],[32,[[18,[22]]]],[33,[[18,[22]]]],[34,[[18,[22]]]],[20,[[18,[21]]]],[20,[[18,[23]]]],[20,[[18,[24]]]],[20,[[18,[25]]]],[20,[[18,[26]]]],[20,[[18,[27]]]],[20,[[18,[28]]]],[20,[[18,[29]]]],[20,[[18,[30]]]],[20,[[18,[31]]]],[20,[[18,[7]]]],[20,[[18,[32]]]],[20,[[18,[33]]]],[20,[[18,[34]]]],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],0,0,0,[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[36,36],[37,37],[[36,36],36],[36,36],[36,36],[36,36],[36,36],[36,36],[[36,36],36],[36,36],[36,36],[36,36],[37,37],[37,38],[36,38],[[36,36],36],[36,36],[36,36],[[],37],[[],36],[36,36],[36,36],[36,36],[36,36],[37,37],[36,36],[37,37],[[36,36],36],[[],37],[[],36],[37,[[39,[32,25,28]]]],[36,[[39,[32,25,28]]]],[36,40],[37,40],[36,40],[37,40],[36,40],[37,40],[36,40],[37,40],[36,40],[37,40],[36,40],[37,40],[37,40],[36,40],[36,36],[36,36],[[36,36],36],[36,36],[36,36],[[36,36],36],[[37,37],37],[[],37],[[],36],[[36,36],36],[[37,37],37],[[],37],[[],36],[[],37],[[],36],[[36,36,36],36],[[],37],[[],36],[[],37],[[],36],[[],37],[[],36],[[36,36],36],[[36,26],36],[[37,26],37],[36,36],[37,37],[36,36],[37,37],[36,36],[37,37],[36,36],[36,[[39,[36,36]]]],[36,36],[36,36],[36,36],[36,36],[37,37],[36,36],[37,37],[36,36],[36,36],[37,37],0,0,[41,40],[42,40],[[],-1,41],[[],41],[41,39],[42,39],[[],-1,42],[[],42],0,[43,7],[43,7],[43,43],[43,43],[43,7],[43,7],[[43,7],43],[43,43],[[43,7],43],[[43,7],43],[[43,7],43],[[43,7],43],[43,43],[43,43],[43,43],[43,7],[43,7],[[43,7],43],[[43,7],43],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[45,[],[[44,[-1]]]]],[46,47]],[-1,[[45,[],[[44,[-1]]]]],[46,47]],[-1,[[45,[],[[44,[-1]]]]],[46,47]],[[[48,[],[[44,[-1]]]]],-1,46],[[[48,[],[[44,[-1]]]]],-1,46],[[[48,[],[[44,[-1]]]]],-1,46],0,0,0,0,0,0,0,0,[[49,49],[[18,[49]]]],[[50,50],[[18,[50]]]],[[51,51],[[18,[51]]]],[52,[[18,[52]]]],[[53,53],[[18,[53]]]],[[54,7],[[18,[54]]]],[[55,7],[[18,[55]]]],[[56,56],[[18,[56]]]],0,0,[[57,57],[[18,[57]]]],[[57,57],[[18,[57]]]],[[58,58],58],[[58,58],58],0,0,[[[60,[],[[59,[-1]]]]],-1,[]],0,0,0,[[[61,[],[[59,[-1]]]],-2,-3],-1,[],[],[]],[[62,-1,-2],39,[],[]],0,0,0,[[63,63],[[39,[63,40]]]],[[64,64],[[39,[64,40]]]],[[65,65],[[39,[65,40]]]],0,0,0,0,[[66,66],66],[[67,67],67],[[68,68],68],[[66,66],66],[[69,69],69],0,0,0,0,0,0,[[70,70],70],[[71,71],71],[72,72],[[73,7],73],[[74,7],74],[[75,75],75],0,0,[[-1,34],[[18,[-1]]],[76,41,51]],[[-1,34],-1,[76,41,[77,[],[[59,[]]]]]],[[[78,[],[[59,[-1]]]],-2],-1,[],[]],0,[79,79],[[79,79],79],[79,79],[79,79],[79,79],[79,79],[79,79],[[79,79],79],[79,79],[79,79],[79,79],[79,79],[79,79],[[],79],[79,79],[79,79],[79,79],[79,79],[79,79],[[79,79],79],[79,40],[79,40],[79,79],[79,79],[[79,79],79],[79,79],[79,79],[[79,79],79],[[],79],[[79,79],79],[[],79],[[],79],[[79,79,79],79],[[79,79],79],[[79,26],79],[79,79],[79,79],[79,79],[79,79],[79,[[39,[79,79]]]],[79,79],[79,79],[79,79],[79,79],[79,79],[79,79],[79,79],0,0,[-1,-1,80],[80,80],[[-1,-1],-1,80],[[80,80],80],[80,40],[80,40],[-1,-1,80],[80,80]],"c":[],"p":[[10,"PartialOrd",412],[6,"FloatErrorKind",0],[5,"Formatter",413],[8,"Result",413],[5,"ParseFloatError",0],[1,"str"],[1,"u32"],[17,"FromStrRadixErr"],[10,"Num",0],[6,"Result",414],[5,"String",415],[5,"TypeId",416],[10,"Bounded",90],[10,"UpperBounded",90],[10,"LowerBounded",90],[10,"AsPrimitive",97],[10,"Copy",417],[6,"Option",418],[10,"NumCast",97],[10,"ToPrimitive",97],[1,"f32"],[10,"FromPrimitive",97],[1,"f64"],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[1,"isize"],[1,"u128"],[1,"u16"],[1,"u64"],[1,"u8"],[1,"usize"],[10,"FloatConst",132],[10,"Float",132],[10,"FloatCore",132],[6,"FpCategory",419],[1,"tuple"],[1,"bool"],[10,"One",243],[10,"Zero",243],[10,"PrimInt",253],[17,"Bytes"],[10,"FromBytes",281],[10,"NumBytes",281],[10,"Sized",417],[10,"ToBytes",281],[10,"CheckedAdd",292],[10,"CheckedDiv",292],[10,"CheckedMul",292],[10,"CheckedNeg",292],[10,"CheckedRem",292],[10,"CheckedShl",292],[10,"CheckedShr",292],[10,"CheckedSub",292],[10,"CheckedEuclid",308],[10,"Euclid",308],[17,"Output"],[10,"Inv",314],[10,"MulAdd",317],[10,"MulAddAssign",317],[10,"OverflowingAdd",322],[10,"OverflowingMul",322],[10,"OverflowingSub",322],[10,"Saturating",328],[10,"SaturatingAdd",328],[10,"SaturatingMul",328],[10,"SaturatingSub",328],[10,"WrappingAdd",337],[10,"WrappingMul",337],[10,"WrappingNeg",337],[10,"WrappingShl",337],[10,"WrappingShr",337],[10,"WrappingSub",337],[10,"Clone",420],[10,"Mul",421],[10,"Pow",349],[10,"Real",354],[10,"Signed",402]],"b":[[65,"impl-Debug-for-ParseFloatError"],[66,"impl-Display-for-ParseFloatError"]]}],\
["once_cell",{"doc":"Overview","t":"CCCFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["race","sync","unsync","OnceBool","OnceBox","OnceNonZeroUsize","OnceRef","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","drop","fmt","fmt","fmt","fmt","from","from","from","from","get","get","get","get","get_or_init","get_or_init","get_or_init","get_or_init","get_or_try_init","get_or_try_init","get_or_try_init","get_or_try_init","into","into","into","into","new","new","new","new","set","set","set","set","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","get_unchecked","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","wait","with_value","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","with_value"],"q":[[0,"once_cell"],[3,"once_cell::race"],[64,"once_cell::sync"],[111,"once_cell::unsync"],[156,"core::fmt"],[157,"core::fmt"],[158,"core::num::nonzero"],[159,"core::ops::function"],[160,"alloc::boxed"],[161,"core::result"],[162,"core::any"],[163,"core::clone"],[164,"core::default"],[165,"core::cmp"],[166,"core::fmt"]],"d":["Thread-safe, non-blocking, “first one wins” flavor of …","Thread-safe, blocking version of <code>OnceCell</code>.","Single-threaded version of <code>OnceCell</code>.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets a reference to the underlying value.","Gets the underlying value.","Gets the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","","","","","","","","","","","","","A value which is initialized on the first access.","A thread-safe cell which can be written to only once.","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","","Returns the argument unchanged.","","Returns the argument unchanged.","Gets the reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets the mutable reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Get the reference to the underlying value, without …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value. Returns","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Gets the reference to the underlying value, blocking the …","Creates a new initialized cell.","A value which is initialized on the first access.","A cell which can be written to only once. It is not thread …","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","","Returns the argument unchanged.","","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets a mutable reference to the underlying value.","Gets the mutable reference to the result of this lazy …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value.","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Creates a new initialized cell."],"i":[0,0,0,0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,2,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,0,16,18,16,18,16,16,16,16,18,18,18,16,16,18,18,18,16,16,16,18,16,18,16,18,16,16,16,16,18,16,18,16,18,16,16,16,16,18,16,16,18,16,18,16,16,0,0,23,24,23,24,23,23,23,23,24,24,24,23,23,24,24,24,23,23,23,24,23,24,23,24,23,23,23,24,23,24,23,24,23,23,23,23,24,23,23,24,23,24,23],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[1,[-1]]],[]],[[],[[2,[-1]]],[]],[[],3],[[],4],[[[2,[-1]]],5,[]],[[[1,[-1]],6],7,[]],[[[2,[-1]],6],7,[]],[[3,6],7],[[4,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[1,[-1]]],[[8,[-1]]],[]],[[[2,[-1]]],[[8,[-1]]],[]],[3,[[8,[9]]]],[4,[[8,[10]]]],[[[1,[-1]],-2],-1,[],[[12,[],[[11,[-1]]]]]],[[[2,[-1]],-2],-1,[],[[12,[],[[11,[[13,[-1]]]]]]]],[[3,-1],9,[[12,[],[[11,[9]]]]]],[[4,-1],10,[[12,[],[[11,[10]]]]]],[[[1,[-1]],-3],[[14,[-1,-2]]],[],[],[[12,[],[[11,[[14,[-1,-2]]]]]]]],[[[2,[-1]],-3],[[14,[-1,-2]]],[],[],[[12,[],[[11,[[14,[[13,[-1]],-2]]]]]]]],[[3,-2],[[14,[9,-1]]],[],[[12,[],[[11,[[14,[9,-1]]]]]]]],[[4,-2],[[14,[10,-1]]],[],[[12,[],[[11,[[14,[10,-1]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[1,[-1]]],[]],[[],[[2,[-1]]],[]],[[],3],[[],4],[[[1,[-1]],-1],[[14,[5,5]]],[]],[[[2,[-1]],[13,[-1]]],[[14,[5,[13,[-1]]]]],[]],[[3,9],[[14,[5,5]]]],[[4,10],[[14,[5,5]]]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[-1]]],[[16,[-1]]],17],[[[16,[-1]],[16,[-1]]],5,17],[[-1,-2],5,[],[]],[[],[[16,[-1]]],[]],[[],[[18,[-1]]],19],[[[18,[-1,-2]]],-1,[],[[12,[],[[11,[-1]]]]]],[[[18,[-1,-2]]],-1,[],[[12,[],[[11,[-1]]]]]],[[[16,[-1]],[16,[-1]]],10,20],[[[16,[-1]],6],7,21],[[[18,[-1,-2]],6],7,21,[]],[[[18,[-1,-2]]],-1,[],[[12,[],[[11,[-1]]]]]],[[[18,[-1,-2]]],-1,[],[[12,[],[[11,[-1]]]]]],[22,-1,[]],[-1,-1,[]],[-1,[[16,[-1]]],[]],[-1,-1,[]],[[[16,[-1]]],[[8,[-1]]],[]],[[[18,[-1,-2]]],[[8,[-1]]],[],[[12,[],[[11,[-1]]]]]],[[[16,[-1]]],[[8,[-1]]],[]],[[[18,[-1,-2]]],[[8,[-1]]],[],[[12,[],[[11,[-1]]]]]],[[[16,[-1]],-2],-1,[],[[12,[],[[11,[-1]]]]]],[[[16,[-1]],-3],[[14,[-1,-2]]],[],[],[[12,[],[[11,[[14,[-1,-2]]]]]]]],[[[16,[-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[-1]]],[[8,[-1]]],[]],[[[18,[-1,-2]]],[[14,[-1,-2]]],[],[]],[[],[[16,[-1]]],[]],[-1,[[18,[-2,-1]]],[],[]],[[[16,[-1]],-1],[[14,[5,-1]]],[]],[[[16,[-1]]],[[8,[-1]]],[]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[[[16,[-1]],-1],[[14,[-1,[5,[-1,-1]]]]],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[[[16,[-1]]],-1,[]],[-1,[[16,[-1]]],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[-1]]],17],[[[23,[-1]],[23,[-1]]],5,17],[[-1,-2],5,[],[]],[[],[[23,[-1]]],[]],[[],[[24,[-1]]],19],[[[24,[-1,-2]]],-1,[],[[12,[],[[11,[-1]]]]]],[[[24,[-1,-2]]],-1,[],[[12,[],[[11,[-1]]]]]],[[[23,[-1]],[23,[-1]]],10,20],[[[23,[-1]],6],7,21],[[[24,[-1,-2]],6],7,21,[]],[[[24,[-1,-2]]],-1,[],[[12,[],[[11,[-1]]]]]],[[[24,[-1,-2]]],-1,[],[[12,[],[[11,[-1]]]]]],[-1,[[23,[-1]]],[]],[-1,-1,[]],[22,-1,[]],[-1,-1,[]],[[[23,[-1]]],[[8,[-1]]],[]],[[[24,[-1,-2]]],[[8,[-1]]],[],[[12,[],[[11,[-1]]]]]],[[[23,[-1]]],[[8,[-1]]],[]],[[[24,[-1,-2]]],[[8,[-1]]],[],[[12,[],[[11,[-1]]]]]],[[[23,[-1]],-2],-1,[],[[12,[],[[11,[-1]]]]]],[[[23,[-1]],-3],[[14,[-1,-2]]],[],[],[[12,[],[[11,[[14,[-1,-2]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[8,[-1]]],[]],[[[24,[-1,-2]]],[[14,[-1,-2]]],[],[]],[[],[[23,[-1]]],[]],[-1,[[24,[-2,-1]]],[],[]],[[[23,[-1]],-1],[[14,[5,-1]]],[]],[[[23,[-1]]],[[8,[-1]]],[]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[[[23,[-1]],-1],[[14,[-1,[5,[-1,-1]]]]],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,[[23,[-1]]],[]]],"c":[],"p":[[5,"OnceRef",3],[5,"OnceBox",3],[5,"OnceNonZeroUsize",3],[5,"OnceBool",3],[1,"tuple"],[5,"Formatter",156],[8,"Result",156],[6,"Option",157],[5,"NonZeroUsize",158],[1,"bool"],[17,"Output"],[10,"FnOnce",159],[5,"Box",160],[6,"Result",161],[5,"TypeId",162],[5,"OnceCell",64],[10,"Clone",163],[5,"Lazy",64],[10,"Default",164],[10,"PartialEq",165],[10,"Debug",156],[1,"never"],[5,"OnceCell",111],[5,"Lazy",111]],"b":[]}],\
["parking_lot",{"doc":"This library provides implementations of <code>Mutex</code>, <code>RwLock</code>, …","t":"FPIIPIIIIIIIPFGPFFFFIIIIIIFNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Condvar","Done","FairMutex","FairMutexGuard","InProgress","MappedFairMutexGuard","MappedMutexGuard","MappedReentrantMutexGuard","MappedRwLockReadGuard","MappedRwLockWriteGuard","Mutex","MutexGuard","New","Once","OnceState","Poisoned","RawFairMutex","RawMutex","RawRwLock","RawThreadId","ReentrantMutex","ReentrantMutexGuard","RwLock","RwLockReadGuard","RwLockUpgradableReadGuard","RwLockWriteGuard","WaitTimeoutResult","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bump","bump","bump_exclusive","bump_shared","bump_upgradable","call_once","call_once_force","clone","clone","clone_into","clone_into","const_fair_mutex","const_mutex","const_reentrant_mutex","const_rwlock","default","default","done","downgrade","downgrade_to_upgradable","downgrade_upgradable","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","is_locked","is_locked","is_locked","lock","lock","lock_api","lock_exclusive","lock_shared","lock_shared_recursive","lock_upgradable","new","new","nonzero_thread_id","notify_all","notify_one","poisoned","state","timed_out","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_lock","try_lock","try_lock_exclusive","try_lock_exclusive_for","try_lock_exclusive_until","try_lock_for","try_lock_for","try_lock_shared","try_lock_shared_for","try_lock_shared_recursive","try_lock_shared_recursive_for","try_lock_shared_recursive_until","try_lock_shared_until","try_lock_until","try_lock_until","try_lock_upgradable","try_lock_upgradable_for","try_lock_upgradable_until","try_upgrade","try_upgrade_for","try_upgrade_until","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlock","unlock","unlock_exclusive","unlock_exclusive_fair","unlock_fair","unlock_fair","unlock_shared","unlock_shared_fair","unlock_upgradable","unlock_upgradable_fair","upgrade","wait","wait_for","wait_until"],"q":[[0,"parking_lot"],[165,"core::ops::function"],[166,"core::fmt"],[167,"core::fmt"],[168,"core::result"],[169,"core::time"],[170,"instant::native"],[171,"core::any"],[172,"core::marker"]],"d":["A Condition Variable","A closure has completed successfully.","A mutual exclusive primitive that is always fair, useful …","An RAII implementation of a “scoped lock” of a mutex. …","A thread is currently executing a closure.","An RAII mutex guard returned by <code>FairMutexGuard::map</code>, which …","An RAII mutex guard returned by <code>MutexGuard::map</code>, which can …","An RAII mutex guard returned by <code>ReentrantMutexGuard::map</code>, …","An RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …","An RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…","A mutual exclusion primitive useful for protecting shared …","An RAII implementation of a “scoped lock” of a mutex. …","A closure has not been executed yet","A synchronization primitive which can be used to run a …","Current state of a <code>Once</code>.","A closure was executed but panicked.","Raw fair mutex type backed by the parking lot.","Raw mutex type backed by the parking lot.","Raw reader-writer lock type backed by the parking lot.","Implementation of the <code>GetThreadId</code> trait for …","A mutex which can be recursively locked by a single thread.","An RAII implementation of a “scoped lock” of a …","A reader-writer lock","RAII structure used to release the shared read access of a …","RAII structure used to release the upgradable read access …","RAII structure used to release the exclusive write access …","A type indicating whether a timed wait on a condition …","","","","","","","","","","","","","","","","","","","","","","Performs an initialization routine once and only once. The …","Performs the same function as <code>call_once</code> except ignores …","","","","","Creates a new fair mutex in an unlocked state ready for …","Creates a new mutex in an unlocked state ready for use.","Creates a new reentrant mutex in an unlocked state ready …","Creates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.","","","Returns whether the associated <code>Once</code> has successfully …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Creates a new condition variable which is ready to be …","Creates a new <code>Once</code> value.","","Wakes up all blocked threads on this condvar.","Wakes up one blocked thread on this condvar.","Returns whether the associated <code>Once</code> has been poisoned.","Returns the current state of this <code>Once</code>.","Returns whether the wait was known to have timed out.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Blocks the current thread until this condition variable …","Waits on this condition variable for a notification, …","Waits on this condition variable for a notification, …"],"i":[0,7,0,0,7,0,0,0,0,0,0,0,7,0,0,7,0,0,0,0,0,0,0,0,0,0,0,13,5,1,3,4,17,8,7,13,5,1,3,4,17,8,7,1,3,4,4,4,5,5,8,7,8,7,0,0,0,0,13,5,7,4,4,4,8,7,13,5,8,7,13,5,1,3,4,17,8,7,13,5,1,3,4,17,8,7,1,3,4,1,3,0,4,4,4,4,13,5,17,13,13,7,5,8,8,7,13,5,1,3,4,17,8,7,13,5,1,3,4,17,8,7,1,3,4,4,4,1,3,4,4,4,4,4,4,1,3,4,4,4,4,4,4,13,5,1,3,4,17,8,7,1,3,4,4,1,3,4,4,4,4,4,13,13,13],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[3,2],[4,2],[4,2],[4,2],[[5,-1],2,6],[[5,-1],2,[[6,[7]]]],[8,8],[7,7],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[-1,[[9,[-1]]],[]],[-1,[[10,[-1]]],[]],[-1,[[11,[-1]]],[]],[-1,[[12,[-1]]],[]],[[],13],[[],5],[7,14],[4,2],[4,2],[4,2],[[8,8],14],[[7,7],14],[[13,15],16],[[5,15],16],[[8,15],16],[[7,15],16],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,14],[3,14],[4,14],[1,2],[3,2],0,[4,2],[4,2],[4,2],[4,2],[[],13],[[],5],[17,18],[13,19],[13,14],[7,14],[5,7],[8,14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[1,14],[3,14],[4,14],[[4,21],14],[[4,22],14],[[1,-1],14,[]],[[3,21],14],[4,14],[[4,-1],14,[]],[4,14],[[4,-1],14,[]],[[4,-1],14,[]],[[4,-1],14,[]],[[1,-1],14,[]],[[3,22],14],[4,14],[[4,21],14],[[4,22],14],[4,14],[[4,21],14],[[4,22],14],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[1,2],[3,2],[4,2],[4,2],[1,2],[3,2],[4,2],[4,2],[4,2],[4,2],[4,2],[[13,[24,[-1]]],2,25],[[13,[24,[-1]],21],8,25],[[13,[24,[-1]],22],8,25]],"c":[],"p":[[5,"RawFairMutex",0],[1,"tuple"],[5,"RawMutex",0],[5,"RawRwLock",0],[5,"Once",0],[10,"FnOnce",165],[6,"OnceState",0],[5,"WaitTimeoutResult",0],[8,"FairMutex",0],[8,"Mutex",0],[8,"ReentrantMutex",0],[8,"RwLock",0],[5,"Condvar",0],[1,"bool"],[5,"Formatter",166],[8,"Result",166],[5,"RawThreadId",0],[5,"NonZeroUsize",167],[1,"usize"],[6,"Result",168],[5,"Duration",169],[8,"Instant",170],[5,"TypeId",171],[8,"MutexGuard",0],[10,"Sized",172]],"b":[]}],\
["parking_lot_core",{"doc":"This library exposes a low-level API for creating your own …","t":"PSSGPGFPPGPFPPPPPFFPONNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNHONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHOHH","n":["Abort","DEFAULT_PARK_TOKEN","DEFAULT_UNPARK_TOKEN","FilterOp","Invalid","ParkResult","ParkToken","RequeueAll","RequeueOne","RequeueOp","Skip","SpinWait","Stop","TimedOut","Unpark","UnparkOne","UnparkOneRequeueRest","UnparkResult","UnparkToken","Unparked","be_fair","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deadlock","default","default","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","have_more_threads","into","into","into","into","into","into","into","is_unparked","new","park","requeued_threads","reset","spin","spin_no_yield","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpark_all","unpark_filter","unpark_one","unpark_requeue","unparked_threads","acquire_resource","release_resource"],"q":[[0,"parking_lot_core"],[116,"parking_lot_core::deadlock"],[118,"core::fmt"],[119,"core::fmt"],[120,"core::option"],[121,"core::ops::function"],[122,"core::result"],[123,"core::any"],[124,"core::ops::function"]],"d":["Abort the operation without doing anything.","A default park token to use.","A default unpark token to use.","Operation that <code>unpark_filter</code> should perform for each …","The validation callback returned false.","Result of a park operation.","A value associated with a parked thread which can be used …","Requeue all threads onto the target queue.","Requeue one thread and leave the rest parked on the …","Operation that <code>unpark_requeue</code> should perform.","Don’t unpark the thread and continue scanning the list …","A counter used to perform exponential backoff in spin …","Don’t unpark the thread and stop scanning the list of …","The timeout expired.","Unpark the thread and continue scanning the list of parked …","Unpark one thread and leave the rest parked. No requeuing …","Unpark one thread and requeue the rest onto the target …","Result of an unpark operation.","A value which is passed from an unparker to a parked …","We were unparked by another thread with the given token.","This is set to true on average once every 0.5ms for any …","","","","","","","","","","","","","","","","","","","","","","","","","","","[Experimental] Deadlock detection","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Whether there are any threads remaining in the queue. This …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if we were unparked by another thread.","Creates a new <code>SpinWait</code>.","Parks the current thread in the queue associated with the …","The number of threads that were requeued.","Resets a <code>SpinWait</code> to its initial state.","Spins until the sleep threshold has been reached.","Spins without yielding the thread to the OS.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unparks all threads in the queue associated with the given …","Unparks a number of threads from the front of the queue …","Unparks one thread from the queue associated with the …","Removes all threads from the queue associated with <code>key_from</code>…","The number of threads that were unparked.","Acquire a resource identified by key in the deadlock …","Release a resource identified by key in the deadlock …"],"i":[3,0,0,0,1,0,0,3,3,0,4,0,4,1,4,3,3,0,0,1,2,1,2,3,4,5,6,8,1,2,3,4,5,6,8,1,2,3,4,5,6,1,2,3,4,5,6,0,2,8,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,8,2,1,2,3,4,5,6,8,1,8,0,2,8,8,8,1,2,3,4,5,6,1,2,3,4,5,6,8,1,2,3,4,5,6,8,1,2,3,4,5,6,8,0,0,0,0,2,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],0,[[],2],[[],8],[[1,1],9],[[2,2],9],[[3,3],9],[[4,4],9],[[5,5],9],[[6,6],9],[[1,10],11],[[2,10],11],[[3,10],11],[[4,10],11],[[5,10],11],[[6,10],11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,9],[[],8],[[12,-1,-2,-3,6,[14,[13]]],1,[[16,[],[[15,[9]]]]],16,[[16,[12,9]]]],0,[8,7],[8,9],[8,7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[[12,5],12],[[12,-1,-2],2,[[19,[6],[[15,[4]]]]],[[16,[2],[[15,[5]]]]]],[[12,-1],2,[[16,[2],[[15,[5]]]]]],[[12,12,-1,-2],2,[[16,[],[[15,[3]]]]],[[16,[3,2],[[15,[5]]]]]],0,[12,7],[12,7]],"c":[],"p":[[6,"ParkResult",0],[5,"UnparkResult",0],[6,"RequeueOp",0],[6,"FilterOp",0],[5,"UnparkToken",0],[5,"ParkToken",0],[1,"tuple"],[5,"SpinWait",0],[1,"bool"],[5,"Formatter",118],[8,"Result",118],[1,"usize"],[8,"Instant",119],[6,"Option",120],[17,"Output"],[10,"FnOnce",121],[6,"Result",122],[5,"TypeId",123],[10,"FnMut",121]],"b":[]}],\
["peer_server",{"doc":"","t":"H","n":["main"],"q":[[0,"peer_server"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[1,"tuple"]],"b":[]}],\
["proc_macro2",{"doc":"github crates-io docs-rs","t":"PPPGFPFPPFFPPPFPGFFGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNFENNNNNNNNNNNNNN","n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delim_span","delimiter","eq","eq","eq","eq","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","source_text","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","DelimSpan","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","join","open","to_owned","try_from","try_into","type_id","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":[[0,"proc_macro2"],[228,"proc_macro2::extra"],[243,"proc_macro2::token_stream"],[259,"core::cmp"],[260,"core::marker"],[261,"core::convert"],[262,"core::iter::traits::collect"],[263,"core::fmt"],[264,"core::fmt"],[265,"proc_macro"],[266,"core::hash"],[267,"core::option"],[268,"alloc::string"],[269,"core::ops::range"],[270,"core::any"]],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns an object that holds this group’s <code>span_open()</code> and","Returns the punctuation used as the delimiter for this …","","","","","","","Items which do not have a correspondence to any API in the …","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the source text behind a span. This preserves the …","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An object that holds a <code>Group</code>’s <code>span_open()</code> and …","","","","","Returns a span for the closing punctuation of the group …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a span covering the entire delimited group.","Returns a span for the opening punctuation of the group …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[11,10,10,0,0,8,0,8,11,0,0,8,10,10,0,8,0,0,0,0,1,24,7,6,8,9,10,1,11,12,5,24,7,6,8,9,10,1,11,12,5,5,6,5,7,6,8,9,10,1,11,12,5,7,6,8,9,10,1,11,12,5,12,7,9,9,10,11,12,12,7,7,0,5,5,5,5,24,24,7,7,6,8,8,9,9,10,1,1,11,12,12,5,5,24,7,7,7,6,6,8,8,8,8,8,9,10,1,11,12,5,7,7,7,5,12,5,5,5,5,5,5,5,5,5,5,24,7,6,8,9,10,1,11,12,5,7,7,5,5,6,6,6,7,9,1,12,12,12,6,8,9,1,12,5,6,1,24,8,9,1,12,5,9,9,9,5,5,7,6,8,9,10,1,11,12,5,24,7,8,9,1,12,5,0,24,7,6,8,9,10,1,11,12,5,24,7,6,8,9,10,1,11,12,5,24,7,6,8,9,10,1,11,12,5,5,5,5,5,5,5,5,5,5,5,6,5,5,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[3]]],5],[[],6],[2,5],[7,7],[6,6],[8,8],[9,9],[10,10],[1,1],[11,11],[12,12],[5,5],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[12,12],14],[[],7],[9,15],[9,10],[[10,10],16],[[11,11],16],[[12,-1],16,[17,[19,[18]]]],[[12,12],16],[[7,-1],13,[[21,[],[[20,[8]]]]]],[[7,-1],13,[[21,[],[[20,[7]]]]]],0,[22,5],[22,5],[23,5],[23,5],[[24,25],26],[[24,25],26],[[7,25],26],[[7,25],26],[[6,25],26],[[8,25],26],[[8,25],26],[[9,25],26],[[9,25],26],[[10,25],26],[[1,25],26],[[1,25],26],[[11,25],26],[[12,25],26],[[12,25],26],[[5,25],26],[[5,25],26],[-1,-1,[]],[27,7],[8,7],[-1,-1,[]],[28,6],[-1,-1,[]],[1,8],[-1,-1,[]],[12,8],[5,8],[9,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,7,[[21,[],[[20,[7]]]]]],[-1,7,[[21,[],[[20,[8]]]]]],[18,[[29,[7,24]]]],[18,[[29,[5,24]]]],[[12,-1],13,30],[31,5],[31,5],[32,5],[32,5],[33,5],[33,5],[34,5],[34,5],[35,5],[35,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,36],[7,16],[37,5],[37,5],[[6,6],[[38,[6]]]],[[6,6],6],[[],6],[[],7],[[10,7],9],[[2,11],1],[[18,6],12],[[18,6],12],[[12,12],[[38,[14]]]],[[6,6],6],[[8,6],13],[[9,6],13],[[1,6],13],[[12,6],13],[[5,6],13],[6,[[38,[39]]]],[1,11],[24,6],[8,6],[9,6],[1,6],[12,6],[5,6],[9,6],[9,6],[9,7],[18,5],[[5,-1],[[38,[6]]],[[41,[40]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],0,[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[43,5],[43,5],[44,5],[44,5],[45,5],[45,5],[46,5],[46,5],[3,5],[3,5],[6,28],[40,5],[40,5],0,[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[[-1,-2],13,[],[]],[15,6],[[15,25],26],[-1,-1,[]],[-1,-2,[],[]],[15,6],[15,6],[-1,-2,[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,42,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[36,36],[[-1,-2],13,[],[]],[[36,25],26],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,[[38,[8]]]],[36,[[13,[40,[38,[40]]]]]],[-1,-2,[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,42,[]]],"c":[],"p":[[5,"Punct",0],[1,"char"],[1,"u8"],[1,"slice"],[5,"Literal",0],[5,"Span",0],[5,"TokenStream",0],[6,"TokenTree",0],[5,"Group",0],[6,"Delimiter",0],[6,"Spacing",0],[5,"Ident",0],[1,"tuple"],[6,"Ordering",259],[5,"DelimSpan",228],[1,"bool"],[10,"Sized",260],[1,"str"],[10,"AsRef",261],[17,"Item"],[10,"IntoIterator",262],[1,"f32"],[1,"f64"],[5,"LexError",0],[5,"Formatter",263],[8,"Result",263],[5,"TokenStream",264],[5,"Span",264],[6,"Result",265],[10,"Hasher",266],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[5,"IntoIter",243],[1,"isize"],[6,"Option",267],[5,"String",268],[1,"usize"],[10,"RangeBounds",269],[5,"TypeId",270],[1,"u128"],[1,"u16"],[1,"u32"],[1,"u64"]],"b":[[68,"impl-PartialEq%3CT%3E-for-Ident"],[69,"impl-PartialEq-for-Ident"],[70,"impl-Extend%3CTokenTree%3E-for-TokenStream"],[71,"impl-Extend%3CTokenStream%3E-for-TokenStream"],[77,"impl-Debug-for-LexError"],[78,"impl-Display-for-LexError"],[79,"impl-Debug-for-TokenStream"],[80,"impl-Display-for-TokenStream"],[82,"impl-Debug-for-TokenTree"],[83,"impl-Display-for-TokenTree"],[84,"impl-Debug-for-Group"],[85,"impl-Display-for-Group"],[87,"impl-Debug-for-Punct"],[88,"impl-Display-for-Punct"],[90,"impl-Display-for-Ident"],[91,"impl-Debug-for-Ident"],[92,"impl-Debug-for-Literal"],[93,"impl-Display-for-Literal"],[95,"impl-From%3CTokenStream%3E-for-TokenStream"],[96,"impl-From%3CTokenTree%3E-for-TokenStream"],[100,"impl-From%3CPunct%3E-for-TokenTree"],[102,"impl-From%3CIdent%3E-for-TokenTree"],[103,"impl-From%3CLiteral%3E-for-TokenTree"],[104,"impl-From%3CGroup%3E-for-TokenTree"],[111,"impl-FromIterator%3CTokenStream%3E-for-TokenStream"],[112,"impl-FromIterator%3CTokenTree%3E-for-TokenStream"]]}],\
["quote",{"doc":"github crates-io docs-rs","t":"KKKMMMMMQNNQQNNNNM","n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":[[0,"quote"],[18,"proc_macro2"],[19,"core::convert"],[20,"core::iter::traits::collect"],[21,"core::fmt"],[22,"core::fmt"]],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,1,1,1,1,7,0,6,6,0,0,7,7,6,6,6],"f":[0,0,0,[[1,-1],2,[[4,[3]]]],[[1,-1],2,5],[[1,-1,-2],2,5,6],[[1,-1,-2],2,5,6],[[7,8],9],0,[6,10],[6,10],0,0,[7,[[12,[11]]]],[7,[[12,[11]]]],[6,10],[6,10],[[6,10],2]],"c":[],"p":[[10,"TokenStreamExt",0],[1,"tuple"],[6,"TokenTree",18],[10,"Into",19],[10,"IntoIterator",20],[10,"ToTokens",0],[10,"IdentFragment",0],[5,"Formatter",21],[8,"Result",21],[5,"TokenStream",18],[5,"Span",18],[6,"Option",22]],"b":[]}],\
["rpds",{"doc":"Rust Persistent Data Structures","t":"EEEEEEEEEEEEEEEEQQQQCQQCCQQQQQQCCQQCQQIFFINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCCFIIIFINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIIFIIFFINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPIGFIPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOCCFIINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIIFINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIFINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIFFINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["HashTrieMap","HashTrieMapSync","HashTrieSet","HashTrieSetSync","List","ListSync","Queue","QueueSync","RedBlackTreeMap","RedBlackTreeMapSync","RedBlackTreeSet","RedBlackTreeSetSync","Stack","StackSync","Vector","VectorSync","ht_map","ht_map_sync","ht_set","ht_set_sync","list","list","list_sync","map","queue","queue","queue_sync","rbt_map","rbt_map_sync","rbt_set","rbt_set_sync","set","stack","stack","stack_sync","vector","vector","vector_sync","Iter","IterPtr","List","ListSync","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","default","drop","drop_first","drop_first_mut","eq","first","fmt","fmt","fmt","from","from","from_iter","hash","into","into","into_iter","into_iter","is_empty","iter","last","len","new","new_sync","new_sync","new_with_ptr_kind","next","partial_cmp","push_front","push_front_mut","reverse","reverse_mut","size_hint","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","hash_trie_map","red_black_tree_map","HashTrieMap","HashTrieMapSync","Iter","IterKeys","IterPtr","IterValues","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","contains_key","default","eq","fmt","fmt","fmt","from","from","from_iter","get","get_key_value","get_mut","index","insert","insert_mut","into","into","into_iter","into_iter","is_empty","iter","keys","new","new_sync","new_sync","new_sync_with_degree","new_sync_with_degree","new_with_degree","new_with_hasher_and_degree_and_ptr_kind","new_with_hasher_and_ptr_kind","next","remove","remove_mut","size","size_hint","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","values","Iter","IterKeys","IterPtr","IterValues","RangeIter","RangeIterPtr","RedBlackTreeMap","RedBlackTreeMapSync","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","contains_key","default","eq","first","fmt","fmt","fmt","fmt","from","from","from","from_iter","get","get_key_value","get_mut","hash","index","insert","insert_mut","into","into","into","into_iter","into_iter","into_iter","is_empty","iter","keys","last","new","new_sync","new_sync","new_with_ptr_kind","next","next","next_back","next_back","partial_cmp","range","remove","remove_mut","size","size_hint","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","values","Initialized","Iter","LazilyReversedListIter","Queue","QueueSync","Uninitialized","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","default","dequeue","dequeue_mut","enqueue","enqueue_mut","eq","fmt","fmt","from","from","from_iter","hash","into","into","into_iter","into_iter","is_empty","iter","len","new","new_sync","new_sync","new_with_ptr_kind","next","partial_cmp","peek","size_hint","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","current","list","vec","hash_trie_set","red_black_tree_set","HashTrieSet","HashTrieSetSync","Iter","borrow","borrow_mut","clone","clone_into","contains","default","eq","fmt","fmt","from","from_iter","get","insert","insert_mut","into","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","new","new_sync","new_sync","new_with_degree","new_with_degree_sync","new_with_degree_sync","new_with_hasher_and_degree_and_ptr_kind","new_with_hasher_with_ptr_kind","remove","remove_mut","size","to_owned","to_string","try_from","try_into","type_id","Iter","RangeIter","RedBlackTreeSet","RedBlackTreeSetSync","borrow","borrow_mut","clone","clone_into","cmp","contains","default","eq","first","fmt","fmt","from","from_iter","get","hash","insert","insert_mut","into","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","last","new","new_sync","new_sync","new_with_ptr_kind","partial_cmp","range","remove","remove_mut","size","to_owned","to_string","try_from","try_into","type_id","Iter","Stack","StackSync","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","fmt","from","from_iter","hash","into","into_iter","is_empty","iter","new","new_sync","new_sync","new_with_ptr_kind","partial_cmp","peek","pop","pop_mut","push","push_mut","size","to_owned","to_string","try_from","try_into","type_id","Iter","IterPtr","Vector","VectorSync","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","default","drop_last","drop_last_mut","eq","extend","first","fmt","fmt","from","from","from_iter","get","get_mut","hash","index","index_mut","into","into","into_iter","into_iter","is_empty","iter","last","len","new","new_sync","new_sync","new_with_bits","new_with_ptr_kind","next","next_back","partial_cmp","push_back","push_back_mut","set","set_mut","size_hint","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"rpds"],[38,"rpds::list"],[89,"rpds::map"],[91,"rpds::map::hash_trie_map"],[147,"rpds::map::red_black_tree_map"],[219,"rpds::queue"],[267,"rpds::queue::LazilyReversedListIter"],[270,"rpds::set"],[272,"rpds::set::hash_trie_set"],[312,"rpds::set::red_black_tree_set"],[355,"rpds::stack"],[390,"rpds::vector"],[446,"archery::shared_pointer::kind"],[447,"core::cmp"],[448,"core::cmp"],[449,"core::cmp"],[450,"core::fmt"],[451,"core::hash"],[452,"core::hash"],[453,"alloc::string"],[454,"core::result"],[455,"core::any"],[456,"core::cmp"],[457,"core::hash"],[458,"core::borrow"],[459,"core::default"],[460,"core::ops::range"],[461,"core::cmp"]],"d":["","","","","","","","","","","","","","","","","Creates a <code>HashTrieMap</code> containing the given arguments:","Creates a <code>HashTrieMap</code> that implements <code>Sync</code>, containing the …","Creates a <code>HashTrieSet</code> containing the given arguments:","Creates a <code>HashTrieSet</code> that implements <code>Sync</code>, containing the …","","Creates a <code>List</code> containing the given arguments:","Creates a <code>List</code> that implements <code>Sync</code>, containing the given …","","","Creates a <code>Queue</code> containing the given arguments:","Creates a <code>Queue</code> that implements <code>Sync</code>, containing the given …","Creates a <code>RedBlackTreeMap</code> containing the given arguments:","Creates a <code>RedBlackTreeMap</code> that implements <code>Sync</code>, containing …","Creates a <code>RedBlackTreeSet</code> containing the given arguments:","Creates a <code>RedBlackTreeSet</code> containing the given arguments:","","","Creates a <code>Stack</code> containing the given arguments:","Creates a <code>Stack</code> that implements <code>Sync</code>, containing the given …","","Creates a <code>Vector</code> containing the given arguments:","Creates a <code>Vector</code> that implements <code>Sync</code>, containing the …","","","A persistent list with structural sharing.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A persistent map with structural sharing.  This …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A persistent map with structural sharing.  This …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A persistent queue with structural sharing.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","A persistent set with structural sharing.  This …","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","A persistent set with structural sharing.  This …","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","A persistent stack with structural sharing.","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","A persistent vector with structural sharing.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Gets a mutable reference to an element. If the element is …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the operation was successful.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,13,1,13,1,1,1,1,1,1,1,1,1,1,1,13,1,13,1,1,1,13,1,13,1,1,1,1,1,20,1,1,13,1,1,1,1,1,13,1,1,1,13,1,13,1,13,0,0,0,0,0,0,0,0,25,32,25,32,25,25,25,25,25,25,25,32,25,32,25,25,25,25,25,25,25,25,32,25,32,25,25,25,25,35,25,35,25,25,25,25,32,25,25,25,32,25,25,25,32,25,32,25,32,25,0,0,0,0,0,0,0,0,38,39,40,38,39,40,38,38,38,38,38,38,38,38,38,39,40,38,39,40,38,38,38,38,38,38,38,38,38,39,40,38,39,40,38,38,38,38,38,43,38,38,39,40,39,40,38,38,38,38,38,39,38,38,38,39,40,38,39,40,38,39,40,38,51,0,0,0,0,51,51,48,51,48,48,48,48,48,48,48,48,48,48,48,48,51,48,48,48,51,48,51,48,48,48,48,48,50,48,48,51,48,48,51,48,48,51,48,51,48,51,48,66,67,66,0,0,0,0,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,54,52,52,54,52,52,52,52,52,52,52,52,52,52,52,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,57,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,61,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,0,0,0,65,62,65,62,62,62,62,62,62,62,62,62,62,62,62,65,62,62,62,62,62,62,62,65,62,65,62,62,62,62,62,62,64,62,62,62,65,65,62,62,62,62,62,65,62,62,65,62,65,62,65,62],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1,-2]]],[[1,[-1,-2]]],[],2],[[-1,-2],3,[],[]],[[[1,[-1,-2]],[1,[-1,-2]]],4,5,2],[[],[[1,[-1,-2]]],[],2],[[[1,[-1,-2]]],3,[],2],[[[1,[-1,-2]]],[[6,[[1,[-1,-2]]]]],[],2],[[[1,[-1,-2]]],7,[],2],[[[1,[-1,-2]],[1,[-1,-3]]],7,8,2,2],[[[1,[-1,-2]]],[[6,[-1]]],[],2],[[[1,[-1,-2]],9],10,11,2],[[[1,[-1,-2]],9],10,12,[2,12]],[[[13,[-1,-2]],9],10,12,[2,12]],[-1,-1,[]],[-1,-1,[]],[-2,[[1,[-1,-3]]],[],[[15,[],[[14,[-1]]]]],2],[[[1,[-1,-2]],-3],3,16,2,17],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1,-2]]],[[18,[-1,-2]]],[],2],[-1,-2,[],[]],[[[1,[-1,-2]]],7,[],2],[[[1,[-1,-2]]],[[18,[-1,-2]]],[],2],[[[1,[-1,-2]]],[[6,[-1]]],[],2],[[[1,[-1,-2]]],19,[],2],[[],[[1,[-1]]],[]],[[],[[20,[-1]]],[]],[[],[[20,[-1]]],[]],[[],[[1,[-1,-2]]],[],2],[[[13,[-1,-2]]],[[6,[[21,[-1,-2]]]]],[],2],[[[1,[-1,-2]],[1,[-1,-3]]],[[6,[4]]],[],2,2],[[[1,[-1,-2]],-1],[[1,[-1,-2]]],[],2],[[[1,[-1,-2]],-1],3,[],2],[[[1,[-1,-2]]],[[1,[-1,-2]]],[],2],[[[1,[-1,-2]]],3,[],2],[[[13,[-1,-2]]],[[3,[19,[6,[19]]]]],[],2],[-1,-2,[],[]],[-1,22,[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[25,[-1,-2,-3,-4]]],[[25,[-1,-2,-3,-4]]],[26,16],[],2,[27,28]],[[-1,-2],3,[],[]],[[[25,[-2,-3,-4,-5]],-1],7,[16,26,29],[[30,[-1]],26,16],[],2,[27,28]],[[],[[25,[-1,-2,-3,-4]]],[26,16],[],2,[31,27,28]],[[[25,[-1,-2,-3,-4]],[25,[-1,-2,-5,-4]]],7,[16,26],8,2,[27,28],2],[[[25,[-1,-2,-3,-4]],9],10,[26,16,11],11,2,[27,28]],[[[25,[-1,-2,-3,-4]],9],10,12,12,[2,12],[12,28]],[[[32,[-1,-2,-3]],9],10,12,12,[2,12]],[-1,-1,[]],[-1,-1,[]],[-3,[[25,[-1,-2,-4,-5]]],[26,16],[],[[15,[],[[14,[[3,[-1,-2]]]]]]],2,[28,27,31]],[[[25,[-2,-3,-4,-5]],-1],[[6,[-3]]],[16,26,29],[[30,[-1]],26,16],[],2,[27,28]],[[[25,[-2,-3,-4,-5]],-1],[[6,[[3,[-2,-3]]]]],[16,26,29],[[30,[-1]],26,16],[],2,[27,28]],[[[25,[-2,-3,-4,-5]],-1],[[6,[-3]]],[16,26,29],[[30,[-1]],26,16,27],27,2,[27,28]],[[[25,[-2,-3,-4,-5]],-1],-3,[16,26,29],[26,16,[30,[-1]]],[],2,[27,28]],[[[25,[-1,-2,-3,-4]],-1,-2],[[25,[-1,-2,-3,-4]]],[26,16],[],2,[27,28]],[[[25,[-1,-2,-3,-4]],-1,-2],3,[26,16],[],2,[27,28]],[-1,-2,[],[]],[-1,-2,[],[]],[[[25,[-1,-2,-3,-4]]],[[33,[-1,-2,-3]]],[26,16],[],2,[31,27,28]],[-1,-2,[],[]],[[[25,[-1,-2,-3,-4]]],7,[26,16],[],2,[27,28]],[[[25,[-1,-2,-3,-4]]],[[33,[-1,-2,-3]]],[26,16],[],2,[27,28]],[[[25,[-1,-2,-3,-4]]],[[34,[-1,-2,-3]]],[26,16],[],2,[27,28]],[[],[[25,[-1,-2]]],[26,16],[]],[[],[[35,[-1,-2]]],[26,16],[]],[[],[[35,[-1,-2]]],[26,16],[]],[36,[[35,[-1,-2]]],[26,16],[]],[36,[[35,[-1,-2]]],[26,16],[]],[36,[[25,[-1,-2]]],[26,16],[]],[[-1,36],[[25,[-2,-3,-4,-1]]],[27,28],[26,16],[],2],[-1,[[25,[-2,-3,-4,-1]]],[27,28],[26,16],[],2],[[[32,[-1,-2,-3]]],[[6,[[21,[[0,[-1,-2]],-3]]]]],[26,16],[],2],[[[25,[-2,-3,-4,-5]],-1],[[25,[-2,-3,-4,-5]]],[16,26,29],[[30,[-1]],26,16],[],2,[27,28]],[[[25,[-2,-3,-4,-5]],-1],7,[16,26,29],[[30,[-1]],26,16],[],2,[27,28]],[[[25,[-1,-2,-3,-4]]],19,[26,16],[],2,[27,28]],[[[32,[-1,-2,-3]]],[[3,[19,[6,[19]]]]],[26,16],[],2],[-1,-2,[],[]],[-1,22,[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[[[25,[-1,-2,-3,-4]]],[[37,[-1,-2,-3]]],[26,16],[],2,[27,28]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[38,[-1,-2,-3]]],[[38,[-1,-2,-3]]],5,[],2],[[-1,-2],3,[],[]],[[[38,[-1,-2,-3]],[38,[-1,-2,-3]]],4,5,5,2],[[[38,[-2,-3,-4]],-1],7,[5,29],[[30,[-1]],5],[],2],[[],[[38,[-1,-2,-3]]],5,[],2],[[[38,[-1,-2,-3]],[38,[-1,-2,-4]]],7,5,8,2,2],[[[38,[-1,-2,-3]]],[[6,[[3,[-1,-2]]]]],5,[],2],[[[38,[-1,-2,-3]],9],10,[5,11],11,2],[[[38,[-1,-2,-3]],9],10,12,12,[2,12]],[[[39,[-1,-2,-3]],9],10,12,12,[2,12]],[[[40,[-1,-2,-3,-4,-5]],9],10,12,12,12,[12,29],[2,12]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-3,[[38,[-1,-2,-4]]],5,[],[[15,[],[[14,[[3,[-1,-2]]]]]]],2],[[[38,[-2,-3,-4]],-1],[[6,[-3]]],[5,29],[[30,[-1]],5],[],2],[[[38,[-2,-3,-4]],-1],[[6,[[3,[-2,-3]]]]],[5,29],[[30,[-1]],5],[],2],[[[38,[-2,-3,-4]],-1],[[6,[-3]]],[5,29],[[30,[-1]],5,27],27,2],[[[38,[-1,-2,-3]],-4],3,[5,16],16,2,17],[[[38,[-2,-3,-4]],-1],-3,[5,29],[5,[30,[-1]]],[],2],[[[38,[-1,-2,-3]],-1,-2],[[38,[-1,-2,-3]]],5,[],2],[[[38,[-1,-2,-3]],-1,-2],3,5,[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[38,[-1,-2,-3]]],[[41,[-1,-2,-3]]],5,[],2],[-1,-2,[],[]],[-1,-2,[],[]],[[[38,[-1,-2,-3]]],7,5,[],2],[[[38,[-1,-2,-3]]],[[41,[-1,-2,-3]]],5,[],2],[[[38,[-1,-2,-3]]],[[42,[-1,-2,-3]]],5,[],2],[[[38,[-1,-2,-3]]],[[6,[[3,[-1,-2]]]]],5,[],2],[[],[[38,[-1,-2]]],5,[]],[[],[[43,[-1,-2]]],5,[]],[[],[[43,[-1,-2]]],5,[]],[[],[[38,[-1,-2,-3]]],5,[],2],[[[39,[-1,-2,-3]]],[[6,[[21,[[0,[-1,-2]],-3]]]]],5,[],2],[[[40,[-2,-3,-4,-1,-5]]],[[6,[-6]]],[5,29],[5,[30,[-1]]],[],[[44,[-1]]],2,[]],[[[39,[-1,-2,-3]]],[[6,[[21,[[0,[-1,-2]],-3]]]]],5,[],2],[[[40,[-2,-3,-4,-1,-5]]],[[6,[[21,[[0,[-2,-3]],-5]]]]],[5,29],[5,[30,[-1]]],[],[[44,[-1]]],2],[[[38,[-1,-2,-3]],[38,[-1,-2,-4]]],[[6,[4]]],5,45,2,2],[[[38,[-2,-3,-4]],-5],[[46,[-2,-3,-5,-1,-4]]],[5,29],[[30,[-1]],5],[],2,[[44,[-1]]]],[[[38,[-2,-3,-4]],-1],[[38,[-2,-3,-4]]],[5,29],[[30,[-1]],5],[],2],[[[38,[-2,-3,-4]],-1],7,[5,29],[[30,[-1]],5],[],2],[[[38,[-1,-2,-3]]],19,5,[],2],[[[39,[-1,-2,-3]]],[[3,[19,[6,[19]]]]],5,[],2],[-1,-2,[],[]],[-1,22,[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[[[38,[-1,-2,-3]]],[[47,[-1,-2,-3]]],5,[],2],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[48,[-1,-2]]],[[48,[-1,-2]]],[],2],[[-1,-2],3,[],[]],[[[48,[-1,-2]],[48,[-1,-2]]],4,5,2],[[],[[48,[-1,-2]]],[],2],[[[48,[-1,-2]]],[[6,[[48,[-1,-2]]]]],[],2],[[[48,[-1,-2]]],7,[],2],[[[48,[-1,-2]],-1],[[48,[-1,-2]]],[],2],[[[48,[-1,-2]],-1],3,[],2],[[[48,[-1,-2]],[48,[-1,-3]]],7,8,2,2],[[[48,[-1,-2]],9],10,12,[2,12]],[[[48,[-1,-2]],9],10,11,2],[-1,-1,[]],[-1,-1,[]],[-2,[[48,[-1,-3]]],[],[[15,[],[[14,[-1]]]]],2],[[[48,[-1,-2]],-3],3,16,2,17],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[48,[-1,-2]]],[[49,[-1,-2]]],[],2],[[[48,[-1,-2]]],7,[],2],[[[48,[-1,-2]]],[[49,[-1,-2]]],[],2],[[[48,[-1,-2]]],19,[],2],[[],[[48,[-1]]],[]],[[],[[50,[-1]]],[]],[[],[[50,[-1]]],[]],[[],[[48,[-1,-2]]],[],2],[[[51,[-1,-2]]],[[6,[[21,[-1,-2]]]]],[],2],[[[48,[-1,-2]],[48,[-1,-3]]],[[6,[4]]],[],2,2],[[[48,[-1,-2]]],[[6,[-1]]],[],2],[[[51,[-1,-2]]],[[3,[19,[6,[19]]]]],[],2],[-1,-2,[],[]],[-1,22,[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[52,[-1,-2,-3]]],[[52,[-1,-2,-3]]],[26,16],2,[27,28]],[[-1,-2],3,[],[]],[[[52,[-2,-3,-4]],-1],7,[16,26,29],[[30,[-1]],26,16],2,[27,28]],[[],[[52,[-1,-2,-3]]],[26,16],2,[31,27,28]],[[[52,[-1,-2,-3]],[52,[-1,-4,-3]]],7,[16,26],2,[27,28],2],[[[52,[-1,-2,-3]],9],10,[26,16,12],[2,12],[27,12,28]],[[[52,[-1,-2,-3]],9],10,[26,16,11],2,[27,28]],[-1,-1,[]],[-2,[[52,[-1,-3,-4]]],[26,16],[[15,[],[[14,[-1]]]]],2,[28,27,31]],[[[52,[-2,-3,-4]],-1],[[6,[-2]]],[16,26,29],[[30,[-1]],26,16],2,[27,28]],[[[52,[-1,-2,-3]],-1],[[52,[-1,-2,-3]]],[26,16],2,[27,28]],[[[52,[-1,-2,-3]],-1],3,[26,16],2,[27,28]],[-1,-2,[],[]],[[[52,[-1,-2,-3]]],[[53,[-1,-2]]],[26,16],2,[31,27,28]],[[[52,[-1,-2,-3]],[52,[-1,-2,-4]]],7,[26,16],2,[27,28],[28,27]],[[[52,[-1,-2,-3]]],7,[26,16],2,[27,28]],[[[52,[-1,-2,-3]],[52,[-1,-2,-4]]],7,[26,16],2,[27,28],[28,27]],[[[52,[-1,-2,-3]],[52,[-1,-2,-4]]],7,[26,16],2,[27,28],[28,27]],[[[52,[-1,-2,-3]]],[[53,[-1,-2]]],[26,16],2,[27,28]],[[],[[52,[-1]]],[26,16]],[[],[[54,[-1]]],[26,16]],[[],[[54,[-1]]],[26,16]],[36,[[52,[-1]]],[26,16]],[36,[[54,[-1]]],[26,16]],[36,[[54,[-1]]],[26,16]],[[-1,36],[[52,[-2,-3,-1]]],[27,28],[26,16],2],[-1,[[52,[-2,-3,-1]]],[27,28],[26,16],2],[[[52,[-2,-3,-4]],-1],[[52,[-2,-3,-4]]],[16,26,29],[[30,[-1]],26,16],2,[27,28]],[[[52,[-2,-3,-4]],-1],7,[16,26,29],[[30,[-1]],26,16],2,[27,28]],[[[52,[-1,-2,-3]]],19,[26,16],2,[27,28]],[-1,-2,[],[]],[-1,22,[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[55,[-1,-2]]],[[55,[-1,-2]]],5,2],[[-1,-2],3,[],[]],[[[55,[-1,-2]],[55,[-1,-2]]],4,5,2],[[[55,[-2,-3]],-1],7,[5,29],[[30,[-1]],5],2],[[],[[55,[-1,-2]]],5,2],[[[55,[-1,-2]],[55,[-1,-3]]],7,5,2,2],[[[55,[-1,-2]]],[[6,[-1]]],5,2],[[[55,[-1,-2]],9],10,[5,11],2],[[[55,[-1,-2]],9],10,[5,12],[2,12]],[-1,-1,[]],[-2,[[55,[-1,-3]]],5,[[15,[],[[14,[-1]]]]],2],[[[55,[-2,-3]],-1],[[6,[-2]]],[5,29],[[30,[-1]],5],2],[[[55,[-1,-2]],-3],3,[5,16],2,17],[[[55,[-1,-2]],-1],[[55,[-1,-2]]],5,2],[[[55,[-1,-2]],-1],3,5,2],[-1,-2,[],[]],[[[55,[-1,-2]]],[[56,[-1,-2]]],5,2],[[[55,[-1,-2]],[55,[-1,-3]]],7,5,2,2],[[[55,[-1,-2]]],7,5,2],[[[55,[-1,-2]],[55,[-1,-3]]],7,5,2,2],[[[55,[-1,-2]],[55,[-1,-3]]],7,5,2,2],[[[55,[-1,-2]]],[[56,[-1,-2]]],5,2],[[[55,[-1,-2]]],[[6,[-1]]],5,2],[[],[[55,[-1]]],5],[[],[[57,[-1]]],5],[[],[[57,[-1]]],5],[[],[[55,[-1,-2]]],5,2],[[[55,[-1,-2]],[55,[-1,-3]]],[[6,[4]]],5,2,2],[[[55,[-2,-3]],-4],[[58,[-2,-4,-1,-3]]],[5,29],[[30,[-1]],5],2,[[44,[-1]]]],[[[55,[-2,-3]],-1],[[55,[-2,-3]]],[5,29],[[30,[-1]],5],2],[[[55,[-2,-3]],-1],7,[5,29],[[30,[-1]],5],2],[[[55,[-1,-2]]],19,5,2],[-1,-2,[],[]],[-1,22,[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[59,[-1,-2]]],[[59,[-1,-2]]],[],2],[[-1,-2],3,[],[]],[[[59,[-1,-2]],[59,[-1,-2]]],4,5,2],[[],[[59,[-1,-2]]],[],2],[[[59,[-1,-2]],[59,[-1,-3]]],7,8,2,2],[[[59,[-1,-2]],9],10,11,2],[[[59,[-1,-2]],9],10,12,[2,12]],[-1,-1,[]],[-2,[[59,[-1,-3]]],[],[[15,[],[[14,[-1]]]]],2],[[[59,[-1,-2]],-3],3,16,2,17],[-1,-2,[],[]],[[[59,[-1,-2]]],[[60,[-1,-2]]],[],2],[[[59,[-1,-2]]],7,[],2],[[[59,[-1,-2]]],[[60,[-1,-2]]],[],2],[[],[[59,[-1]]],[]],[[],[[61,[-1]]],[]],[[],[[61,[-1]]],[]],[[],[[59,[-1,-2]]],[],2],[[[59,[-1,-2]],[59,[-1,-3]]],[[6,[4]]],[],2,2],[[[59,[-1,-2]]],[[6,[-1]]],[],2],[[[59,[-1,-2]]],[[6,[[59,[-1,-2]]]]],[],2],[[[59,[-1,-2]]],7,[],2],[[[59,[-1,-2]],-1],[[59,[-1,-2]]],[],2],[[[59,[-1,-2]],-1],3,[],2],[[[59,[-1,-2]]],19,[],2],[-1,-2,[],[]],[-1,22,[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[62,[-1,-2]]],[[62,[-1,-2]]],[],2],[[-1,-2],3,[],[]],[[[62,[-1,-2]],[62,[-1,-2]]],4,5,2],[[],[[62,[-1,-2]]],[],2],[[[62,[-1,-2]]],[[6,[[62,[-1,-2]]]]],[],2],[[[62,[-1,-2]]],7,[],2],[[[62,[-2,-3]],[62,[-1,-4]]],7,[],[[8,[-1]]],2,2],[[[62,[-1,-2]],-3],3,[],2,[[15,[],[[14,[-1]]]]]],[[[62,[-1,-2]]],[[6,[-1]]],[],2],[[[62,[-1,-2]],9],10,12,[2,12]],[[[62,[-1,-2]],9],10,11,2],[-1,-1,[]],[-1,-1,[]],[-2,[[62,[-1,-3]]],[],[[15,[],[[14,[-1]]]]],2],[[[62,[-1,-2]],19],[[6,[-1]]],[],2],[[[62,[-1,-2]],19],[[6,[-1]]],27,2],[[[62,[-1,-2]],-3],3,16,2,17],[[[62,[-1,-2]],19],-1,[],2],[[[62,[-1,-2]],19],-1,27,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[62,[-1,-2]]],[[63,[-1,-2]]],[],2],[[[62,[-1,-2]]],7,[],2],[[[62,[-1,-2]]],[[63,[-1,-2]]],[],2],[[[62,[-1,-2]]],[[6,[-1]]],[],2],[[[62,[-1,-2]]],19,[],2],[[],[[62,[-1]]],[]],[[],[[64,[-1]]],[]],[[],[[64,[-1]]],[]],[36,[[62,[-1,-2]]],[],2],[[],[[62,[-1,-2]]],[],2],[[[65,[-1,-2]]],[[6,[[21,[-1,-2]]]]],[],2],[[[65,[-1,-2]]],[[6,[[21,[-1,-2]]]]],[],2],[[[62,[-2,-3]],[62,[-1,-4]]],[[6,[4]]],[],[[45,[-1]]],2,2],[[[62,[-1,-2]],-1],[[62,[-1,-2]]],[],2],[[[62,[-1,-2]],-1],3,[],2],[[[62,[-1,-2]],19,-1],[[6,[[62,[-1,-2]]]]],[],2],[[[62,[-1,-2]],19,-1],7,[],2],[[[65,[-1,-2]]],[[3,[19,[6,[19]]]]],[],2],[-1,-2,[],[]],[-1,22,[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],[-1,24,[]]],"c":[],"p":[[5,"List",38],[10,"SharedPointerKind",446],[1,"tuple"],[6,"Ordering",447],[10,"Ord",447],[6,"Option",448],[1,"bool"],[10,"PartialEq",447],[5,"Formatter",449],[8,"Result",449],[10,"Display",449],[10,"Debug",449],[5,"IterPtr",38],[17,"Item"],[10,"IntoIterator",450],[10,"Hash",451],[10,"Hasher",451],[8,"Iter",38],[1,"usize"],[8,"ListSync",38],[5,"SharedPointer",452],[5,"String",453],[6,"Result",454],[5,"TypeId",455],[5,"HashTrieMap",91],[10,"Eq",447],[10,"Clone",456],[10,"BuildHasher",451],[10,"Sized",457],[10,"Borrow",458],[10,"Default",459],[5,"IterPtr",91],[8,"Iter",91],[8,"IterKeys",91],[8,"HashTrieMapSync",91],[1,"u8"],[8,"IterValues",91],[5,"RedBlackTreeMap",147],[5,"IterPtr",147],[5,"RangeIterPtr",147],[8,"Iter",147],[8,"IterKeys",147],[8,"RedBlackTreeMapSync",147],[10,"RangeBounds",460],[10,"PartialOrd",447],[8,"RangeIter",147],[8,"IterValues",147],[5,"Queue",219],[8,"Iter",219],[8,"QueueSync",219],[6,"LazilyReversedListIter",219],[5,"HashTrieSet",272],[8,"Iter",272],[8,"HashTrieSetSync",272],[5,"RedBlackTreeSet",312],[8,"Iter",312],[8,"RedBlackTreeSetSync",312],[8,"RangeIter",312],[5,"Stack",355],[8,"Iter",355],[8,"StackSync",355],[5,"Vector",390],[8,"Iter",390],[8,"VectorSync",390],[5,"IterPtr",390],[15,"Initialized",267],[15,"Uninitialized",267]],"b":[[55,"impl-Display-for-List%3CT,+P%3E"],[56,"impl-Debug-for-List%3CT,+P%3E"],[106,"impl-Display-for-HashTrieMap%3CK,+V,+P,+H%3E"],[107,"impl-Debug-for-HashTrieMap%3CK,+V,+P,+H%3E"],[168,"impl-Display-for-RedBlackTreeMap%3CK,+V,+P%3E"],[169,"impl-Debug-for-RedBlackTreeMap%3CK,+V,+P%3E"],[238,"impl-Debug-for-Queue%3CT,+P%3E"],[239,"impl-Display-for-Queue%3CT,+P%3E"],[282,"impl-Debug-for-HashTrieSet%3CT,+P,+H%3E"],[283,"impl-Display-for-HashTrieSet%3CT,+P,+H%3E"],[325,"impl-Display-for-RedBlackTreeSet%3CT,+P%3E"],[326,"impl-Debug-for-RedBlackTreeSet%3CT,+P%3E"],[365,"impl-Display-for-Stack%3CT,+P%3E"],[366,"impl-Debug-for-Stack%3CT,+P%3E"],[407,"impl-Debug-for-Vector%3CT,+P%3E"],[408,"impl-Display-for-Vector%3CT,+P%3E"]]}],\
["scopeguard",{"doc":"A scope guard will run a given closure when it goes out of …","t":"GFKNNNNQNNNNNNNHNNNMNNNNNNNN","n":["Always","ScopeGuard","Strategy","borrow","borrow","borrow_mut","borrow_mut","defer","deref","deref_mut","drop","fmt","fmt","from","from","guard","into","into","into_inner","should_run","should_run","try_from","try_from","try_into","try_into","type_id","type_id","with_strategy"],"q":[[0,"scopeguard"],[28,"core::ops::function"],[29,"core::fmt"],[30,"core::fmt"],[31,"core::any"]],"d":["Always run on scope exit.","<code>ScopeGuard</code> is a scope guard that may own a protected value.","Controls in which cases the associated code should be run","","","","","Macro to create a <code>ScopeGuard</code> (always run).","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>ScopeGuard</code> owning <code>v</code> and with deferred closure …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","“Defuse” the guard and extract the value without …","Return <code>true</code> if the guard’s associated code should run …","","","","","","","","Create a <code>ScopeGuard</code> that owns <code>v</code> (accessible through deref) …"],"i":[0,0,0,1,8,1,8,0,1,1,1,1,8,1,8,0,1,8,1,3,8,1,8,1,8,1,8,1],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[1,[-1,-2,-3]]],-1,[],[[2,[-1]]],3],[[[1,[-1,-2,-3]]],-1,[],[[2,[-1]]],3],[[[1,[-1,-2,-3]]],4,[],[[2,[-1]]],3],[[[1,[-1,-2,-3]],5],6,7,[[2,[-1]]],3],[[8,5],6],[-1,-1,[]],[-1,-1,[]],[[-1,-2],[[1,[-1,-2,8]]],[],[[2,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1,-2,-3]]],-1,[],[[2,[-1]]],3],[[],9],[[],9],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[[-1,-2],[[1,[-1,-2,-3]]],[],[[2,[-1]]],3]],"c":[],"p":[[5,"ScopeGuard",0],[10,"FnOnce",28],[10,"Strategy",0],[1,"tuple"],[5,"Formatter",29],[8,"Result",29],[10,"Debug",29],[6,"Always",0],[1,"bool"],[6,"Result",30],[5,"TypeId",31]],"b":[]}],\
["semver",{"doc":"Semantic version parsing and comparison.","t":"EPPGPPPPEPPPGGPFPFNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNN","n":["AlphaNumeric","AlphaNumeric","DeprecatedVersionRequirement","Identifier","InvalidIdentifier","InvalidSigil","InvalidVersionRequirement","MajorVersionRequired","Numeric","Numeric","OpAlreadySet","ParseError","ReqParseError","SemVerError","UnimplementedVersionRequirement","Version","VersionComponentsMustBeNumeric","VersionReq","any","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","description","description","eq","eq","eq","eq","eq","exact","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_str","from_str","hash","hash","hash","increment_major","increment_minor","increment_patch","into","into","into","into","into","is_prerelease","major","matches","minor","new","parse","parse","partial_cmp","partial_cmp","partial_cmp","partial_cmp","patch","pre","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"semver"],[122,"core::cmp"],[123,"core::fmt"],[124,"core::fmt"],[125,"semver_parser::version"],[126,"alloc::string"],[127,"core::result"],[128,"core::hash"],[129,"core::option"],[130,"core::any"]],"d":["","An identifier with letters and numbers.","This form of requirement is deprecated.","An identifier in the pre-release or build metadata.","There was an error parsing an identifier.","The sigil you have written is not correct.","The given version requirement is invalid.","At least a major version is required.","","An identifier that’s solely numbers.","You have already provided an operation, such as <code>=</code>, <code>~</code>, or <code>^</code>…","An error ocurred while parsing.","A <code>ReqParseError</code> is returned from methods which parse a …","An error type for this crate","An unimplemented version requirement.","Represents a version number conforming to the semantic …","All components of a version must be numeric.","A <code>VersionReq</code> is a struct containing a list of predicates …","<code>any()</code> is a factory method which creates a <code>VersionReq</code> with …","","","","","","","","","","","The build metadata, ignored when determining version …","","","","","","","","","","","","","","","","","","","","","<code>exact()</code> is a factory method which creates a <code>VersionReq</code> …","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Increments the major version number for this Version (Must …","Increments the minor version number for this Version (Must …","Increments the patch number for this Version (Must be …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks to see if the current Version is in pre-release …","The major version, to be incremented on incompatible …","<code>matches()</code> matches a given <code>Version</code> against this <code>VersionReq</code>.","The minor version, to be incremented when functionality is …","Contructs the simple case without pre or build.","Parse a string into a semver object.","<code>parse()</code> is the main constructor of a <code>VersionReq</code>. It takes …","","","","","The patch version, to be incremented when …","The pre-release version identifier, if one exists.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,2,5,0,5,5,5,5,0,2,5,4,0,0,5,0,5,0,1,2,3,4,1,5,2,3,4,1,5,3,2,3,4,1,5,2,3,4,1,5,2,3,1,4,5,2,3,4,1,5,1,2,2,3,3,4,4,1,1,5,5,2,2,3,3,3,4,1,1,5,5,3,1,2,3,1,3,3,3,2,3,4,1,5,3,3,1,3,3,3,1,2,3,4,1,3,3,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[2,2],[3,3],[4,4],[1,1],[5,5],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[2,2],7],[[3,3],7],[[1,1],7],[4,8],[5,8],[[2,2],9],[[3,3],9],[[4,4],9],[[1,1],9],[[5,5],9],[3,1],[[2,10],11],[[2,10],11],[[3,10],11],[[3,10],11],[[4,10],11],[[4,10],11],[[1,10],11],[[1,10],11],[[5,10],11],[[5,10],11],[-1,-1,[]],[12,2],[-1,-1,[]],[[[6,[13,13,13]]],3],[14,3],[-1,-1,[]],[15,1],[-1,-1,[]],[-1,-1,[]],[16,5],[8,[[17,[3,4]]]],[8,[[17,[1,5]]]],[[2,-1],6,18],[[3,-1],6,18],[[1,-1],6,18],[3,6],[3,6],[3,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,9],0,[[1,3],9],0,[[13,13,13],3],[8,[[17,[3,4]]]],[8,[[17,[1,5]]]],[[2,2],[[19,[7]]]],[[3,3],[[19,[7]]]],[[4,4],[[19,[7]]]],[[1,1],[[19,[7]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]]],"c":[],"p":[[5,"VersionReq",0],[6,"Identifier",0],[5,"Version",0],[6,"SemVerError",0],[6,"ReqParseError",0],[1,"tuple"],[6,"Ordering",122],[1,"str"],[1,"bool"],[5,"Formatter",123],[8,"Result",123],[6,"Identifier",124],[1,"u64"],[5,"Version",124],[5,"VersionReq",125],[5,"String",126],[6,"Result",127],[10,"Hasher",128],[6,"Option",129],[5,"TypeId",130]],"b":[[51,"impl-Display-for-Identifier"],[52,"impl-Debug-for-Identifier"],[53,"impl-Debug-for-Version"],[54,"impl-Display-for-Version"],[55,"impl-Debug-for-SemVerError"],[56,"impl-Display-for-SemVerError"],[57,"impl-Debug-for-VersionReq"],[58,"impl-Display-for-VersionReq"],[59,"impl-Debug-for-ReqParseError"],[60,"impl-Display-for-ReqParseError"],[64,"impl-From%3C(u64,+u64,+u64)%3E-for-Version"],[65,"impl-From%3CVersion%3E-for-Version"]]}],\
["semver_parser",{"doc":"","t":"CCPPPPPPPPGPFPFPGNNNNNNNNNNNNNNNNNNNNNNNNOOOHHOOONNNNNNNNNNNNPGPFNNNNONNNNNNNNNNNNNNOOHOONNNNNNNNNN","n":["range","version","Compatible","Ex","Gt","GtEq","Lt","LtEq","Major","Minor","Op","Patch","Predicate","Tilde","VersionReq","Wildcard","WildcardVersion","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_str","into","into","into","into","major","minor","op","parse","parse_predicate","patch","pre","predicates","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","AlphaNumeric","Identifier","Numeric","Version","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","from","from","into","into","major","minor","parse","patch","pre","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"semver_parser"],[2,"semver_parser::range"],[61,"semver_parser::version"],[99,"core::fmt"],[100,"core::fmt"],[101,"core::result"],[102,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","An identifier with letters and numbers.","","An identifier that’s solely numbers.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,3,3,3,3,3,3,1,1,0,1,0,3,0,3,0,5,1,3,4,5,1,3,4,1,3,4,5,1,3,4,5,1,3,4,3,5,1,3,4,4,4,4,0,0,4,4,5,5,1,3,4,5,1,3,4,5,1,3,4,13,0,13,0,12,13,12,13,12,12,13,12,13,12,13,12,12,13,13,12,13,12,13,12,12,0,12,12,12,13,12,13,12,13,12,13,12,13],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],2],[[3,3],2],[[4,4],2],[[5,6],7],[[1,6],7],[[3,6],7],[[4,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[8,[[10,[3,9]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[8,[[10,[5,9]]]],[8,[[10,[4,9]]]],0,0,0,[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[12,12],[13,13],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[12,12],2],[[13,13],2],[[12,6],7],[[12,6],7],[[13,6],7],[[13,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[8,[[10,[12,9]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[-1,9,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]]],"c":[],"p":[[6,"WildcardVersion",2],[1,"bool"],[6,"Op",2],[5,"Predicate",2],[5,"VersionReq",2],[5,"Formatter",99],[8,"Result",99],[1,"str"],[5,"String",100],[6,"Result",101],[5,"TypeId",102],[5,"Version",61],[6,"Identifier",61],[1,"tuple"]],"b":[[76,"impl-Display-for-Version"],[77,"impl-Debug-for-Version"],[78,"impl-Debug-for-Identifier"],[79,"impl-Display-for-Identifier"]]}],\
["sled",{"doc":"<code>sled</code> is a high-performance embedded database with an API …","t":"FPFFPFPGGPFPPFPKGPPPIFEFPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNONNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOPPPGIPPPPPPPGIKFFGRHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNM","n":["Batch","CollectionNotFound","CompareAndSwapError","Config","Corruption","Db","Err","Error","Event","HighThroughput","IVec","Insert","Io","Iter","LowSpace","MergeOperator","Mode","Ok","Remove","ReportableBug","Result","Subscriber","Transactional","Tree","Unsupported","apply_batch","as_mut","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache_capacity","checksum","checksum","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","compare_and_swap","compression_factor","contains_key","create_new","current","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop_tree","eq","eq","eq","eq","eq","export","fetch_and_update","first","flush","flush_async","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","generate_id","get","get_gt","get_lt","hash","hash","import","init","init","init","init","init","init","init","init","init","init","init","insert","insert","into","into","into","into","into","into","into","into","into","into","into","into_future","into_iter","into_iter","into_iter","is_empty","iter","key","keys","last","last","len","make_overlay","make_overlay","make_overlay","merge","mode","name","new","next","next","next_back","next_timeout","open","open","open_tree","partial_cmp","partial_cmp","partial_cmp","path","poll","pop_max","pop_min","print_profile_on_drop","proposed","range","remove","remove","scan_prefix","set_merge_operator","size_on_disk","subslice","temporary","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","transaction","transaction","tree_names","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_and_fetch","use_compression","values","view_overlay","view_overlay","view_overlay","was_recovered","watch_prefix","at","bt","key","key","value","Abort","Abort","Conflict","ConflictableTransactionError","ConflictableTransactionResult","Err","Err","Ok","Ok","Storage","Storage","Storage","TransactionError","TransactionResult","Transactional","TransactionalTree","TransactionalTrees","UnabortableTransactionError","View","abort","apply_batch","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","eq","eq","flush","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","generate_id","get","init","init","init","init","init","insert","into","into","into","into","into","make_overlay","remove","source","source","source","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","transaction","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","view_overlay"],"q":[[0,"sled"],[326,"sled::Error"],[328,"sled::Event"],[331,"sled::transaction"],[446,"core::cmp"],[447,"core::option"],[448,"core::result"],[449,"core::convert"],[450,"core::convert"],[451,"core::iter::traits::iterator"],[452,"core::ops::function"],[453,"core::fmt"],[454,"core::fmt"],[455,"std::io::error"],[456,"core::iter::traits::collect"],[457,"core::hash"],[458,"core::iter::traits::double_ended"],[459,"core::marker"],[460,"core::marker"],[461,"std::sync::mpsc"],[462,"std::path"],[463,"core::pin"],[464,"core::task::wake"],[465,"core::task::poll"],[466,"core::ops::range"],[467,"alloc::string"],[468,"core::ops::function"],[469,"core::clone"],[470,"core::cmp"]],"d":["A batch of updates that will be applied atomically to the …","The underlying collection no longer exists.","Compare and swap error.","Top-level configuration for the system.","Corruption has been detected in the storage file.","The <code>sled</code> embedded database! Implements …","Contains the error value","An Error type encapsulating various issues that may come up","An event that happened to a key that a subscriber is …","In this mode, the database will try to maximize write …","A buffer that may either be inline or remote and protected …","A new complete (key, value) pair","A read or write error has happened when interacting with …","An iterator over keys and values in a <code>Tree</code>.","In this mode, the database will make decisions that favor …","A function that may be configured on a particular shared …","The high-level database mode, according to the trade-offs …","Contains the success value","A deleted key","An unexpected bug has happened. Please open an issue on …","The top-level result type for dealing with fallible …","A subscriber listening on a specified prefix","","A flash-sympathetic persistent lock-free B+ tree.","The system has been used in an unsupported way.","Create a new batched update that can be atomically applied.","","","","","","","","","","","","","","","","","","","","","","","","","","","maximum size in bytes for the system page cache","Returns the CRC32 of all keys and values in this Db.","Returns the CRC32 of all keys and values in this Tree.","Clears the <code>Tree</code>, removing all values.","","","","","","","","","","","","","","","","","","","","","","Compare and swap. Capable of unique creation, conditional …","the compression factor to use with zstd compression. …","Returns <code>true</code> if the <code>Tree</code> contains a value for the …","attempts to exclusively open the database, failing if it …","The current value which caused your CAS to fail.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Remove a disk-backed collection.","","","","","","A database export method for all collections in the <code>Db</code>, …","Fetch the value, apply a function to it and return the …","Returns the first key and value in the <code>Tree</code>, or <code>None</code> if …","Synchronously flushes all dirty IO buffers and calls …","Asynchronously flushes all dirty IO buffers and calls …","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Generate a monotonic ID. Not guaranteed to be contiguous. …","Retrieve a value from the <code>Tree</code> if it exists.","Retrieve the next key and value from the <code>Tree</code> after the …","Retrieve the key and value before the provided key, if one …","","","Imports the collections from a previous database.","","","","","","","","","","","","Set a key to a new value","Insert a key to a new value, returning the last value if it","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns <code>true</code> if the <code>Tree</code> contains no elements.","Create a double-ended iterator over the tuples of keys and …","Return the key associated with the <code>Event</code>","Iterate over the keys of this Tree","","Returns the last key and value in the <code>Tree</code>, or <code>None</code> if the …","Returns the number of elements in this tree.","","","","Merge state directly into a given key’s value using the …","specify whether the system should run in “small” or “…","Returns the name of the tree.","Returns a default <code>Config</code>","","","","Attempts to wait for a value on this <code>Subscriber</code>, returning …","Opens a <code>Db</code> with a default configuration at the specified …","Opens a <code>Db</code> based on the provided config.","Open or create a new disk-backed Tree with its own …","","","","Set the path of the database (builder).","","Atomically removes the maximum item in the <code>Tree</code> instance.","Atomically removes the minimum item in the <code>Tree</code> instance.","print a performance profile when the Config is dropped","Returned value that was proposed unsuccessfully.","Create a double-ended iterator over tuples of keys and …","Remove a key","Delete a value, returning the old value if it existed.","Create an iterator over tuples of keys and values, where …","Sets a merge operator for use with the <code>merge</code> function.","Returns the on-disk size of the storage files for this …","Create a subslice of this <code>IVec</code> that shares the same …","deletes the database after drop. if no path is set, uses …","","","","","","","","","","","","Fully serializable (ACID) multi-<code>Tree</code> transactions","Perform a multi-key serializable transaction.","Returns the trees names saved in this Db.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fetch the value, apply a function to it and return the …","whether to use zstd compression","Iterate over the values of this Tree","","","","Returns <code>true</code> if the database was recovered from a previous …","Subscribe to <code>Event</code>s that happen to keys that have the …","The file location that corrupted data was found at.","A backtrace for where the corruption was encountered.","The key that has been set","The key that has been removed","The value that has been set","A user-provided error type that indicates the transaction …","A user-provided error type that indicates the transaction …","An internal conflict has occurred and the <code>transaction</code> …","An error type that is returned from the closure passed to …","A transaction-related <code>Result</code> which is used for …","Contains the error value","Contains the error value","Contains the success value","Contains the success value","A serious underlying storage issue has occurred that …","A serious underlying storage issue has occurred that …","A serious underlying storage issue has occurred that …","An error type that is returned from the closure passed to …","A transaction-related <code>Result</code> which is used for returning …","A type that may be transacted on in sled transactions.","A transaction that will be applied atomically to the Tree.","A type which allows for pluggable transactional …","An error type that is returned from the closure passed to …","An internal reference to an internal proxy type that …","A simple constructor for <code>Err(TransactionError::Abort(_))</code>","Atomically apply multiple inserts and removals.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Flush the database before returning from the transaction.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Generate a monotonic ID. Not guaranteed to be contiguous …","Get the value associated with a key","","","","","","Set a key to a new value","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","An internal function for creating a top-level …","Remove a key","","","","","","","","","","","Runs a transaction, possibly retrying the passed-in …","","","","","","","","","","","","","","","","An internal function for viewing the transactional …"],"i":[0,13,0,0,13,0,4,0,0,12,0,14,13,0,12,0,0,4,14,13,0,0,0,0,13,1,5,5,39,24,2,12,8,10,5,5,5,13,14,1,15,39,24,2,12,8,10,5,13,14,1,15,8,10,1,1,2,12,8,10,5,13,14,1,15,2,12,8,10,5,13,14,1,15,5,14,15,1,8,1,8,15,2,8,5,39,24,2,12,8,8,10,10,5,5,13,14,1,1,15,39,24,2,12,8,10,5,5,13,14,1,15,39,24,24,2,12,8,10,5,13,14,1,15,10,5,5,13,14,15,10,1,1,1,1,2,12,8,10,5,13,13,14,1,15,15,39,4,24,2,12,8,10,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,13,14,1,15,5,10,1,1,1,5,15,10,39,24,2,12,8,10,5,13,14,1,15,2,1,39,24,2,12,8,10,5,13,14,1,15,24,39,24,1,1,1,14,39,39,1,1,1,1,1,1,8,1,8,39,24,39,24,0,8,10,5,14,15,8,24,1,1,8,15,1,2,1,1,1,10,5,8,2,12,8,10,5,13,14,1,15,13,15,0,1,10,39,24,2,12,8,10,5,13,14,1,15,39,24,2,12,8,10,5,13,14,1,15,39,24,2,12,8,10,5,13,14,1,15,1,8,39,1,1,1,10,1,68,68,69,70,69,59,61,58,0,0,55,53,55,53,58,59,61,0,0,0,0,0,0,66,0,54,43,54,58,59,61,43,54,58,59,61,54,58,59,61,54,58,59,61,43,54,58,59,61,43,54,58,59,61,43,54,58,59,61,58,59,61,54,58,58,59,59,61,61,43,54,58,58,59,59,59,61,61,54,54,43,54,58,59,61,54,43,54,58,59,61,66,54,58,59,61,54,58,59,61,58,59,61,66,43,54,58,59,61,43,54,58,59,61,43,54,58,59,61,66],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],[[4,[3]]]],[5,[[7,[6]]]],[5,[[7,[6]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,[[7,[6]]]],[5,[[7,[6]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[8,9],8],[10,[[4,[11]]]],[1,[[4,[11]]]],[1,[[4,[3]]]],[2,2],[12,12],[8,8],[10,10],[5,5],[13,13],[14,14],[1,1],[15,15],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[5,5],16],[[14,14],16],[[15,15],16],[[1,-1,[17,[-2]],[17,[-3]]],[[4,[[18,[3,15]]]]],[[19,[[7,[6]]]]],[[19,[[7,[6]]]]],[[20,[5]]]],[[8,21],8],[[1,-1],[[4,[22]]],[[19,[[7,[6]]]]]],[[8,22],8],0,[[],2],[[],8],[[],5],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],0,[23,-1,[]],[10,1],[23,-1,[]],[5,[[7,[6]]]],[23,-1,[]],[23,-1,[]],0,[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[5,[[7,[6]]]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,3],[23,3],[24,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[[10,-1],[[4,[22]]],[[19,[[7,[6]]]]]],[[5,-1],22,[[19,[[7,[6]]]]]],[[5,[7,[6]]],22],[[13,13],22],[[14,14],22],[[15,15],22],[10,[[25,[[3,[[25,[6]],[25,[6]],[0,[[27,[],[[26,[[25,[[25,[6]]]]]]]]]]]]]]]],[[1,-1,-3],[[4,[[17,[5]]]]],[[19,[[7,[6]]]]],[[20,[5]]],[[29,[[17,[[7,[6]]]]],[[28,[[17,[-2]]]]]]]],[1,[[4,[[17,[[3,[5,5]]]]]]]],[1,[[4,[23]]]],[1,[[4,[23]]]],[[2,30],31],[[12,30],31],[[8,30],31],[[10,30],[[18,[3,32]]]],[[5,30],31],[[13,30],[[18,[3,32]]]],[[13,30],31],[[14,30],31],[[1,30],[[18,[3,32]]]],[[15,30],31],[[15,30],31],[-1,-1,[]],[13,[[4,[[18,[3,15]]]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[33,[6]]],5],[[[33,[6]]],5],[-1,-1,[]],[[[33,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[34,[[7,[6]]]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[25,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[35,5],[[[33,[6]]],5],[5,5],[[[33,[6]]],5],[[[7,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[[[33,[6]]],5],[36,13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,5,[[37,[],[[26,[6]]]]]],[10,[[4,[9]]]],[[1,-1],[[4,[[17,[5]]]]],[[19,[[7,[6]]]]]],[[1,-1],[[4,[[17,[[3,[5,5]]]]]]],[[19,[[7,[6]]]]]],[[1,-1],[[4,[[17,[[3,[5,5]]]]]]],[[19,[[7,[6]]]]]],[[5,-1],3,38],[[15,-1],3,38],[[10,[25,[[3,[[25,[6]],[25,[6]],-1]]]]],3,[[27,[],[[26,[[25,[[25,[6]]]]]]]]]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[2,-1,-2],3,[[20,[5]]],[[20,[5]]]],[[1,-1,-2],[[4,[[17,[5]]]]],[[19,[[7,[6]]]]],[[20,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,39],[1,22],[1,39],[14,5],[39,[[0,[[40,[],[[26,[[4,[5]]]]]],41,42]]]],[39,[[17,[-1]]],[]],[1,[[4,[[17,[[3,[5,5]]]]]]]],[1,23],[1,[[4,[43]]]],[1,[[4,[43]]]],[1,[[4,[43]]]],[[1,-1,-2],[[4,[[17,[5]]]]],[[19,[[7,[6]]]]],[[19,[[7,[6]]]]]],[[8,12],8],[1,5],[[],8],[39,[[17,[-1]]],[]],[24,[[17,[14]]]],[39,[[17,[-1]]],[]],[[24,44],[[18,[14,45]]]],[-1,[[4,[10]]],[[19,[46]]]],[8,[[4,[10]]]],[[10,-1],[[4,[1]]],[[19,[[7,[6]]]]]],[[5,5],[[17,[16]]]],[[14,14],[[17,[16]]]],[[15,15],[[17,[16]]]],[[8,-1],8,[[19,[46]]]],[[[47,[24]],48],[[49,[-1]]],[]],[1,[[4,[[17,[[3,[5,5]]]]]]]],[1,[[4,[[17,[[3,[5,5]]]]]]]],[[8,22],8],0,[[1,-2],39,[[19,[[7,[6]]]]],[[50,[-1]]]],[[2,-1],3,[[20,[5]]]],[[1,-1],[[4,[[17,[5]]]]],[[19,[[7,[6]]]]]],[[1,-1],39,[[19,[[7,[6]]]]]],[[1,-1],3,51],[10,[[4,[9]]]],[[5,23,23],5],[[8,22],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,52,[]],[-1,52,[]],0,[[1,-3],[[53,[-1,-2]]],[],[],[[56,[54],[[28,[[55,[-1,-2]]]]]]]],[10,[[25,[5]]]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[[1,-1,-3],[[4,[[17,[5]]]]],[[19,[[7,[6]]]]],[[20,[5]]],[[29,[[17,[[7,[6]]]]],[[28,[[17,[-2]]]]]]]],[[8,22],8],[39,[[0,[[40,[],[[26,[[4,[5]]]]]],41,42]]]],[43,-1,[]],[43,-1,[]],[43,-1,[]],[10,22],[[1,-1],24,[[19,[[7,[6]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[55,[-2,-1]]],[],[]],[[54,2],[[18,[3,58]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[54,54],[58,58],[[[59,[-1]]],[[59,[-1]]],60],[[[61,[-1]]],[[61,[-1]]],60],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,3],[23,3],[23,3],[23,3],[23,3],[[58,58],22],[[[59,[-1]],[59,[-1]]],22,62],[[[61,[-1]],[61,[-1]]],22,62],[54,3],[[58,30],31],[[58,30],31],[[[59,[-1]],30],31,63],[[[59,[-1]],30],31,64],[[[61,[-1]],30],31,63],[[[61,[-1]],30],31,64],[-1,-1,[]],[-1,-1,[]],[13,58],[-1,-1,[]],[58,[[59,[-1]]],[]],[-1,-1,[]],[13,[[59,[-1]]],[]],[13,[[61,[-1]]],[]],[-1,-1,[]],[54,[[4,[9]]]],[[54,-1],[[18,[[17,[5]],58]]],[[19,[[7,[6]]]]]],[[],23],[[],23],[[],23],[[],23],[[],23],[[54,-1,-2],[[18,[[17,[5]],58]]],[[19,[[7,[6]]]],[20,[5]]],[[20,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[66,[],[[65,[-1]]]]],[[4,[43]]],[]],[[54,-1],[[18,[[17,[5]],58]]],[[19,[[7,[6]]]],[20,[5]]]],[58,[[17,[67]]]],[[[59,[-1]]],[[17,[67]]],67],[[[61,[-1]]],[[17,[67]]],67],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[[[66,[],[[65,[-1]]]],-4],[[53,[-2,-3]]],[],[],[],[[56,[-1],[[28,[[55,[-2,-3]]]]]]]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[43,-1,[]]],"c":[],"p":[[5,"Tree",0],[5,"Batch",0],[1,"tuple"],[8,"Result",0],[5,"IVec",0],[1,"u8"],[1,"slice"],[5,"Config",0],[1,"u64"],[5,"Db",0],[1,"u32"],[6,"Mode",0],[6,"Error",0],[6,"Event",0],[5,"CompareAndSwapError",0],[6,"Ordering",446],[6,"Option",447],[6,"Result",448],[10,"AsRef",449],[10,"Into",449],[1,"i32"],[1,"bool"],[1,"usize"],[5,"Subscriber",0],[5,"Vec",450],[17,"Item"],[10,"Iterator",451],[17,"Output"],[10,"FnMut",452],[5,"Formatter",453],[8,"Result",453],[5,"Error",453],[1,"array"],[5,"Box",454],[1,"str"],[5,"Error",455],[10,"IntoIterator",456],[10,"Hasher",457],[5,"Iter",0],[10,"DoubleEndedIterator",458],[10,"Send",459],[10,"Sync",459],[5,"TransactionalTrees",331],[5,"Duration",460],[6,"RecvTimeoutError",461],[5,"Path",462],[5,"Pin",463],[5,"Context",464],[6,"Poll",465],[10,"RangeBounds",466],[10,"MergeOperator",0],[5,"String",467],[8,"TransactionResult",331],[5,"TransactionalTree",331],[8,"ConflictableTransactionResult",331],[10,"Fn",452],[5,"TypeId",468],[6,"UnabortableTransactionError",331],[6,"ConflictableTransactionError",331],[10,"Clone",469],[6,"TransactionError",331],[10,"PartialEq",446],[10,"Display",453],[10,"Debug",453],[17,"View"],[10,"Transactional",331],[10,"Error",470],[15,"Corruption",326],[15,"Insert",328],[15,"Remove",328]],"b":[[35,"impl-Borrow%3C%5Bu8%5D%3E-for-IVec"],[36,"impl-Borrow%3C%5Bu8%5D%3E-for-%26IVec"],[125,"impl-PartialEq%3CT%3E-for-IVec"],[126,"impl-PartialEq%3C%5Bu8%5D%3E-for-IVec"],[140,"impl-Display-for-Error"],[141,"impl-Debug-for-Error"],[144,"impl-Debug-for-CompareAndSwapError"],[145,"impl-Display-for-CompareAndSwapError"],[153,"impl-From%3C%26%5Bu8;+0%5D%3E-for-IVec"],[154,"impl-From%3C%26%5Bu8;+12%5D%3E-for-IVec"],[156,"impl-From%3C%26%5Bu8;+2%5D%3E-for-IVec"],[157,"impl-From%3C%26%5Bu8;+24%5D%3E-for-IVec"],[158,"impl-From%3C%26%5Bu8;+16%5D%3E-for-IVec"],[159,"impl-From%3C%26%5Bu8;+30%5D%3E-for-IVec"],[160,"impl-From%3C%26%5Bu8;+9%5D%3E-for-IVec"],[161,"impl-From%3C%26%5Bu8;+6%5D%3E-for-IVec"],[162,"impl-From%3C%26%5Bu8;+3%5D%3E-for-IVec"],[163,"impl-From%3C%26%5Bu8;+20%5D%3E-for-IVec"],[164,"impl-From%3C%26%5Bu8;+4%5D%3E-for-IVec"],[165,"impl-From%3CBox%3C%5Bu8%5D%3E%3E-for-IVec"],[166,"impl-From%3C%26%5Bu8;+15%5D%3E-for-IVec"],[167,"impl-From%3C%26%5Bu8;+1%5D%3E-for-IVec"],[168,"impl-From%3C%26%5Bu8;+22%5D%3E-for-IVec"],[169,"impl-From%3C%26%5Bu8;+19%5D%3E-for-IVec"],[170,"impl-From%3C%26%5Bu8;+23%5D%3E-for-IVec"],[171,"impl-From%3C%26%5Bu8;+21%5D%3E-for-IVec"],[172,"impl-From%3C%26%5Bu8;+25%5D%3E-for-IVec"],[173,"impl-From%3C%26%5Bu8;+32%5D%3E-for-IVec"],[174,"impl-From%3C%26%5Bu8;+8%5D%3E-for-IVec"],[175,"impl-From%3C%26%5Bu8;+7%5D%3E-for-IVec"],[176,"impl-From%3C%26%5Bu8;+18%5D%3E-for-IVec"],[177,"impl-From%3C%26%5Bu8;+27%5D%3E-for-IVec"],[178,"impl-From%3CVec%3Cu8%3E%3E-for-IVec"],[179,"impl-From%3C%26%5Bu8;+14%5D%3E-for-IVec"],[180,"impl-From%3C%26%5Bu8;+11%5D%3E-for-IVec"],[181,"impl-From%3C%26str%3E-for-IVec"],[182,"impl-From%3C%26%5Bu8;+5%5D%3E-for-IVec"],[183,"impl-From%3C%26IVec%3E-for-IVec"],[184,"impl-From%3C%26%5Bu8;+17%5D%3E-for-IVec"],[185,"impl-From%3C%26%5Bu8%5D%3E-for-IVec"],[186,"impl-From%3C%26%5Bu8;+10%5D%3E-for-IVec"],[187,"impl-From%3C%26%5Bu8;+26%5D%3E-for-IVec"],[188,"impl-From%3C%26%5Bu8;+13%5D%3E-for-IVec"],[189,"impl-From%3C%26%5Bu8;+29%5D%3E-for-IVec"],[190,"impl-From%3C%26%5Bu8;+31%5D%3E-for-IVec"],[191,"impl-From%3C%26%5Bu8;+28%5D%3E-for-IVec"],[240,"impl-Transactional%3CE%3E-for-%26%26Tree"],[241,"impl-Transactional%3CE%3E-for-Tree"],[242,"impl-Transactional%3CE%3E-for-%26Tree"],[321,"impl-Transactional%3CE%3E-for-%26%26Tree"],[322,"impl-Transactional%3CE%3E-for-%26Tree"],[323,"impl-Transactional%3CE%3E-for-Tree"],[389,"impl-Debug-for-UnabortableTransactionError"],[390,"impl-Display-for-UnabortableTransactionError"],[391,"impl-Display-for-ConflictableTransactionError%3CE%3E"],[392,"impl-Debug-for-ConflictableTransactionError%3CT%3E"],[393,"impl-Display-for-TransactionError%3CE%3E"],[394,"impl-Debug-for-TransactionError%3CT%3E"],[399,"impl-From%3CUnabortableTransactionError%3E-for-ConflictableTransactionError%3CE%3E"],[401,"impl-From%3CError%3E-for-ConflictableTransactionError%3CT%3E"]]}],\
["smallvec",{"doc":"Small vectors in various sizes. These store a certain …","t":"PKPGFFRFKNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNQNNNNMNNNNNNNNNNNNNNNNNNO","n":["AllocErr","Array","CapacityOverflow","CollectionAllocErr","Drain","IntoIter","Item","SmallVec","ToSmallVec","append","as_mut","as_mut_ptr","as_mut_slice","as_mut_slice","as_ptr","as_ref","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_from","clone_into","clone_into","cmp","dedup","dedup_by","dedup_by_key","default","deref","deref_mut","drain","drop","drop","drop","eq","extend","extend_from_slice","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_buf","from_buf_and_len","from_buf_and_len_unchecked","from_elem","from_iter","from_raw_parts","from_slice","from_vec","grow","hash","index","index_mut","inline_size","insert","insert_from_slice","insert_many","into","into","into","into","into_boxed_slice","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_vec","is_empty","len","len","new","next","next","next_back","next_back","partial_cmp","pop","push","remove","reserve","reserve_exact","resize","resize_with","retain","retain_mut","set_len","shrink_to_fit","size","size_hint","size_hint","smallvec","spilled","swap_remove","to_owned","to_owned","to_smallvec","to_string","truncate","try_from","try_from","try_from","try_from","try_grow","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","with_capacity","layout"],"q":[[0,"smallvec"],[137,"smallvec::CollectionAllocErr"],[138,"core::clone"],[139,"core::cmp"],[140,"core::ops::function"],[141,"core::ops::range"],[142,"core::iter::traits::collect"],[143,"core::fmt"],[144,"core::fmt"],[145,"core::alloc::layout"],[146,"core::mem::maybe_uninit"],[147,"core::hash"],[148,"core::slice::index"],[149,"alloc::boxed"],[150,"core::result"],[151,"core::option"],[152,"alloc::string"],[153,"core::any"]],"d":["The allocator return an error","Types that can be used as the backing store for a <code>SmallVec</code>.","Overflow <code>usize::MAX</code> or other error during size computation","Error type for APIs with fallible heap allocation","An iterator that removes the items from a <code>SmallVec</code> and …","An iterator that consumes a <code>SmallVec</code> and yields its items …","The type of the array’s elements.","A <code>Vec</code>-like container that can store a small number of …","Convenience trait for constructing a <code>SmallVec</code>","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","","Returns a raw mutable pointer to the vector’s buffer.","Extracts a mutable slice of the entire vector.","Returns the remaining items of this iterator as a mutable …","Returns a raw pointer to the vector’s buffer.","","Extracts a slice containing the entire vector.","Returns the remaining items of this iterator as a slice.","","","","","","","","","","","The number of items the vector can hold without …","Remove all elements from the vector.","","","","","","","Removes consecutive duplicate elements.","Removes consecutive duplicate elements using the given …","Removes consecutive elements that map to the same key.","","","","Creates a draining iterator that removes the specified …","","","","","","Copy elements from a slice and append them to the vector.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …","Creates a <code>SmallVec</code> with <code>n</code> copies of <code>elem</code>.","","Creates a <code>SmallVec</code> directly from the raw components of …","Copy the elements from a slice into a new <code>SmallVec</code>.","Construct a new <code>SmallVec</code> from a <code>Vec&lt;A::Item&gt;</code>.","Re-allocate to set the capacity to …","","","","The maximum number of elements this vector can hold inline","Insert an element at position <code>index</code>, shifting all elements …","Copy elements from a slice into the vector at position …","Insert multiple elements at position <code>index</code>, shifting all …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts a <code>SmallVec</code> into a <code>Box&lt;[T]&gt;</code> without reallocating …","Convert the <code>SmallVec</code> into an <code>A</code> if possible. Otherwise …","","","","","","Convert a <code>SmallVec</code> to a <code>Vec</code>, without reallocating if the …","Returns <code>true</code> if the vector is empty","","The number of elements stored in the vector","Construct an empty vector","","","","","","Remove an item from the end of the vector and return it, …","Append an item to the vector.","Remove and return the element at position <code>index</code>, shifting …","Reserve capacity for <code>additional</code> more elements to be …","Reserve the minimum capacity for <code>additional</code> more elements …","Resizes the vector so that its length is equal to <code>len</code>.","Resizes the <code>SmallVec</code> in-place so that <code>len</code> is equal to …","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Sets the length of a vector.","Shrink the capacity of the vector as much as possible.","Returns the number of items the array can hold.","","","Creates a <code>SmallVec</code> containing the arguments.","Returns <code>true</code> if the data has spilled into a separate …","Remove the element at position <code>index</code>, replacing it with …","","","Construct a new <code>SmallVec</code> from a slice.","","Shorten the vector, keeping the first <code>len</code> elements and …","","","","","Re-allocate to set the capacity to …","","","","","Reserve capacity for <code>additional</code> more elements to be …","Reserve the minimum capacity for <code>additional</code> more elements …","","","","","Construct an empty vector with enough capacity …","The layout that was passed to the allocator"],"i":[18,0,18,0,0,0,3,0,0,1,1,1,1,6,1,1,1,6,13,1,1,6,18,13,1,1,6,18,1,1,1,6,1,1,6,1,1,1,1,1,1,1,1,13,1,6,1,1,1,13,1,6,18,18,13,1,1,1,1,6,18,18,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,13,1,6,18,1,1,13,1,1,1,6,1,1,13,1,1,13,6,13,6,1,1,1,1,1,1,1,1,1,1,1,1,3,13,6,0,1,1,1,6,27,18,1,13,1,6,18,1,13,1,6,18,1,1,13,1,6,18,1,30],"f":[0,0,0,0,0,0,0,0,0,[[[1,[-1]],[1,[-2]]],2,3,[[3,[],[[4,[]]]]]],[[[1,[-1]]],5,3],[[[1,[-1]]],[],3],[[[1,[-1]]],5,3],[[[6,[-1]]],5,3],[[[1,[-1]]],[],3],[[[1,[-1]]],5,3],[[[1,[-1]]],5,3],[[[6,[-1]]],5,3],[-1,-2,[],[]],[[[1,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],7,3],[[[1,[-1]]],2,3],[[[1,[-1]]],[[1,[-1]]],3],[[[6,[-1]]],[[6,[-1]]],[3,8]],[[[1,[-1]],[1,[-1]]],2,3],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[1,[-1]],[1,[-1]]],9,3],[[[1,[-1]]],2,3],[[[1,[-1]],-2],2,3,[[12,[],[[10,[11]]]]]],[[[1,[-1]],-3],2,3,[],[[12,[],[[10,[-2]]]]]],[[],[[1,[-1]]],3],[[[1,[-1]]],5,3],[[[1,[-1]]],5,3],[[[1,[-1]],-2],[[13,[-1]]],3,[[14,[7]]]],[[[13,[-1]]],2,3],[[[1,[-1]]],2,3],[[[6,[-1]]],2,3],[[[1,[-1]],[1,[-2]]],11,3,3],[[[1,[-1]],-2],2,3,[[15,[],[[4,[]]]]]],[[[1,[-1]],5],2,3],[[[13,[-1]],16],17,3],[[[1,[-1]],16],17,3],[[[6,[-1]],16],17,3],[[18,16],17],[[18,16],17],[-1,-1,[]],[-1,-1,[]],[-1,[[1,[-1]]],3],[19,[[1,[-1]]],3],[5,[[1,[-1]]],3],[-1,-1,[]],[20,18],[-1,-1,[]],[-1,[[1,[-1]]],3],[[-1,7],[[1,[-1]]],3],[[[21,[-1]],7],[[1,[-1]]],3],[7,[[1,[-1]]],3],[-1,[[1,[-2]]],[[15,[],[[4,[]]]]],3],[[7,7],[[1,[-1]]],3],[5,[[1,[-1]]],3],[19,[[1,[-1]]],3],[[[1,[-1]],7],2,3],[[[1,[-1]],-2],2,3,22],[[[1,[-1]],-2],[],3,[[23,[5]]]],[[[1,[-1]],-2],[],3,[[23,[5]]]],[[[1,[-1]]],7,3],[[[1,[-1]],7],2,3],[[[1,[-1]],7,5],2,3],[[[1,[-1]],7,-2],2,3,[[15,[],[[4,[]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[24,[5]]],3],[[[1,[-1]]],[[25,[-1,[1,[-1]]]]],3],[-1,-2,[],[]],[[[1,[-1]]],-2,3,[]],[[[1,[-1]]],-2,3,[]],[[[1,[-1]]],-2,3,[]],[-1,-2,[],[]],[[[1,[-1]]],19,3],[[[1,[-1]]],11,3],[[[13,[-1]]],7,3],[[[1,[-1]]],7,3],[[],[[1,[-1]]],3],[[[13,[-1]]],26,3],[[[6,[-1]]],26,3],[[[13,[-1]]],26,3],[[[6,[-1]]],26,3],[[[1,[-1]],[1,[-1]]],[[26,[9]]],3],[[[1,[-1]]],26,3],[[[1,[-1]]],2,3],[[[1,[-1]],7],[],3],[[[1,[-1]],7],2,3],[[[1,[-1]],7],2,3],[[[1,[-1]],7],2,3],[[[1,[-1]],7,-2],2,3,[[12,[],[[10,[]]]]]],[[[1,[-1]],-2],2,3,[[12,[],[[10,[11]]]]]],[[[1,[-1]],-2],2,3,[[12,[],[[10,[11]]]]]],[[[1,[-1]],7],2,3],[[[1,[-1]]],2,3],[[],7],[[[13,[-1]]],[[2,[7,[26,[7]]]]],3],[[[6,[-1]]],[[2,[7,[26,[7]]]]],3],0,[[[1,[-1]]],11,3],[[[1,[-1]],7],[],3],[-1,-2,[],[]],[-1,-2,[],[]],[27,[[1,[-1]]],3],[-1,28,[]],[[[1,[-1]],7],2,3],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[[[1,[-1]],7],[[25,[2,18]]],3],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[[[1,[-1]],7],[[25,[2,18]]],3],[[[1,[-1]],7],[[25,[2,18]]],3],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[7,[[1,[-1]]],3],0],"c":[],"p":[[5,"SmallVec",0],[1,"tuple"],[10,"Array",0],[17,"Item"],[1,"slice"],[5,"IntoIter",0],[1,"usize"],[10,"Clone",138],[6,"Ordering",139],[17,"Output"],[1,"bool"],[10,"FnMut",140],[5,"Drain",0],[10,"RangeBounds",141],[10,"IntoIterator",142],[5,"Formatter",143],[8,"Result",143],[6,"CollectionAllocErr",0],[5,"Vec",144],[8,"LayoutErr",145],[20,"MaybeUninit",146],[10,"Hasher",147],[10,"SliceIndex",148],[5,"Box",149],[6,"Result",150],[6,"Option",151],[10,"ToSmallVec",0],[5,"String",152],[5,"TypeId",153],[15,"AllocErr",137]],"b":[[52,"impl-Debug-for-CollectionAllocErr"],[53,"impl-Display-for-CollectionAllocErr"],[56,"impl-From%3CA%3E-for-SmallVec%3CA%3E"],[57,"impl-From%3CVec%3C%3CA+as+Array%3E::Item%3E%3E-for-SmallVec%3CA%3E"],[58,"impl-From%3C%26%5B%3CA+as+Array%3E::Item%5D%3E-for-SmallVec%3CA%3E"],[85,"impl-IntoIterator-for-SmallVec%3CA%3E"],[86,"impl-IntoIterator-for-%26SmallVec%3CA%3E"],[87,"impl-IntoIterator-for-%26mut+SmallVec%3CA%3E"]]}],\
["static_assertions",{"doc":"Banner","t":"QQQQQQQQQQQQQQQQQQQ","n":["assert_cfg","assert_eq_align","assert_eq_size","assert_eq_size_ptr","assert_eq_size_val","assert_fields","assert_impl_all","assert_impl_any","assert_impl_one","assert_not_impl_all","assert_not_impl_any","assert_obj_safe","assert_trait_sub_all","assert_trait_super_all","assert_type_eq_all","assert_type_ne_all","const_assert","const_assert_eq","const_assert_ne"],"q":[[0,"static_assertions"]],"d":["Asserts that a given configuration is set.","Asserts that types are equal in alignment.","Asserts that types are equal in size.","Asserts that values pointed to are equal in size.","Asserts that values are equal in size.","Asserts that the type has the given fields.","Asserts that the type implements <em>all</em> of the given traits.","Asserts that the type implements <em>any</em> of the given traits.","Asserts that the type implements exactly one in a set of …","Asserts that the type does <strong>not</strong> implement <em>all</em> of the given …","Asserts that the type does <strong>not</strong> implement <em>any</em> of the given …","Asserts that the traits support dynamic dispatch (…","Asserts that the trait is a child of all of the other …","Asserts that the trait is a parent of all of the other …","Asserts that <em>all</em> types in a list are equal to each other.","Asserts that <em>all</em> types are <strong>not</strong> equal to each other.","Asserts that constant expressions evaluate to <code>true</code>.","Asserts that constants are equal in value.","Asserts that constants are <strong>not</strong> equal in value."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[],"b":[]}],\
["syn_mid",{"doc":"Providing the features between “full” and “derive” …","t":"FFGPFGFFFFFFFFPFPPFPPPPPPOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNNNNNNOOOOOOONNNNNNOOOOOOOOOONNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNOOOO","n":["Block","FieldPat","FnArg","Ident","ItemFn","Pat","PatIdent","PatPath","PatReference","PatStruct","PatTuple","PatTupleStruct","PatType","PatWild","Path","Receiver","Receiver","Reference","Signature","Struct","Tuple","TupleStruct","Type","Typed","Wild","abi","and_token","asyncness","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","block","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brace_token","brace_token","by_ref","colon_token","colon_token","constness","dot2_token","elems","fields","fn_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","generics","ident","ident","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","member","mutability","mutability","mutability","output","paren_token","paren_token","parse","parse","parse","parse","parse","parse","pat","pat","pat","pat","path","path","path","reference","self_token","sig","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","stmts","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","underscore_token","unsafety","variadic","vis"],"q":[[0,"syn_mid"],[228,"syn::parse"],[229,"syn::error"],[230,"proc_macro2"],[231,"proc_macro2"],[232,"core::any"]],"d":["A braced block containing Rust statements.","A single field in a struct pattern.","An argument in a function signature: the <code>n: usize</code> in …","A pattern that binds a new variable: …","A free-standing function: …","A pattern in a local binding, function signature, match …","A pattern that binds a new variable: …","A path pattern like <code>Color::Red</code>.","A reference pattern: <code>&amp;mut var</code>.","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","A type ascription pattern: <code>foo: f64</code>.","A pattern that matches any value: <code>_</code>.","A path pattern like <code>Color::Red</code>.","The <code>self</code> argument of an associated method, whether taken …","The <code>self</code> argument of an associated method, whether taken …","A reference pattern: <code>&amp;mut var</code>.","A function signature in a trait or implementation: …","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","A type ascription pattern: <code>foo: f64</code>.","A function argument accepted by pattern and type.","A pattern that matches any value: <code>_</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Statements in a block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,5,0,0,0,0,0,0,0,0,0,0,5,0,2,5,0,5,5,5,5,2,5,16,7,16,13,3,4,11,7,8,10,9,1,6,20,13,13,15,16,2,3,5,4,11,7,8,10,9,1,6,20,13,15,16,2,3,5,4,11,7,8,10,9,1,6,20,15,8,4,1,20,16,8,10,8,16,13,15,16,2,2,2,3,5,5,5,5,5,5,5,5,5,4,11,7,8,10,9,1,6,20,16,16,4,16,13,15,16,2,3,5,4,11,7,8,10,9,1,6,20,20,3,4,7,16,16,10,13,15,16,2,3,5,7,9,1,20,11,8,9,3,3,13,13,15,16,2,3,5,4,11,7,8,10,9,1,6,20,15,13,15,16,2,3,5,4,11,7,8,10,9,1,6,20,13,15,16,2,3,5,4,11,7,8,10,9,1,6,20,13,15,16,2,3,5,4,11,7,8,10,9,1,6,20,1,13,15,16,2,3,5,4,11,7,8,10,9,1,6,20,6,16,16,13],"fc":[],"p":[[5,"PatType",0],[6,"FnArg",0],[5,"Receiver",0],[5,"PatIdent",0],[6,"Pat",0],[5,"PatWild",0],[5,"PatReference",0],[5,"PatStruct",0],[5,"PatTupleStruct",0],[5,"PatTuple",0],[5,"PatPath",0],[8,"ParseStream",228],[5,"ItemFn",0],[8,"Result",229],[5,"Block",0],[5,"Signature",0],[5,"Span",230],[5,"TokenStream",230],[1,"tuple"],[5,"FieldPat",0],[6,"Result",231],[5,"TypeId",232]],"b":[[84,"impl-From%3CPatType%3E-for-FnArg"],[85,"impl-From%3CReceiver%3E-for-FnArg"],[87,"impl-From%3CPatIdent%3E-for-Pat"],[88,"impl-From%3CPatWild%3E-for-Pat"],[90,"impl-From%3CPatReference%3E-for-Pat"],[91,"impl-From%3CPatStruct%3E-for-Pat"],[92,"impl-From%3CPatTupleStruct%3E-for-Pat"],[93,"impl-From%3CPatType%3E-for-Pat"],[94,"impl-From%3CPatTuple%3E-for-Pat"],[95,"impl-From%3CPatPath%3E-for-Pat"]]}],\
["thiserror",{"doc":"github crates-io docs-rs","t":"Y","n":["Error"],"q":[[0,"thiserror"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[],"b":[]}],\
["thiserror_impl",{"doc":"","t":"Y","n":["Error"],"q":[[0,"thiserror_impl"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[],"b":[]}],\
["transactor",{"doc":"","t":"H","n":["main"],"q":[[0,"transactor"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[1,"tuple"]],"b":[]}],\
["unicode_ident",{"doc":"github crates-io docs-rs","t":"HH","n":["is_xid_continue","is_xid_start"],"q":[[0,"unicode_ident"]],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"c":[],"p":[[1,"char"],[1,"bool"]],"b":[]}],\
["unicode_width",{"doc":"Determine displayed width of <code>char</code> and <code>str</code> types according …","t":"SKKMMMM","n":["UNICODE_VERSION","UnicodeWidthChar","UnicodeWidthStr","width","width","width_cjk","width_cjk"],"q":[[0,"unicode_width"],[7,"core::option"]],"d":["The version of Unicode that this version of unicode-width …","Methods for determining displayed width of Unicode …","Methods for determining displayed width of Unicode strings.","Returns the character’s displayed width in columns, or …","Returns the string’s displayed width in columns.","Returns the character’s displayed width in columns, or …","Returns the string’s displayed width in columns."],"i":[0,0,0,1,4,1,4],"f":[0,0,0,[1,[[3,[2]]]],[4,2],[1,[[3,[2]]]],[4,2]],"c":[],"p":[[10,"UnicodeWidthChar",0],[1,"usize"],[6,"Option",7],[10,"UnicodeWidthStr",0]],"b":[]}],\
["uuid",{"doc":"Generate and parse universally unique identifiers (UUIDs).","t":"FIEPPFPPPPPTTTTPPEPPPPPEFGGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQNNFFTTTTFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKRFSNNNNCNNNNNMNNNNNNNNNFNNNNNNNNNNNNN","n":["Builder","Bytes","ClockSequence","Custom","Dce","Error","Future","Mac","Max","Md5","Microsoft","NAMESPACE_DNS","NAMESPACE_OID","NAMESPACE_URL","NAMESPACE_X500","NCS","Nil","NoContext","RFC4122","Random","Sha1","SortMac","SortRand","Timestamp","Uuid","Variant","Version","as_braced","as_bytes","as_fields","as_hyphenated","as_ref","as_simple","as_u128","as_u64_pair","as_urn","as_uuid","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","braced","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","default","encode_buffer","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes_le","from_bytes_le","from_bytes_ref","from_custom_bytes","from_fields","from_fields","from_fields_le","from_fields_le","from_md5_bytes","from_random_bytes","from_rfc4122_timestamp","from_sha1_bytes","from_slice","from_slice","from_slice_le","from_slice_le","from_sorted_rfc4122_timestamp","from_str","from_u128","from_u128","from_u128_le","from_u128_le","from_u64_pair","from_unix_timestamp_millis","get_timestamp","get_variant","get_version","get_version_num","hash","hash","hyphenated","into","into","into","into","into","into_bytes","into_uuid","is_max","is_nil","max","new_v4","nil","nil","parse_str","partial_cmp","set_variant","set_version","simple","timestamp","to_bytes_le","to_fields_le","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_u128_le","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_parse","try_parse_ascii","type_id","type_id","type_id","type_id","type_id","urn","uuid","with_variant","with_version","Braced","Hyphenated","LENGTH","LENGTH","LENGTH","LENGTH","Simple","Urn","as_ref","as_ref","as_ref","as_ref","as_uuid","as_uuid","as_uuid","as_uuid","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","default","default","default","encode_lower","encode_lower","encode_lower","encode_lower","encode_upper","encode_upper","encode_upper","encode_upper","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_uuid","from_uuid","from_uuid","from_uuid","hash","hash","hash","hash","into","into","into","into","into_uuid","into_uuid","into_uuid","into_uuid","partial_cmp","partial_cmp","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","ClockSequence","Output","Timestamp","UUID_TICKS_BETWEEN_EPOCHS","borrow","borrow_mut","clone","clone_into","context","eq","fmt","from","from_rfc4122","from_unix","generate_sequence","hash","into","now","to_owned","to_unix","to_unix_nanos","try_from","try_into","type_id","NoContext","borrow","borrow_mut","clone","clone_into","default","fmt","from","generate_sequence","into","to_owned","try_from","try_into","type_id"],"q":[[0,"uuid"],[168,"uuid::fmt"],[288,"uuid::timestamp"],[312,"uuid::timestamp::context"],[326,"core::cmp"],[327,"core::fmt"],[328,"core::fmt"],[329,"core::option"],[330,"core::hash"],[331,"alloc::string"],[332,"alloc::vec"],[333,"core::any"]],"d":["A builder for creating a UUID.","A 128-bit (16 byte) buffer containing the UUID.","","Version 8: Custom.","Version 2: DCE Security.","A general error that can occur when working with UUIDs.","Reserved for future expansion.","Version 1: Timestamp and node ID.","The “max” (all ones) UUID.","Version 3: MD5 hash.","Reserved by Microsoft for backward compatibility.","UUID namespace for Domain Name System (DNS).","UUID namespace for ISO Object Identifiers (OIDs).","UUID namespace for Uniform Resource Locators (URLs).","UUID namespace for X.500 Distinguished Names (DNs).","Reserved by the NCS for backward compatibility.","The “nil” (all zeros) UUID.","","As described in the RFC4122 Specification (default).","Version 4: Random.","Version 5: SHA-1 hash.","Version 6: Sortable Timestamp and node ID.","Version 7: Timestamp and random.","","A Universally Unique Identifier (UUID).","The reserved variants of UUIDs.","The version of the UUID, denoting the generating algorithm.","Get a borrowed <code>Braced</code> formatter.","Returns a slice of 16 octets containing the value.","Returns the four field values of the UUID.","Get a borrowed <code>Hyphenated</code> formatter.","","Get a borrowed <code>Simple</code> formatter.","Returns a 128bit value containing the value.","Returns two 64bit values containing the value.","Get a borrowed <code>Urn</code> formatter.","Get a reference to the underlying <code>Uuid</code>.","","","","","","","","","","","Get a <code>Braced</code> formatter.","","","","","","","","","","","A buffer that can be used for <code>encode_...</code> calls, that is …","","","","","Adapters for alternative string formats.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Creates a <code>Builder</code> using the supplied bytes.","Creates a UUID using the supplied bytes.","Creates a <code>Builder</code> using the supplied bytes in little …","Creates a UUID using the supplied bytes in little endian …","Creates a reference to a UUID from a reference to the …","Creates a <code>Builder</code> for a version 8 UUID using the supplied …","Creates a <code>Builder</code> from four field values.","Creates a UUID from four field values.","Creates a <code>Builder</code> from four field values.","Creates a UUID from four field values in little-endian …","Creates a <code>Builder</code> for a version 3 UUID using the supplied …","Creates a <code>Builder</code> for a version 4 UUID using the supplied …","Creates a <code>Builder</code> for a version 1 UUID using the supplied …","Creates a <code>Builder</code> for a version 5 UUID using the supplied …","Creates a <code>Builder</code> using the supplied bytes.","Creates a UUID using the supplied bytes.","Creates a <code>Builder</code> using the supplied bytes in little …","Creates a UUID using the supplied bytes in little endian …","Creates a <code>Builder</code> for a version 6 UUID using the supplied …","","Creates a <code>Builder</code> from a 128bit value.","Creates a UUID from a 128bit value.","Creates a UUID from a 128bit value in little-endian order.","Creates a UUID from a 128bit value in little-endian order.","Creates a UUID from two 64bit values.","Creates a <code>Builder</code> for a version 7 UUID using the supplied …","If the UUID is the correct version (v1, v6, or v7) this …","Returns the variant of the UUID structure.","Returns the version of the UUID.","Returns the version number of the UUID.","","","Get a <code>Hyphenated</code> formatter.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes self and returns the underlying byte value of the …","Convert the builder into a <code>Uuid</code>.","Tests if the UUID is max (all ones).","Tests if the UUID is nil (all zeros).","The ‘max UUID’ (all ones).","Creates a random UUID.","Creates a <code>Builder</code> with an initial <code>Uuid::nil</code>.","The ‘nil UUID’ (all zeros).","Parses a <code>Uuid</code> from a string of hexadecimal digits with …","","Specifies the variant of the UUID.","Specifies the version number of the UUID.","Get a <code>Simple</code> formatter.","Generating UUIDs from timestamps.","Returns the bytes of the UUID in little-endian order.","Returns the four field values of the UUID in little-endian …","","","","","","","","Returns a 128bit little-endian value containing the value.","","","","","","","","","","","","","Parses a <code>Uuid</code> from a string of hexadecimal digits with …","Parses a <code>Uuid</code> from a string of hexadecimal digits with …","","","","","","Get a <code>Urn</code> formatter.","Parse <code>Uuid</code>s from string literals at compile time.","Specifies the variant of the UUID.","Specifies the version number of the UUID.","Format a <code>Uuid</code> as a braced hyphenated string, like …","Format a <code>Uuid</code> as a hyphenated string, like …","The length of a hyphenated <code>Uuid</code> string.","The length of a simple <code>Uuid</code> string.","The length of a URN <code>Uuid</code> string.","The length of a braced <code>Uuid</code> string.","Format a <code>Uuid</code> as a simple string, like …","Format a <code>Uuid</code> as a URN string, like …","","","","","Get a reference to the underlying <code>Uuid</code>.","Get a reference to the underlying <code>Uuid</code>.","Get a reference to the underlying <code>Uuid</code>.","Get a reference to the underlying <code>Uuid</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes the <code>Uuid</code> as a lower-case hyphenated string to <code>buffer</code>…","Writes the <code>Uuid</code> as a lower-case simple string to <code>buffer</code>, …","Writes the <code>Uuid</code> as a lower-case URN string to <code>buffer</code>, and …","Writes the <code>Uuid</code> as a lower-case hyphenated string …","Writes the <code>Uuid</code> as an upper-case hyphenated string to …","Writes the <code>Uuid</code> as an upper-case simple string to <code>buffer</code>, …","Writes the <code>Uuid</code> as an upper-case URN string to <code>buffer</code>, and …","Writes the <code>Uuid</code> as an upper-case hyphenated string …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Creates a <code>Hyphenated</code> from a <code>Uuid</code>.","Creates a <code>Simple</code> from a <code>Uuid</code>.","Creates a <code>Urn</code> from a <code>Uuid</code>.","Creates a <code>Braced</code> from a <code>Uuid</code>.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>Hyphenated</code>, returning the underlying <code>Uuid</code>.","Consumes the <code>Simple</code>, returning the underlying <code>Uuid</code>.","Consumes the <code>Urn</code>, returning the underlying <code>Uuid</code>.","Consumes the <code>Braced</code>, returning the underlying <code>Uuid</code>.","","","","","","","","","","","","","","","","","","","","","","","","","A counter that can be used by version 1 and version 6 …","The type of sequence returned by this counter.","A timestamp that can be encoded into a UUID.","The number of 100 nanosecond ticks between the RFC4122 …","","","","","Default implementations for the <code>ClockSequence</code> trait.","","","Returns the argument unchanged.","Construct a <code>Timestamp</code> from an RFC4122 timestamp and …","Construct a <code>Timestamp</code> from a Unix timestamp, as used in …","Get the next value in the sequence to feed into a …","","Calls <code>U::from(self)</code>.","Get a timestamp representing the current system time.","","Get the value of the timestamp as a Unix timestamp, as …","Get the number of fractional nanoseconds in the Unix …","","","","An empty counter that will always return the value <code>0</code>.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,17,17,0,18,17,17,17,18,1,1,1,1,18,17,0,18,17,17,17,17,0,0,0,0,1,1,1,1,1,1,1,1,1,15,15,16,17,18,1,15,16,17,18,1,1,16,17,18,1,16,17,18,1,1,1,1,16,17,18,1,0,15,16,16,17,18,18,1,1,1,1,15,16,17,18,1,1,1,1,1,15,1,15,1,1,15,15,1,15,1,15,15,15,15,15,1,15,1,15,1,15,1,15,1,1,15,1,1,1,1,16,1,1,15,16,17,18,1,1,15,1,1,1,1,15,1,1,1,15,15,1,0,1,1,16,17,18,1,16,18,1,1,15,16,17,18,1,1,1,15,16,17,18,1,1,1,15,16,17,18,1,1,0,15,15,0,0,9,11,14,2,0,0,9,11,14,2,9,11,14,2,9,9,11,11,14,14,2,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,9,9,9,11,11,11,11,14,14,14,14,2,2,2,2,9,9,11,11,14,14,2,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,0,33,0,0,25,25,25,25,0,25,25,25,25,25,33,25,25,25,25,25,25,25,25,25,0,34,34,34,34,34,34,34,34,34,34,34,34,34],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[1,3],[1,[[8,[4,5,5,[7,[6]]]]]],[1,9],[1,[[10,[6]]]],[1,11],[1,12],[1,[[8,[13,13]]]],[1,14],[15,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[16,16],[17,17],[18,18],[1,1],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[1,1],19],[[],1],[[],[[7,[6]]]],[[16,16],20],[[17,17],20],[[18,18],20],[[1,1],20],0,[[15,21],22],[[16,21],22],[[16,21],22],[[17,21],22],[[18,21],22],[[18,21],22],[[1,21],22],[[1,21],22],[[1,21],22],[[1,21],22],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[14,1],[2,1],[-1,-1,[]],[9,1],[11,1],[3,15],[3,1],[3,15],[3,1],[3,1],[3,15],[[4,5,5,[7,[6]]],15],[[4,5,5,[7,[6]]],1],[[4,5,5,[7,[6]]],15],[[4,5,5,[7,[6]]],1],[3,15],[3,15],[[13,5,[7,[6]]],15],[3,15],[[[10,[6]]],[[23,[15,16]]]],[[[10,[6]]],[[23,[1,16]]]],[[[10,[6]]],[[23,[15,16]]]],[[[10,[6]]],[[23,[1,16]]]],[[13,5,[7,[6]]],15],[24,[[23,[1,-1]]],[]],[12,15],[12,1],[12,15],[12,1],[[13,13],1],[[13,[7,[6]]],15],[1,[[26,[25]]]],[1,18],[1,[[26,[17]]]],[1,27],[[16,-1],8,28],[[1,-1],8,28],[1,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,3],[15,1],[1,20],[1,20],[[],1],[[],1],[[],15],[[],1],[24,[[23,[1,16]]]],[[1,1],[[26,[19]]]],[[15,18],15],[[15,17],15],[1,11],0,[1,3],[1,[[8,[4,5,5,[7,[6]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[1,12],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[24,[[23,[1,-1]]],[]],[[[30,[6]]],[[23,[1,-1]]],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[24,[[23,[1,16]]]],[[[10,[6]]],[[23,[1,16]]]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[1,14],0,[[15,18],15],[[15,17],15],0,0,0,0,0,0,0,0,[9,1],[11,1],[14,1],[2,1],[9,1],[11,1],[14,1],[2,1],[-1,-2,[],[]],[9,1],[-1,-2,[],[]],[11,1],[-1,-2,[],[]],[14,1],[2,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,9],[11,11],[14,14],[2,2],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[9,9],19],[[11,11],19],[[14,14],19],[[2,2],19],[[],9],[[],11],[[],14],[[],2],[[9,[10,[6]]],24],[[11,[10,[6]]],24],[[14,[10,[6]]],24],[[2,[10,[6]]],24],[[9,[10,[6]]],24],[[11,[10,[6]]],24],[[14,[10,[6]]],24],[[2,[10,[6]]],24],[[9,9],20],[[11,11],20],[[14,14],20],[[2,2],20],[[9,21],22],[[9,21],22],[[9,21],22],[[9,21],22],[[11,21],22],[[11,21],22],[[11,21],22],[[11,21],22],[[14,21],22],[[14,21],22],[[14,21],22],[[14,21],22],[[2,21],22],[[2,21],22],[[2,21],22],[[2,21],22],[-1,-1,[]],[1,9],[1,11],[-1,-1,[]],[1,14],[-1,-1,[]],[-1,-1,[]],[1,2],[1,9],[1,11],[1,14],[1,2],[[9,-1],8,28],[[11,-1],8,28],[[14,-1],8,28],[[2,-1],8,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,1],[11,1],[14,1],[2,1],[[9,9],[[26,[19]]]],[[11,11],[[26,[19]]]],[[14,14],[[26,[19]]]],[[2,2],[[26,[19]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[25,25],[[-1,-2],8,[],[]],0,[[25,25],20],[[25,21],22],[-1,-1,[]],[[13,5],25],[[-1,13,4],25,[[33,[],[[32,[5]]]]]],[[[33,[],[[32,[-1]]]],13,4],-1,[]],[[25,-1],8,28],[-1,-2,[],[]],[-1,25,[[33,[],[[32,[5]]]]]],[-1,-2,[],[]],[25,[[8,[13,4]]]],[25,4],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,31,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[34,34],[[-1,-2],8,[],[]],[[],34],[[34,21],22],[-1,-1,[]],[[34,13,4],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,31,[]]],"c":[308],"p":[[5,"Uuid",0],[5,"Braced",168],[8,"Bytes",0],[1,"u32"],[1,"u16"],[1,"u8"],[1,"array"],[1,"tuple"],[5,"Hyphenated",168],[1,"slice"],[5,"Simple",168],[1,"u128"],[1,"u64"],[5,"Urn",168],[5,"Builder",0],[5,"Error",0],[6,"Version",0],[6,"Variant",0],[6,"Ordering",326],[1,"bool"],[5,"Formatter",327],[8,"Result",327],[6,"Result",328],[1,"str"],[5,"Timestamp",288],[6,"Option",329],[1,"usize"],[10,"Hasher",330],[5,"String",331],[5,"Vec",332],[5,"TypeId",333],[17,"Output"],[10,"ClockSequence",288],[5,"NoContext",312]],"b":[[65,"impl-Display-for-Error"],[66,"impl-Debug-for-Error"],[68,"impl-Debug-for-Variant"],[69,"impl-Display-for-Variant"],[70,"impl-UpperHex-for-Uuid"],[71,"impl-LowerHex-for-Uuid"],[72,"impl-Debug-for-Uuid"],[73,"impl-Display-for-Uuid"],[78,"impl-From%3CUrn%3E-for-Uuid"],[79,"impl-From%3CBraced%3E-for-Uuid"],[81,"impl-From%3CHyphenated%3E-for-Uuid"],[82,"impl-From%3CSimple%3E-for-Uuid"],[149,"impl-TryFrom%3C%26str%3E-for-Uuid"],[150,"impl-TryFrom%3CVec%3Cu8%3E%3E-for-Uuid"],[224,"impl-Debug-for-Hyphenated"],[225,"impl-Display-for-Hyphenated"],[226,"impl-UpperHex-for-Hyphenated"],[227,"impl-LowerHex-for-Hyphenated"],[228,"impl-UpperHex-for-Simple"],[229,"impl-Display-for-Simple"],[230,"impl-Debug-for-Simple"],[231,"impl-LowerHex-for-Simple"],[232,"impl-UpperHex-for-Urn"],[233,"impl-LowerHex-for-Urn"],[234,"impl-Debug-for-Urn"],[235,"impl-Display-for-Urn"],[236,"impl-LowerHex-for-Braced"],[237,"impl-UpperHex-for-Braced"],[238,"impl-Debug-for-Braced"],[239,"impl-Display-for-Braced"]]}]\
]'));
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
